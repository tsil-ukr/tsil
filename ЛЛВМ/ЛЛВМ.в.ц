секція ЛЛВМ {
  структура Модуль;
  структура Функція;
  структура Значення;
  структура Тип;
  структура БазовийБлок;
  структура ІнструкціяРозгалуження;
}

зовнішня дія __ЛЛВМ__ініціалізувати();
зовнішня дія __ЛЛВМ__деініціалізувати();
зовнішня дія __ЛЛВМ__тип_войд() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_пойнтер() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_і1() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_і8() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_і16() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_і32() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_і64() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_флоат() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_даубл() -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_функція(кількість_параметрів: натуральне, параметри: памʼять<адреса<ЛЛВМ::Тип>>, тип_результату: адреса<ЛЛВМ::Тип>) -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип_аррай(тип_елемента: адреса<ЛЛВМ::Тип>, розмір: натуральне) -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__тип(назва: адреса<ю8>, кількість_параметрів: натуральне, параметри: памʼять<адреса<ЛЛВМ::Тип>>) -> адреса<ЛЛВМ::Тип>;
зовнішня дія __ЛЛВМ__нулл() -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і1(значення: н8) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і8(значення: н8) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і16(значення: н16) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і32(значення: н32) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і64(значення: н64) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і8ц(значення: ц8) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і16ц(значення: ц16) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і32ц(значення: ц32) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__і64ц(значення: ц64) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__флоат(значення: р32) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__даубл(значення: р64) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__створити_модуль(назва: адреса<ю8>, архітектура: натуральне, система: натуральне) -> адреса<ЛЛВМ::Модуль>;
зовнішня дія __ЛЛВМ__знищити_модуль(модуль: адреса<ЛЛВМ::Модуль>);
зовнішня дія __ЛЛВМ__створити_функцію(модуль: адреса<ЛЛВМ::Модуль>, видимість: натуральне, назва: адреса<ю8>, кількість_параметрів: натуральне, параметри: памʼять<адреса<ЛЛВМ::Тип>>, тип_результату: адреса<ЛЛВМ::Тип>) -> адреса<ЛЛВМ::Функція>;
зовнішня дія __ЛЛВМ__отримати_аргумент_функції(функція: адреса<ЛЛВМ::Функція>, позиція: натуральне) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__створити_базовий_блок(функція: адреса<ЛЛВМ::Функція>, назва: адреса<ю8>) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__інст_аллока(базовий_блок: адреса<ЛЛВМ::БазовийБлок>, тип: адреса<ЛЛВМ::Тип>) -> адреса<ЛЛВМ::Значення>;
зовнішня дія __ЛЛВМ__отримати_ір(модуль: адреса<ЛЛВМ::Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне;

секція ЛЛВМ {
  дія ініціалізувати() {
    __ЛЛВМ__ініціалізувати();
  }

  дія деініціалізувати() {
    __ЛЛВМ__деініціалізувати();
  }

  дія тип_войд() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_войд();
  }

  дія тип_пойнтер() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_пойнтер();
  }

  дія тип_і1() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_і1();
  }

  дія тип_і8() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_і8();
  }

  дія тип_і16() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_і16();
  }

  дія тип_і32() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_і32();
  }

  дія тип_і64() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_і64();
  }

  дія тип_флоат() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_флоат();
  }

  дія тип_даубл() -> адреса<Тип> {
    вернути __ЛЛВМ__тип_даубл();
  }

  дія тип_функція(кількість_параметрів: натуральне, параметри: памʼять<адреса<Тип>>, тип_результату: адреса<Тип>) -> адреса<Тип> {
    вернути __ЛЛВМ__тип_функція(кількість_параметрів, параметри, тип_результату);
  }

  дія тип_аррай(тип_елемента: адреса<Тип>, розмір: натуральне) -> адреса<Тип> {
    вернути __ЛЛВМ__тип_аррай(тип_елемента, розмір);
  }

  дія тип(назва: ю8, кількість_параметрів: натуральне, параметри: памʼять<адреса<Тип>>) -> адреса<Тип> {
    вернути __ЛЛВМ__тип(назва::адреса, кількість_параметрів, параметри);
  }

  дія нулл() -> адреса<Значення> {
    вернути __ЛЛВМ__нулл();
  }

  дія і1(значення: н8) -> адреса<Значення> {
    вернути __ЛЛВМ__і1(значення);
  }

  дія і8(значення: н8) -> адреса<Значення> {
    вернути __ЛЛВМ__і8(значення);
  }

  дія і16(значення: н16) -> адреса<Значення> {
    вернути __ЛЛВМ__і16(значення);
  }

  дія і32(значення: н32) -> адреса<Значення> {
    вернути __ЛЛВМ__і32(значення);
  }

  дія і64(значення: н64) -> адреса<Значення> {
    вернути __ЛЛВМ__і64(значення);
  }

  дія і8ц(значення: ц8) -> адреса<Значення> {
    вернути __ЛЛВМ__і8ц(значення);
  }

  дія і16ц(значення: ц16) -> адреса<Значення> {
    вернути __ЛЛВМ__і16ц(значення);
  }

  дія і32ц(значення: ц32) -> адреса<Значення> {
    вернути __ЛЛВМ__і32ц(значення);
  }

  дія і64ц(значення: ц64) -> адреса<Значення> {
    вернути __ЛЛВМ__і64ц(значення);
  }

  дія флоат(значення: р32) -> адреса<Значення> {
    вернути __ЛЛВМ__флоат(значення);
  }

  дія даубл(значення: р64) -> адреса<Значення> {
    вернути __ЛЛВМ__даубл(значення);
  }

  дія створити_модуль(назва: ю8, архітектура: натуральне, система: натуральне) -> адреса<Модуль> {
    вернути __ЛЛВМ__створити_модуль(назва::адреса, архітектура, система);
  }
  
  дія знищити_модуль(модуль: адреса<Модуль>) {
    __ЛЛВМ__знищити_модуль(модуль);
  }

  дія створити_функцію(модуль: адреса<Модуль>, видимість: натуральне, назва: ю8, кількість_параметрів: натуральне, параметри: памʼять<адреса<Тип>>, тип_результату: адреса<Тип>) -> адреса<Функція> {
    вернути __ЛЛВМ__створити_функцію(модуль, видимість, назва::адреса, кількість_параметрів, параметри, тип_результату);
  }

  дія отримати_аргумент_функції(функція: адреса<Функція>, позиція: натуральне) -> адреса<Значення> {
    вернути __ЛЛВМ__отримати_аргумент_функції(функція, позиція);
  }

  дія створити_базовий_блок(функція: адреса<Функція>, назва: ю8) -> адреса<Значення> {
    вернути __ЛЛВМ__створити_базовий_блок(функція, назва::адреса);
  }

  дія інст_аллока(базовий_блок: адреса<БазовийБлок>, тип: адреса<Тип>) -> адреса<Значення> {
    вернути __ЛЛВМ__інст_аллока(базовий_блок, тип);
  }

  дія отримати_ір(модуль: адреса<Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне {
    вернути __ЛЛВМ__отримати_ір(модуль, вихід_розміру, вихід_даних);
  }
}