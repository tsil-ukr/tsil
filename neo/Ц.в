взяти визначення розбирач;
взяти визначення Л;
взяти біб друк;

зовнішня дія отримати_з_карти_юнікод_комірка(карта: комірка<карта_юнікод_комірка>, назва: памʼять<п8>): невідома_комірка;
зовнішня дія змінити_в_карті_юнікод_комірка(карта: комірка<карта_юнікод_комірка>, назва: памʼять<п8>, значення: невідома_комірка);
зовнішня дія створити_карту_юнікод(): комірка<карта_юнікод_комірка>;

секція ц {
  структура список<Т> {
    дані: памʼять<Т>;
    довжина: позитивне;
    вмісткість: позитивне;
  }

  дія виділити_список<Т>(): комірка<список<Т>> {
    ціль с = виділити<список<Т>>();
    с.дані = пусто;
    с.довжина = 0;
    с.вмісткість = 0;
    вернути с;
  }

  дія додати_до_списку<Т>(с: комірка<список<Т>>, значення: Т) {
    якщо с.довжина == с.вмісткість {
      якщо с.вмісткість == 0 {
        с.дані = виділити<Т>(1);
      } інакше {
        с.дані = перевиділити<Т>(с.дані, с.вмісткість + 1);
      }
      с.вмісткість = с.вмісткість + 1;
    }
    с.дані[с.довжина] = значення;
    с.довжина = с.довжина + 1;
  }

  дія звільнити_список<Т>(с: комірка<список<Т>>) {
    звільнити(с.дані);
    звільнити(с);
  }
}

секція ц {
  синонім ВидСубʼєктаНативнийТип = 1;
  синонім ВидСубʼєктаДія = 2;

  синонім ВидТипуНативний = 1;

  структура карта_юнікод_комірка;

  структура Компілятор;
  структура Середовище;
  структура Субʼєкт;
  структура Тип;
  структура Параметр;
  структура ОбʼєктНативногоТипу;
  структура ОбʼєктДії;

  структура Компілятор {
    глобальне_середовище: комірка<Середовище>;
    Л: комірка<ЛМодуль>;
    тип_ніщо: комірка<Тип>;
    тип_ц8: комірка<Тип>;
    тип_ц16: комірка<Тип>;
    тип_ц32: комірка<Тип>;
    тип_ц64: комірка<Тип>;
    тип_п8: комірка<Тип>;
    тип_п16: комірка<Тип>;
    тип_п32: комірка<Тип>;
    тип_п64: комірка<Тип>;
  }

  структура Середовище {
    батьківське: комірка<Середовище>;
    субʼєкти: комірка<карта_юнікод_комірка>;
  }

  структура Субʼєкт {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу> | комірка<ОбʼєктДії>;
  }

  структура Тип {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу>;
  }

  структура Параметр {
    назва: памʼять<п8>;
    тип: комірка<Тип>;
  }

  структура ОбʼєктНативногоТипу {
    назва: памʼять<п8>;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктДії {
    назва: памʼять<п8>;
    параметри: комірка<список<комірка<Параметр>>>;
    тип_результату: комірка<Тип>;
    л_функція: комірка<ЛФункція>;
  }

  дія створити_середовище(батьківське: комірка<Середовище>): комірка<Середовище> {
    ціль с = виділити<Середовище>();
    с.батьківське = батьківське;
    с.субʼєкти = створити_карту_юнікод();
    вернути с;
  }

  дія отримати_з_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): комірка<Субʼєкт> {
    змінна останнє_середовище = середовище;
    поки останнє_середовище != пусто {
      ціль субʼєкт = отримати_з_карти_юнікод_комірка(останнє_середовище.субʼєкти, назва) як комірка<Субʼєкт>;
      якщо субʼєкт != пусто {
        вернути субʼєкт;
      }
      останнє_середовище = останнє_середовище.батьківське;
    }
    вернути пусто;
  }

  дія змінити_в_середовищі(середовище: комірка<Середовище>, назва: памʼять<п8>, значення: комірка<Субʼєкт>) {
    змінити_в_карті_юнікод_комірка(середовище.субʼєкти, назва, значення);
  }

  дія визначити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, л_тип: комірка<ЛТип>): комірка<Тип> {
    ціль тип = виділити<Тип>();
    тип.вид = ВидТипуНативний;
    ціль обʼєкт_нативного_типу = виділити<ОбʼєктНативногоТипу>();
    обʼєкт_нативного_типу.назва = назва;
    обʼєкт_нативного_типу.л_тип = л_тип;
    тип.дані = обʼєкт_нативного_типу;
    ціль субʼєкт_типу = виділити<Субʼєкт>();
    субʼєкт_типу.вид = ВидСубʼєктаНативнийТип;
    субʼєкт_типу.дані = обʼєкт_нативного_типу;
    змінити_в_середовищі(К.глобальне_середовище, назва, субʼєкт_типу);
    вернути тип;
  }

  дія створити_компілятор(): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.глобальне_середовище = глобальне_середовище;
    К.Л = л::створити(ю8"тест.ц");

    К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", л::отримати_тип_ніщо(К.Л));
    К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", л::отримати_тип_і8(К.Л));
    К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", л::отримати_тип_і16(К.Л));
    К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", л::отримати_тип_і32(К.Л));
    К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", л::отримати_тип_і64(К.Л));
    К.тип_п8 = визначити_нативний_тип(К, ю8"п8", л::отримати_тип_і8(К.Л));
    К.тип_п16 = визначити_нативний_тип(К, ю8"п16", л::отримати_тип_і16(К.Л));
    К.тип_п32 = визначити_нативний_тип(К, ю8"п32", л::отримати_тип_і32(К.Л));
    К.тип_п64 = визначити_нативний_тип(К, ю8"п64", л::отримати_тип_і64(К.Л));

    вернути К;
  }

  дія отримати_ЛТип(тип: комірка<Тип>): комірка<ЛТип> {
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ОбʼєктНативногоТипу>;
      вернути дані.л_тип;
    }
    вернути пусто;
  }
}