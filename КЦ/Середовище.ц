взяти визначення Ц;

секція ц {
  місцева дія порівняти_ю8(а: памʼять<п8>, б: памʼять<п8>): логічне {
    змінна ціль символ_: п8 = а[0];
    змінна ціль х: позитивне = 0;
    поки символ_ != 0 {
      якщо символ_ != б[х] {
        вернути ні;
      }
      х = х + 1;
      символ_ = а[х];
    }
    якщо б[х] != 0 {
      вернути ні;
    }
    вернути так;
  }

  місцева дія створити_середовище(вище: адреса<Середовище>): адреса<Середовище> {
    ціль середовище = виділити<Середовище>();
    середовище.вище = вище;
    середовище.субʼєкти = виділити_реєстр<памʼять<п8>, Обʼєкт>(порівняти_ю8);
    середовище.обʼєкт_секції = пусто;
    вернути середовище;
  }

  місцева дія отримати_зі_середовища(середовище: адреса<Середовище>, назва: памʼять<п8>, куда_записати: адреса<Обʼєкт>): логічне {
    змінна ціль останнє_середовище = середовище;
    поки останнє_середовище != пусто {
      ціль елемент_реєстру = отримати_з_реєстру<памʼять<п8>, Обʼєкт>(останнє_середовище.субʼєкти, назва);
      якщо елемент_реєстру != пусто {
        ціль обʼєкт = елемент_реєстру.значення;
        куда_записати.вид = обʼєкт.вид;
        якщо обʼєкт.вид == ВидОбʼєктаЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктЗначення;
        } інакше якщо обʼєкт.вид == ВидОбʼєктаНезавантаженогоЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктНезавантаженогоЗначення;
        } інакше якщо обʼєкт.вид == ВидОбʼєктаСирогоЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктСирогоЗначення;
        } інакше {
          куда_записати.дані = обʼєкт.дані як адреса<ОбʼєктТипу>;
        }
        вернути так;
      }
      останнє_середовище = останнє_середовище.вище;
    }
    вернути ні;
  }

  місцева дія отримати_з_локального_середовища(середовище: адреса<Середовище>, назва: памʼять<п8>, куда_записати: адреса<Обʼєкт>): логічне {
    ціль елемент_реєстру = отримати_з_реєстру<памʼять<п8>, Обʼєкт>(середовище.субʼєкти, назва);
    якщо елемент_реєстру != пусто {
      ціль обʼєкт = елемент_реєстру.значення;
      куда_записати.вид = обʼєкт.вид;
        якщо обʼєкт.вид == ВидОбʼєктаЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктЗначення;
        } інакше якщо обʼєкт.вид == ВидОбʼєктаНезавантаженогоЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктНезавантаженогоЗначення;
        } інакше якщо обʼєкт.вид == ВидОбʼєктаСирогоЗначення {
          куда_записати.дані = обʼєкт.дані як ОбʼєктСирогоЗначення;
        } інакше {
          куда_записати.дані = обʼєкт.дані як адреса<ОбʼєктТипу>;
        }
      вернути так;
    }
    вернути ні;
  }

  місцева дія змінити_в_середовищі(середовище: адреса<Середовище>, назва: памʼять<п8>, обʼєкт: Обʼєкт) {
    змінити_в_реєстрі<памʼять<п8>, Обʼєкт>(середовище.субʼєкти, назва, обʼєкт);
  }

  дія обʼєднати_список_ю8_обернено(значення: адреса<Накопичувач<памʼять<п8>>>): памʼять<п8> {
    змінна ціль буфер = створити_буфер_ю8();
    змінна ціль х: ціле = ціле(значення.розмір) - 1; // !!!! має бути цілим бо може бути відʼємним
    поки х >= 0 {
      додати_до_буфера_ю8(буфер, значення.дані[п64(х)]);
      х = х - 1;
    }
    ціль результат = створити_ю8_сі_з_буфера(буфер);
    звільнити_буфер_ю8(буфер);
    вернути результат;
  }

  місцева дія отримати_повну_назву(середовище: адреса<Середовище>, назва: памʼять<п8>): памʼять<п8> {
    ціль буфер_назви = виділити_накопичувач<памʼять<п8>>();
    покласти_в_накопичувач<памʼять<п8>>(буфер_назви, назва);
    змінна ціль останнє_середовище = середовище;
    поки останнє_середовище != пусто {
      якщо останнє_середовище.обʼєкт_секції != пусто {
        якщо останнє_середовище.обʼєкт_секції.назва != пусто {
          покласти_в_накопичувач<памʼять<п8>>(буфер_назви, ю8"::");
          покласти_в_накопичувач<памʼять<п8>>(буфер_назви, останнє_середовище.обʼєкт_секції.назва);
        }
      }
      останнє_середовище = останнє_середовище.вище;
    }
    ціль результат = обʼєднати_список_ю8_обернено(буфер_назви);
    звільнити_накопичувач<памʼять<п8>>(буфер_назви);
    вернути результат;
  }
}