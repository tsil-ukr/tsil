взяти визначення різне;
взяти визначення розбирач;
взяти визначення LLVM;
взяти біб друк;

зовнішня дія зʼєднати_ю8(значення: памʼять<п8>, значення2: памʼять<п8>): памʼять<п8>;

зовнішня дія strcmp(а: памʼять<п8>, б: памʼять<п8>): ц32;

структура список<Т> {
  дані: памʼять<Т>;
  довжина: позитивне;
  вмісткість: позитивне;
}

дія виділити_список<Т>(): комірка<список<Т>> {
  ціль с = виділити<список<Т>>();
  с.дані = пусто;
  с.довжина = 0;
  с.вмісткість = 0;
  вернути с;
}

дія додати_до_списку<Т>(с: комірка<список<Т>>, значення: Т) {
  якщо с.довжина == с.вмісткість {
    якщо с.вмісткість == 0 {
      с.дані = виділити<Т>(1);
    } інакше {
      с.дані = перевиділити<Т>(с.дані, с.вмісткість + 1);
    }
    с.вмісткість = с.вмісткість + 1;
  }
  с.дані[с.довжина] = значення;
  с.довжина = с.довжина + 1;
}

дія звільнити_список<Т>(с: комірка<список<Т>>) {
  звільнити(с.дані);
  звільнити(с);
}

структура ЕлементКарти<К, З> {
  ключ: К;
  значення: З;
}

структура карта<К, З> {
  елементи: комірка<список<ЕлементКарти<К, З>>>;
  перевірити_ключ: (К, К) -> логічне;
}

дія виділити_карту<К, З>(перевірити_ключ: (К, К) -> логічне): комірка<карта<К, З>> {
  ціль с = виділити<карта<К, З>>();
  с.елементи = виділити_список<ЕлементКарти<К, З>>();
  с.перевірити_ключ = перевірити_ключ;
  вернути с;
}

дія отримати_значення_з_карти<К, З>(с: комірка<карта<К, З>>, ключ: К, пусте_значення: З): З {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == так {
      вернути с.елементи.дані[х].значення;
    }
    х = х + 1;
  }
  вернути пусте_значення;
}

дія перевірити_чи_карта_містить_значення<К, З>(с: комірка<карта<К, З>>, ключ: К): логічне {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == так {
      вернути так;
    }
    х = х + 1;
  }
  вернути ні;
}

дія змінити_значення_карти<К, З>(с: комірка<карта<К, З>>, ключ: К, значення: З): ціле {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == 1 {
      с.елементи.дані[х].значення = значення;
      вернути с.елементи.довжина;
    }
    х = х + 1;
  }
  додати_до_списку<ЕлементКарти<К, З>>(с.елементи, ЕлементКарти<К, З> { ключ, значення });
  вернути с.елементи.довжина;
}

дія видалити_з_карти<К, З>(с: комірка<карта<К, З>>, ключ: К): позитивне {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == 1 {
      змінна у = х;
      поки у < с.елементи.довжина - 1 {
        с.елементи.дані[у] = с.елементи.дані[у + 1];
        у = у + 1;
      }
      с.елементи.довжина = с.елементи.довжина - 1;
      вернути 1;
    }
    х = х + 1;
  }
  вернути 0;
}

дія звільнити_карту<К, З>(с: комірка<карта<К, З>>) {
  звільнити_список<ЕлементКарти<К, З>>(с.елементи);
  звільнити(с);
}

синонім буфер_ю8 = список<п8>;

дія створити_буфер_ю8(): комірка<список<п8>> {
  вернути виділити_список<п8>();
}

дія додати_до_буфера_ю8(буфер: комірка<список<п8>>, значення: памʼять<п8>) {
  змінна х = 0;
  поки значення[х] != 0 {
    додати_до_списку<п8>(буфер, значення[х]);
    х = х + 1;
  }
}

дія додати_символ_до_буфера_ю8(буфер: комірка<список<п8>>, значення: п8) {
  додати_до_списку<п8>(буфер, значення);
}

дія звільнити_буфер_ю8(буфер: комірка<список<п8>>) {
  звільнити_список<п8>(буфер);
}

дія створити_ю8_сі_з_буфера(буфер: комірка<список<п8>>): памʼять<п8> {
  ціль значення = виділити<п8>(буфер.довжина + 1);
  змінна х = 0;
  поки х < буфер.довжина {
    значення[х] = буфер.дані[х];
    х = х + 1;
  }
  значення[буфер.довжина] = 0;
  вернути значення;
}

дія створити_зворотний_ю8_сі_з_буфера(буфер: комірка<список<п8>>): памʼять<п8> {
  ціль значення = виділити<п8>(буфер.довжина + 1);
  змінна х = буфер.довжина;
  поки х > 0 {
    значення[буфер.довжина - х] = буфер.дані[х - 1];
    х = х - 1;
  }
  значення[буфер.довжина] = 0;
  вернути значення;
}

секція ц {
  місцева дія порівняти_ю8(а: памʼять<п8>, б: памʼять<п8>): логічне;

  синонім ВидОбʼєктаТипу = 1;
  синонім ВидОбʼєктаДії = 2;
  синонім ВидОбʼєктаЗначення = 4;
  синонім ВидОбʼєктаСекції = 5;
  синонім ВидОбʼєктаНезавантаженогоЗначення = 6;
  синонім ВидОбʼєктаШаблону = 7;

  синонім ВидТипуНативний = 1;
  синонім ВидТипуСтруктура = 2;
  синонім ВидТипуДія = 3;
  синонім ВидТипуКомірка = 4;
  синонім ВидТипуМасив = 5;

  структура Компілятор;
  структура Середовище;
  структура Обʼєкт;
  структура ПомилкаКомпіляції;
  структура Результат;
  структура РезультатЯкТип;
  структура РезультатЯкЗначення;
  структура РезультатКомпіляціїТілаСекції;
  структура РезультатКомпіляціїБлоку;
  структура ВластивістьСтруктури;
  структура ПараметрДії;
  структура ОбʼєктТипу;
  структура ОбʼєктДії;
  структура ОбʼєктНезавантаженогоЗначення;
  структура ОбʼєктЗначення;
  структура ОбʼєктСекції;
  структура ОбʼєктШаблону;

  структура ІнформаціяСередовища {
    середовище: комірка<Середовище>;
    обʼєкт_дії: комірка<ОбʼєктДії>;
    llvm_block: комірка<LLVM::BasicBlock>;
    інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>;
  }

  структура ОбʼєктЗначення {
    тип: комірка<ОбʼєктТипу>;
    llvm_value: комірка<LLVM::Value>;
  }

  структура Компілятор {
    L: комірка<LLVM::TL>;
    глобальне_середовище: комірка<Середовище>;
    тип_ніщо: комірка<ОбʼєктТипу>;
    тип_логічне: комірка<ОбʼєктТипу>;
    тип_ц8: комірка<ОбʼєктТипу>;
    тип_ц16: комірка<ОбʼєктТипу>;
    тип_ц32: комірка<ОбʼєктТипу>;
    тип_ц64: комірка<ОбʼєктТипу>;
    тип_ціле: комірка<ОбʼєктТипу>;
    тип_п8: комірка<ОбʼєктТипу>;
    тип_п16: комірка<ОбʼєктТипу>;
    тип_п32: комірка<ОбʼєктТипу>;
    тип_п64: комірка<ОбʼєктТипу>;
    тип_позитивне: комірка<ОбʼєктТипу>;
    тип_д32: комірка<ОбʼєктТипу>;
    тип_д64: комірка<ОбʼєктТипу>;
    тип_дійсне: комірка<ОбʼєктТипу>;
    тип_невідома_комірка: комірка<ОбʼєктТипу>;
    тип_невідома_памʼять: комірка<ОбʼєктТипу>;
    тип_комірка: комірка<ОбʼєктТипу>;
    тип_памʼять: комірка<ОбʼєктТипу>;
    обʼєкт_значення_так: ОбʼєктЗначення;
    обʼєкт_значення_ні: ОбʼєктЗначення;
    обʼєкт_значення_пусто: ОбʼєктЗначення;
  }
  місцева дія створити_компілятор(L: комірка<LLVM::TL>): комірка<Компілятор>;
  місцева дія виділити_тип_комірки(К: комірка<Компілятор>, назва: памʼять<п8>, тип_комірки: комірка<ОбʼєктТипу>): комірка<ОбʼєктТипу>;
  місцева дія виділити_тип_памʼяті(К: комірка<Компілятор>, назва: памʼять<п8>, тип_комірки: комірка<ОбʼєктТипу>): комірка<ОбʼєктТипу>;

  структура Середовище {
    вище: комірка<Середовище>;
    субʼєкти: комірка<карта<памʼять<п8>, Обʼєкт>>;
    обʼєкт_секції: комірка<ОбʼєктСекції>;
  }
  місцева дія отримати_зі_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>, куда_записати: комірка<Обʼєкт>): логічне;
  місцева дія отримати_з_локального_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>, куда_записати: комірка<Обʼєкт>): логічне;
  місцева дія змінити_в_середовищі(середовище: комірка<Середовище>, назва: памʼять<п8>, обʼєкт: Обʼєкт);
  місцева дія створити_середовище(вище: комірка<Середовище>): комірка<Середовище>;

  структура Блок {
    llvm_block: комірка<LLVM::BasicBlock>;
    llvm_exit_block: комірка<LLVM::BasicBlock>;
    llvm_return_exit_block: комірка<LLVM::BasicBlock>;
  }

  структура Обʼєкт {
    вид: позитивне;
    дані: комірка<ОбʼєктТипу> | комірка<ОбʼєктДії> | комірка<ОбʼєктСекції> | комірка<ОбʼєктШаблону> | ОбʼєктНезавантаженогоЗначення | ОбʼєктЗначення;
  }
  місцева дія обʼєкт_додати(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_відняти(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_помножити(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_поділити(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_поділити_за_модулем(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_зсунути_вліво(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_зсунути_вправо(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_зсунути_вправо_знаковий(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_більше(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_менше(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_більше_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_менше_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_не_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_ді(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_дабо(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;
  місцева дія обʼєкт_вабо(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат;

  структура ПомилкаКомпіляції {
    місцезнаходження: комірка<Місцезнаходження>;
    повідомлення: памʼять<п8>;
  }
  місцева дія виділити_помилку_компіляції(місцезнаходження: комірка<Місцезнаходження>, повідомлення: памʼять<п8>): комірка<ПомилкаКомпіляції>;

  структура Результат {
    обʼєкт: Обʼєкт;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатЯкТип {
    обʼєкт_типу: комірка<ОбʼєктТипу>;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатЯкЗначення {
    обʼєкт_значення: ОбʼєктЗначення;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатКомпіляціїТілаСекції {
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатКомпіляціїБлоку {
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура ВластивістьСтруктури {
    назва: памʼять<п8>;
    тип: комірка<ОбʼєктТипу>;
  }

  структура ПараметрДії {
    назва: памʼять<п8>;
    тип: комірка<ОбʼєктТипу>;
  }

  структура ОбʼєктТипу {
    вид: позитивне;
    назва: памʼять<п8>;
    властивості_структури: комірка<список<ВластивістьСтруктури>>;
    параметри_дії: комірка<список<ПараметрДії>>;
    тип_результату_дії: комірка<ОбʼєктТипу>;
    тип_комірки: комірка<ОбʼєктТипу>;
    тип_масиву: комірка<ОбʼєктТипу>;
    розмір_масиву: позитивне;
    llvm_type: комірка<LLVM::Type>;
  }
  місцева дія виділити_обʼєкт_типу(вид: позитивне): комірка<ОбʼєктТипу>;
  місцева дія виділити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, llvm_type: комірка<LLVM::Type>): комірка<ОбʼєктТипу>;
  місцева дія перевірити_тип(тип_1: комірка<ОбʼєктТипу>, тип_2: комірка<ОбʼєктТипу>): логічне;

  синонім ВидимістьДіїВнутрішня = 1;
  синонім ВидимістьДіїМісцева = 2;
  синонім ВидимістьДіїЗовнішня = 3;

  структура ОбʼєктДії {
    видимість: позитивне;
    назва: памʼять<п8>;
    параметри: комірка<список<ПараметрДії>>;
    тип_результату: комірка<ОбʼєктТипу>;
    тип: комірка<ОбʼєктТипу>;
    llvm_function: комірка<LLVM::Function>;
    llvm_return_value: комірка<LLVM::Value>;
    llvm_alloca_block: комірка<LLVM::BasicBlock>;
    llvm_entry_block: комірка<LLVM::BasicBlock>;
    llvm_return_block: комірка<LLVM::BasicBlock>;
    середовище_компіляції_дії: комірка<Середовище>;
    середовище_тіла_дії: комірка<Середовище>;
  }

  структура ОбʼєктНезавантаженогоЗначення {
    тип: комірка<ОбʼєктТипу>;
    llvm_value: комірка<LLVM::Value>;
  }

  структура ОбʼєктСекції {
    назва: памʼять<п8>;
    середовище: комірка<Середовище>;
  }

  структура ОбʼєктШаблону {
    назва: памʼять<п8>;
    інформація_середовища_компіляції: ІнформаціяСередовища;
    параметри: комірка<список<памʼять<п8>>>;
    карта_готових_значень: комірка<карта<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>>;
    асд_значення: комірка<АСДЗначення>;
  }

  структура ІнформаціяВиконанняШаблону {
    шаблон: комірка<ОбʼєктШаблону>;
    аргументи: комірка<список<комірка<ОбʼєктТипу>>>;
  }

  структура РезультатКомпіляціїПоки {
    new_llvm_block: комірка<LLVM::BasicBlock>;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатКомпіляціїЯкщо {
    new_llvm_block: комірка<LLVM::BasicBlock>;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  місцева дія скомпілювати_значення(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, асд_значення: комірка<АСДЗначення>, очікуваний_тип: комірка<ОбʼєктТипу>): Результат;
  місцева дія скомпілювати_значення_як_значення(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, асд_значення: комірка<АСДЗначення>, очікуваний_тип: комірка<ОбʼєктТипу>): РезультатЯкЗначення;
  місцева дія скомпілювати_значення_як_тип(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, асд_значення: комірка<АСДЗначення>, перевірка_на_повність: логічне): РезультатЯкТип;

  місцева дія скомпілювати_число(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗначенняЧисло>, очікуваний_тип: комірка<ОбʼєктТипу>): Результат;
  місцева дія скомпілювати_структуру(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): Результат;
  місцева дія скомпілювати_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): Результат;
  місцева дія скомпілювати_операцію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніОперація>): Результат;
  місцева дія скомпілювати_звернутись(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗвернутись>): Результат;
  місцева дія скомпілювати_виконати(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВиконати>): Результат;
  місцева дія скомпілювати_отримати(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніОтримати>): Результат;
  місцева дія скомпілювати_обʼєкт(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗначенняОбʼєкт>): Результат;
  місцева дія скомпілювати_безтиповий_обʼєкт(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗначенняБезтиповийОбʼєкт>, очікуваний_тип: комірка<ОбʼєктТипу>): Результат;
  місцева дія скомпілювати_як(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЯк>): Результат;
  місцева дія скомпілювати_секцію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСекція>): Результат;
  місцева дія скомпілювати_отримати_зі_секції(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніОтриматиЗіСекції>): Результат;
  місцева дія скомпілювати_виконати_шаблон(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВиконатиШаблон>): Результат;
  місцева дія скомпілювати_синонім(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСинонім>): Результат;

  місцева дія скомпілювати_визначити_ціль(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЦіль>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_визначити_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_визначити_структуру(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_визначити_шаблон(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_визначити_синонім(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСинонім>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_визначити_секцію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСекція>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_поки(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПоки>): РезультатКомпіляціїПоки;
  місцева дія скомпілювати_якщо(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЯкщо>): РезультатКомпіляціїЯкщо;

  місцева дія скомпілювати_змінити(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗмінити>): комірка<ПомилкаКомпіляції>;
  місцева дія скомпілювати_перевизначити(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПеревизначити>): комірка<ПомилкаКомпіляції>;

  місцева дія скомпілювати_блок(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, llvm_exit_block: комірка<LLVM::BasicBlock>, тіло: комірка<СписокАСДЗначень>): РезультатКомпіляціїБлоку;
  місцева дія скомпілювати_тіло_секції(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, тіло: комірка<СписокАСДЗначень>): РезультатКомпіляціїТілаСекції;

  місцева дія заповнити_структуру(К: комірка<Компілятор>, обʼєкт_типу: комірка<ОбʼєктТипу>, інформація_середовища: ІнформаціяСередовища, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції>;

  місцева дія отримати_повну_назву(середовище: комірка<Середовище>, назва: памʼять<п8>): памʼять<п8>;
}