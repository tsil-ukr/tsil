взяти визначення розбирач;
взяти визначення LLVM;
взяти біб друк;

зовнішня дія strcmp(а: памʼять<п8>, б: памʼять<п8>): ц32;

структура карта_субʼєктів;
структура карта_комірок;

зовнішня дія отримати_з_карти_субʼєктів(карта: комірка<карта_субʼєктів>, назва: памʼять<п8>, комірка_типу: комірка<позитивне>, комірка_даних: комірка<невідома_комірка>): позитивне;
зовнішня дія змінити_в_карті_субʼєктів(карта: комірка<карта_субʼєктів>, назва: памʼять<п8>, тип: позитивне, дані: невідома_комірка);
зовнішня дія створити_карту_субʼєктів(): комірка<карта_субʼєктів>;

зовнішня дія отримати_з_карти_комірок(карта: комірка<карта_комірок>, назва: памʼять<п8>, комірка_значення: комірка<невідома_комірка>): позитивне;
зовнішня дія змінити_в_карті_комірок(карта: комірка<карта_комірок>, назва: памʼять<п8>, значення: невідома_комірка);
зовнішня дія створити_карту_комірок(): комірка<карта_комірок>;

структура список<Т> {
  дані: памʼять<Т>;
  довжина: позитивне;
  вмісткість: позитивне;
}

дія виділити_список<Т>(): комірка<список<Т>> {
  ціль с = виділити<список<Т>>();
  с.дані = пусто;
  с.довжина = 0;
  с.вмісткість = 0;
  вернути с;
}

дія додати_до_списку<Т>(с: комірка<список<Т>>, значення: Т) {
  якщо с.довжина == с.вмісткість {
    якщо с.вмісткість == 0 {
      с.дані = виділити<Т>(1);
    } інакше {
      с.дані = перевиділити<Т>(с.дані, с.вмісткість + 1);
    }
    с.вмісткість = с.вмісткість + 1;
  }
  с.дані[с.довжина] = значення;
  с.довжина = с.довжина + 1;
}

дія звільнити_список<Т>(с: комірка<список<Т>>) {
  звільнити(с.дані);
  звільнити(с);
}

структура ЕлементКарти<К, З> {
  ключ: К;
  значення: З;
}

структура карта<К, З> {
  елементи: комірка<список<ЕлементКарти<К, З>>>;
  перевірити_ключ: (К, К) -> логічне;
}

дія виділити_карту<К, З>(перевірити_ключ: (К, К) -> логічне): комірка<карта<К, З>> {
  ціль с = виділити<карта<К, З>>();
  с.елементи = виділити_список<ЕлементКарти<К, З>>();
  с.перевірити_ключ = перевірити_ключ;
  вернути с;
}

дія отримати_значення_з_карти<К, З>(с: комірка<карта<К, З>>, ключ: К, пусте_значення: З): З {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == так {
      вернути с.елементи.дані[х].значення;
    }
    х = х + 1;
  }
  вернути пусте_значення;
}

дія перевірити_чи_карта_містить_значення<К, З>(с: комірка<карта<К, З>>, ключ: К): логічне {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == так {
      вернути так;
    }
    х = х + 1;
  }
  вернути ні;
}

дія змінити_значення_карти<К, З>(с: комірка<карта<К, З>>, ключ: К, значення: З): ціле {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == 1 {
      с.елементи.дані[х].значення = значення;
      вернути с.елементи.довжина;
    }
    х = х + 1;
  }
  додати_до_списку<ЕлементКарти<К, З>>(с.елементи, ЕлементКарти<К, З> { ключ, значення });
  вернути с.елементи.довжина;
}

дія видалити_з_карти<К, З>(с: комірка<карта<К, З>>, ключ: К): позитивне {
  змінна х = 0;
  поки х < с.елементи.довжина {
    якщо с.перевірити_ключ(с.елементи.дані[х].ключ, ключ) == 1 {
      змінна у = х;
      поки у < с.елементи.довжина - 1 {
        с.елементи.дані[у] = с.елементи.дані[у + 1];
        у = у + 1;
      }
      с.елементи.довжина = с.елементи.довжина - 1;
      вернути 1;
    }
    х = х + 1;
  }
  вернути 0;
}

дія звільнити_карту<К, З>(с: комірка<карта<К, З>>) {
  звільнити_список<ЕлементКарти<К, З>>(с.елементи);
  звільнити(с);
}

секція ц {
  синонім ВидСубʼєктаНативнийТип = 1;
  синонім ВидСубʼєктаДія = 2;
  синонім ВидСубʼєктаЦіль = 3;
  синонім ВидСубʼєктаСтруктура = 4;
  синонім ВидСубʼєктаКонстанта = 5;
  синонім ВидСубʼєктаШаблон = 6;

  синонім ВидТипуНативний = 1;
  синонім ВидТипуСтруктура = 2;
  синонім ВидТипуДія = 3;
  синонім ВидТипуКомірка = 4;
  синонім ВидТипуШаблон = 5;

  структура Компілятор;
  структура ПомилкаКомпіляції;
  структура Середовище;
  структура Субʼєкт;
  структура Тип;
  структура Параметр;
  структура ОбʼєктНативногоТипу;
  структура ОбʼєктТипуДії;
  структура ОбʼєктДії;
  структура ОбʼєктСтруктури;
  структура ОбʼєктЦілі;
  структура ОбʼєктКонстанти;
  структура ОбʼєктТипуКомірка;
  структура ОбʼєктШаблону;

  структура Компілятор {
    глобальне_середовище: комірка<Середовище>;
    Л: комірка<ЛМодуль>;
    тип_ніщо: Тип;
    тип_комірка: Тип;
    тип_ц8: Тип;
    тип_ц16: Тип;
    тип_ц32: Тип;
    тип_ц64: Тип;
    тип_п8: Тип;
    тип_п16: Тип;
    тип_п32: Тип;
    тип_п64: Тип;
    тип_д32: Тип;
    тип_д64: Тип;
    константа_пусто: комірка<ОбʼєктКонстанти>;
  }

  структура ПомилкаКомпіляції {
    місцезнаходження: комірка<Місцезнаходження>;
    повідомлення: памʼять<п8>;
  }

  дія створити_помилку_компіляції(місцезнаходження: комірка<Місцезнаходження>, повідомлення: памʼять<п8>): комірка<ПомилкаКомпіляції> {
    ціль помилка_компіляції = виділити<ПомилкаКомпіляції>();
    помилка_компіляції.місцезнаходження = місцезнаходження;
    помилка_компіляції.повідомлення = повідомлення;
    вернути помилка_компіляції;
  }

  структура Середовище {
    батьківське: комірка<Середовище>;
    субʼєкти: комірка<карта_субʼєктів>;
  }

  структура Субʼєкт {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу> | комірка<ОбʼєктДії> | комірка<ОбʼєктСтруктури> | комірка<ОбʼєктЦілі> | комірка<ОбʼєктКонстанти> | комірка<ОбʼєктШаблону>;
  }

  структура Тип {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу> | комірка<ОбʼєктСтруктури> | комірка<ОбʼєктТипуДії> | комірка<ОбʼєктТипуКомірка> | комірка<ОбʼєктШаблону>;
  }

  структура Параметр {
    назва: памʼять<п8>;
    тип: Тип;
  }

  структура ОбʼєктНативногоТипу {
    назва: памʼять<п8>;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктТипуДії {
    параметри: комірка<список<комірка<Параметр>>>;
    тип_результату: Тип;
    л_тип_функції: комірка<ЛТипФункції>;
  }

  структура ОбʼєктДії {
    назва: памʼять<п8>;
    параметри: комірка<список<комірка<Параметр>>>;
    тип_результату: Тип;
    обʼєкт_типу_дії: комірка<ОбʼєктТипуДії>;
    л_функція: комірка<ЛФункція>;
  }

  структура ОбʼєктСтруктури {
    назва: памʼять<п8>;
    параметри: комірка<список<комірка<Параметр>>>;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктЦілі {
    назва: памʼять<п8>;
    тип: Тип;
    л_значення: комірка<ЛЗначення>;
  }

  структура ОбʼєктКонстанти {
    тип: Тип;
    л_значення: комірка<ЛЗначення>;
  }

  структура ОбʼєктТипуКомірка {
    тип_елемента: Тип;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктШаблону {
    зовнішнє_середовище: комірка<Середовище>;
    параметри: комірка<список<памʼять<п8>>>;
    асд_значення: комірка<АСДЗначення>;
  }

  дія створити_середовище(батьківське: комірка<Середовище>): комірка<Середовище> {
    ціль с = виділити<Середовище>();
    с.батьківське = батьківське;
    с.субʼєкти = створити_карту_субʼєктів();
    вернути с;
  }

  структура РезультатОтриманняЗСередовища {
    знайдено: логічне;
    субʼєкт: Субʼєкт;
  }

  дія отримати_з_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): РезультатОтриманняЗСередовища {
    змінна останнє_середовище = середовище;
    поки останнє_середовище != пусто {
      ціль вид: позитивне = 0;
      ціль дані: невідома_комірка = пусто;
      ціль знайдено = отримати_з_карти_субʼєктів(останнє_середовище.субʼєкти, назва, комірка(вид), комірка(дані));
      якщо знайдено == так {
        вернути РезультатОтриманняЗСередовища { так, Субʼєкт { вид, дані як комірка<ОбʼєктНативногоТипу> } };
      }
      останнє_середовище = останнє_середовище.батьківське;
    }
    вернути РезультатОтриманняЗСередовища { ні };
  }

  дія отримати_з_локального_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): РезультатОтриманняЗСередовища {
    ціль вид: позитивне = 0;
    ціль дані: невідома_комірка = пусто;
    ціль знайдено = отримати_з_карти_субʼєктів(середовище.субʼєкти, назва, комірка(вид), комірка(дані));
    якщо знайдено == так {
      вернути РезультатОтриманняЗСередовища { так, Субʼєкт { вид, дані як комірка<ОбʼєктНативногоТипу> } };
    }
    вернути РезультатОтриманняЗСередовища { ні };
  }

  дія змінити_в_середовищі(середовище: комірка<Середовище>, назва: памʼять<п8>, значення: Субʼєкт) {
    змінити_в_карті_субʼєктів(середовище.субʼєкти, назва, значення.вид, (значення.дані як комірка<ОбʼєктНативногоТипу>) як невідома_комірка);
  }

  дія визначити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, л_тип: комірка<ЛТип>): Тип {
    ціль обʼєкт_нативного_типу = виділити<ОбʼєктНативногоТипу>();
    обʼєкт_нативного_типу.назва = назва;
    обʼєкт_нативного_типу.л_тип = л_тип;
    змінити_в_середовищі(К.глобальне_середовище, назва, Субʼєкт { ВидСубʼєктаНативнийТип, обʼєкт_нативного_типу });
    вернути Тип { ВидТипуНативний, обʼєкт_нативного_типу };
  }

  дія створити_компілятор(Л: комірка<ЛМодуль>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.глобальне_середовище = глобальне_середовище;
    К.Л = Л;

    К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", LLVM::void(К.Л));
    К.тип_комірка = визначити_нативний_тип(К, ю8"комірка", LLVM::pointer(К.Л));
    змінити_в_середовищі(К.глобальне_середовище, ю8"невідома_комірка", Субʼєкт { ВидСубʼєктаНативнийТип, К.тип_комірка.дані як комірка<ОбʼєктНативногоТипу> });
    К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", LLVM::і8(К.Л));
    К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", LLVM::і16(К.Л));
    К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", LLVM::і32(К.Л));
    К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", LLVM::і64(К.Л));
    К.тип_п8 = визначити_нативний_тип(К, ю8"п8", LLVM::і8(К.Л));
    К.тип_п16 = визначити_нативний_тип(К, ю8"п16", LLVM::і16(К.Л));
    К.тип_п32 = визначити_нативний_тип(К, ю8"п32", LLVM::і32(К.Л));
    К.тип_п64 = визначити_нативний_тип(К, ю8"п64", LLVM::і64(К.Л));
    К.тип_д32 = визначити_нативний_тип(К, ю8"д32", LLVM::f32(К.Л));
    К.тип_д64 = визначити_нативний_тип(К, ю8"д64", LLVM::f64(К.Л));

    К.константа_пусто = виділити<ОбʼєктКонстанти>();
    К.константа_пусто.тип = К.тип_комірка;
    К.константа_пусто.л_значення = LLVM::null(К.Л);
    змінити_в_середовищі(К.глобальне_середовище, ю8"пусто", Субʼєкт { ВидСубʼєктаКонстанта, К.константа_пусто });

    вернути К;
  }

  місцева дія отримати_ЛТип(К: комірка<Компілятор>, тип: Тип): комірка<ЛТип>;
  місцева дія перевірити_чи_тип_комірка(К: комірка<Компілятор>, тип: Тип): логічне;
  місцева дія перевірити_тип(К: комірка<Компілятор>, тип: Тип, очікуваний_тип: Тип): логічне;
  місцева дія перевірити_чи_тип_підтримує_add(К: комірка<Компілятор>, тип: Тип): логічне;
  місцева дія перевірити_чи_тип_підтримує_fadd(К: комірка<Компілятор>, тип: Тип): логічне;
  місцева дія перевірити_чи_тип_підтримує_sub(К: комірка<Компілятор>, тип: Тип): логічне;
  місцева дія перевірити_чи_тип_підтримує_fsub(К: комірка<Компілятор>, тип: Тип): логічне;

  дія тип_в_субʼєкт(К: комірка<Компілятор>, тип: Тип): Субʼєкт {
    якщо тип.вид == ВидТипуНативний {
      вернути Субʼєкт { ВидСубʼєктаНативнийТип, тип.дані як комірка<ОбʼєктНативногоТипу> };
    }
    якщо тип.вид == ВидТипуСтруктура {
      вернути Субʼєкт { ВидСубʼєктаСтруктура, тип.дані як комірка<ОбʼєктСтруктури> };
    }
//    якщо тип.вид == ВидТипуДія {
//      вернути Субʼєкт { ВидСубʼєктаДія, тип.дані як комірка<ОбʼєктТипуДії> };
//    }
    біб::друк_ю8(ю8"ОЙЙ!!! НЕ ВМІЮ ПЕРЕТВОРЮВАТИ ТИП В СУБʼЄКТ");
    біб::друк_позитивне(тип.вид);
  }
}

секція цк {
  синонім ВидТипуНативний = 1;
  синонім ВидТипуСтруктура = 2;
  синонім ВидТипуДія = 3;
  синонім ВидТипуКомірка = 4;

  синонім ВидОКТип = 1;
  синонім ВидОКДія = 2;
  синонім ВидОКЦіль = 3;
  синонім ВидОКШаблон = 4;
  синонім ВидОКСинонім = 5;
  синонім ВидОКСекція = 6;

  структура Параметр;

  структура ДаніТипуНативний;
  структура ДаніТипуСтруктура;
  структура ДаніТипуДія;
  структура ДаніТипуКомірка;
  структура Тип;
  структура Дія;
  структура Ціль;
  структура Шаблон;
  структура Синонім;
  структура Секція;

  структура ОбʼєктКомпіляції;
  структура ОбʼєктВиконання;
  структура Обʼєкт;

  структура Параметр {
    назва: памʼять<п8>;
    тип: Тип;
  }

  структура ДаніТипуНативний {
    л_тип: комірка<ЛТип>;
  }

  структура ДаніТипуСтруктура {
    л_тип: комірка<ЛТип>;
    параметри: комірка<список<Параметр>>;
  }

  структура ДаніТипуДія {
    л_тип_функції: комірка<ЛТипФункції>;
    параметри: комірка<список<Параметр>>;
    тип_результату: Тип;
  }

  структура ДаніТипуКомірка {
    л_тип: комірка<ЛТип>;
    тип_елемента: Тип;
  }

  структура Тип {
    вид: позитивне;
    дані: комірка<ДаніТипуНативний> | комірка<ДаніТипуСтруктура> | комірка<ДаніТипуДія> | комірка<ДаніТипуКомірка>;
  }

  структура Дія {
    назва: памʼять<п8>;
    параметри: комірка<список<Параметр>>;
    тип_результату: Тип;
    л_функція: комірка<ЛФункція>;
  }

  структура Ціль {
    тип: Тип;
    л_значення_alloca: комірка<ЛЗначення>;
  }

  структура Шаблон {
    зовнішнє_середовище: комірка<Середовище>;
    параметри: комірка<список<памʼять<п8>>>;
    асд_значення: комірка<АСДЗначення>;
    карта_готових_значень: комірка<карта<комірка<список<Значення>>, Значення>>;
  }

  структура Синонім {
    зовнішнє_середовище: комірка<Середовище>;
    асд_значення: комірка<АСДЗначення>;
  }

  структура Секція {
    субʼєкти: невідома_комірка;
  }

  структура ОбʼєктКомпіляції {
    вид: позитивне;
    дані: комірка<Тип> | комірка<Дія> | комірка<Ціль> | комірка<Шаблон> | комірка<Синонім> | комірка<Секція>;
  }

  структура ОбʼєктВиконання {
    тип: Тип;
    л_значення: комірка<ЛЗначення>;
    unloaded: логічне;
  }

  синонім ВидЗначенняОК = 1;
  синонім ВидЗначенняОВ = 2;

  структура Значення {
    вид: позитивне;
    к: ОбʼєктКомпіляції;
    в: ОбʼєктВиконання;
  }

  структура Блок {
    ret_value: комірка<ЛЗначення>;
    alloca_block: комірка<ЛБлок>;
    block: комірка<ЛБлок>;
    exit_block: комірка<ЛБлок>;
    function_exit_block: комірка<ЛБлок>;
  }

  структура ПомилкаКомпіляції {
    місцезнаходження: комірка<Місцезнаходження>;
    повідомлення: памʼять<п8>;
  }

  місцева дія створити_помилку_компіляції(місцезнаходження: комірка<Місцезнаходження>, повідомлення: памʼять<п8>): комірка<ПомилкаКомпіляції>;

  структура РезультатЗначення {
    значення: Значення;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатЗначенняТип {
    тип: Тип;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатЗначенняЗначення {
    в: ОбʼєктВиконання;
    помилка: комірка<ПомилкаКомпіляції>;
  }

  дія отримати_властивість(значення: Значення, блок: комірка<Блок>, назва_властивості: памʼять<п8>): РезультатЗначення;
  дія змінити_властивість(значення: Значення, блок: комірка<Блок>, назва_властивості: памʼять<п8>, значення_властивості: Значення): РезультатЗначення;
  дія виконати(значення: Значення, блок: комірка<Блок>, кількість_аргументів: позитивне, аргументи: памʼять<Значення>): РезультатЗначення;
  дія виконати_шаблон(значення: Значення, блок: комірка<Блок>, кількість_аргументів: позитивне, аргументи: памʼять<Значення>): РезультатЗначення;
  дія додати(значення: Значення, блок: комірка<Блок>, значення_аргумента: Значення): РезультатЗначення;

  структура Середовище {
    батьківське: комірка<Середовище>;
    субʼєкти: комірка<карта_субʼєктів>;
  }

  місцева дія створити_середовище(батьківське: комірка<Середовище>): комірка<Середовище>;

  структура РезультатОтриманняЗСередовища {
    знайдено: логічне;
    субʼєкт: ОбʼєктКомпіляції;
  }

  місцева дія отримати_з_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): РезультатОтриманняЗСередовища;
  місцева дія отримати_з_локального_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): РезультатОтриманняЗСередовища;
  місцева дія змінити_в_середовищі(середовище: комірка<Середовище>, назва: памʼять<п8>, значення: ОбʼєктКомпіляції);

  структура Компілятор {
    глобальне_середовище: комірка<Середовище>;
    Л: комірка<ЛМодуль>;
    тип_ніщо: Тип;
    тип_невідома_комірка: Тип;
    тип_ц8: Тип;
    тип_ц16: Тип;
    тип_ц32: Тип;
    тип_ц64: Тип;
    тип_п8: Тип;
    тип_п16: Тип;
    тип_п32: Тип;
    тип_п64: Тип;
    тип_д32: Тип;
    тип_д64: Тип;
  }

  місцева дія створити_компілятор(Л: комірка<ЛМодуль>): комірка<Компілятор>;
  місцева дія визначити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, л_тип: комірка<ЛТип>): Тип;

  структура РезультатКомпіляціїТілаСекції {
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура РезультатКомпіляціїБлоку {
    помилка: комірка<ПомилкаКомпіляції>;
  }

  структура ІнформаціяШаблону {
    шаблон: комірка<Шаблон>;
    аргументи: комірка<список<Значення>>;
  }

  місцева дія отримати_ЛТип(К: комірка<Компілятор>, тип: Тип): комірка<ЛТип>;
  місцева дія перевірити_тип(К: комірка<Компілятор>, тип: Тип, очікуваний_тип: Тип): логічне;
  місцева дія зробити_тип_з_дії(К: комірка<Компілятор>, д: комірка<Дія>): Тип;
}