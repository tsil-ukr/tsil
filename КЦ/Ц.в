взяти визначення розбирач;
взяти визначення LLVM;
взяти біб друк;

зовнішня дія strcmp(а: памʼять<п8>, б: памʼять<п8>): ц32;

структура карта_субʼєктів;

зовнішня дія отримати_з_карти_субʼєктів(карта: комірка<карта_субʼєктів>, назва: памʼять<п8>, комірка_типу: комірка<позитивне>, комірка_даних: комірка<невідома_комірка>): позитивне;
зовнішня дія змінити_в_карті_субʼєктів(карта: комірка<карта_субʼєктів>, назва: памʼять<п8>, тип: позитивне, дані: невідома_комірка);
зовнішня дія створити_карту_субʼєктів(): комірка<карта_субʼєктів>;

секція ц {
  структура список<Т> {
    дані: памʼять<Т>;
    довжина: позитивне;
    вмісткість: позитивне;
  }

  дія виділити_список<Т>(): комірка<список<Т>> {
    ціль с = виділити<список<Т>>();
    с.дані = пусто;
    с.довжина = 0;
    с.вмісткість = 0;
    вернути с;
  }

  дія додати_до_списку<Т>(с: комірка<список<Т>>, значення: Т) {
    якщо с.довжина == с.вмісткість {
      якщо с.вмісткість == 0 {
        с.дані = виділити<Т>(1);
      } інакше {
        с.дані = перевиділити<Т>(с.дані, с.вмісткість + 1);
      }
      с.вмісткість = с.вмісткість + 1;
    }
    с.дані[с.довжина] = значення;
    с.довжина = с.довжина + 1;
  }

  дія звільнити_список<Т>(с: комірка<список<Т>>) {
    звільнити(с.дані);
    звільнити(с);
  }
}

секція ц {
  синонім ВидСубʼєктаНативнийТип = 1;
  синонім ВидСубʼєктаДія = 2;
  синонім ВидСубʼєктаЦіль = 3;
  синонім ВидСубʼєктаСтруктура = 4;
  синонім ВидСубʼєктаКонстанта = 5;

  синонім ВидТипуНативний = 1;
  синонім ВидТипуСтруктура = 2;
  синонім ВидТипуДія = 3;
  синонім ВидТипуКомірка = 4;

  структура Компілятор;
  структура ПомилкаКомпіляції;
  структура Середовище;
  структура Субʼєкт;
  структура Тип;
  структура Параметр;
  структура ОбʼєктНативногоТипу;
  структура ОбʼєктТипуДії;
  структура ОбʼєктДії;
  структура ОбʼєктСтруктури;
  структура ОбʼєктЦілі;
  структура ОбʼєктКонстанти;
  структура ОбʼєктТипуКомірка;

  структура Компілятор {
    глобальне_середовище: комірка<Середовище>;
    Л: комірка<ЛМодуль>;
    тип_ніщо: Тип;
    тип_комірка: Тип;
    тип_ц8: Тип;
    тип_ц16: Тип;
    тип_ц32: Тип;
    тип_ц64: Тип;
    тип_п8: Тип;
    тип_п16: Тип;
    тип_п32: Тип;
    тип_п64: Тип;
    тип_д32: Тип;
    тип_д64: Тип;
    константа_пусто: комірка<ОбʼєктКонстанти>;
  }

  структура ПомилкаКомпіляції {
    місцезнаходження: комірка<Місцезнаходження>;
    повідомлення: памʼять<п8>;
  }

  дія створити_помилку_компіляції(місцезнаходження: комірка<Місцезнаходження>, повідомлення: памʼять<п8>): комірка<ПомилкаКомпіляції> {
    ціль помилка_компіляції = виділити<ПомилкаКомпіляції>();
    помилка_компіляції.місцезнаходження = місцезнаходження;
    помилка_компіляції.повідомлення = повідомлення;
    вернути помилка_компіляції;
  }

  структура Середовище {
    батьківське: комірка<Середовище>;
    субʼєкти: комірка<карта_субʼєктів>;
  }

  структура Субʼєкт {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу> | комірка<ОбʼєктДії> | комірка<ОбʼєктСтруктури> | комірка<ОбʼєктЦілі> | комірка<ОбʼєктКонстанти>;
  }

  структура Тип {
    вид: позитивне;
    дані: комірка<ОбʼєктНативногоТипу> | комірка<ОбʼєктСтруктури> | комірка<ОбʼєктТипуДії> | комірка<ОбʼєктТипуКомірка>;
  }

  структура Параметр {
    назва: памʼять<п8>;
    тип: Тип;
  }

  структура ОбʼєктНативногоТипу {
    назва: памʼять<п8>;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктТипуДії {
    параметри: комірка<список<комірка<Параметр>>>;
    тип_результату: Тип;
    л_тип_функції: комірка<ЛТипФункції>;
  }

  структура ОбʼєктТипуКомірка {
    тип_елемента: Тип;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктДії {
    назва: памʼять<п8>;
    параметри: комірка<список<комірка<Параметр>>>;
    тип_результату: Тип;
    обʼєкт_типу_дії: комірка<ОбʼєктТипуДії>;
    л_функція: комірка<ЛФункція>;
  }

  структура ОбʼєктСтруктури {
    назва: памʼять<п8>;
    параметри: комірка<список<комірка<Параметр>>>;
    л_тип: комірка<ЛТип>;
  }

  структура ОбʼєктЦілі {
    назва: памʼять<п8>;
    тип: Тип;
    л_значення: комірка<ЛЗначення>;
  }

  структура ОбʼєктКонстанти {
    тип: Тип;
    л_значення: комірка<ЛЗначення>;
  }

  дія створити_середовище(батьківське: комірка<Середовище>): комірка<Середовище> {
    ціль с = виділити<Середовище>();
    с.батьківське = батьківське;
    с.субʼєкти = створити_карту_субʼєктів();
    вернути с;
  }

  структура РезультатОтриманняЗСередовища {
    знайдено: логічне;
    субʼєкт: Субʼєкт;
  }

  дія отримати_з_середовища(середовище: комірка<Середовище>, назва: памʼять<п8>): РезультатОтриманняЗСередовища {
    змінна останнє_середовище = середовище;
    поки останнє_середовище != пусто {
      ціль вид: позитивне = 0;
      ціль дані: невідома_комірка = пусто;
      ціль знайдено = отримати_з_карти_субʼєктів(останнє_середовище.субʼєкти, назва, комірка(вид), комірка(дані));
      якщо знайдено == так {
        вернути РезультатОтриманняЗСередовища { так, Субʼєкт { вид, дані як комірка<ОбʼєктНативногоТипу> } };
      }
      останнє_середовище = останнє_середовище.батьківське;
    }
    вернути РезультатОтриманняЗСередовища { ні };
  }

  дія змінити_в_середовищі(середовище: комірка<Середовище>, назва: памʼять<п8>, значення: Субʼєкт) {
    змінити_в_карті_субʼєктів(середовище.субʼєкти, назва, значення.вид, (значення.дані як комірка<ОбʼєктНативногоТипу>) як невідома_комірка);
  }

  дія визначити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, л_тип: комірка<ЛТип>): Тип {
    ціль обʼєкт_нативного_типу = виділити<ОбʼєктНативногоТипу>();
    обʼєкт_нативного_типу.назва = назва;
    обʼєкт_нативного_типу.л_тип = л_тип;
    змінити_в_середовищі(К.глобальне_середовище, назва, Субʼєкт { ВидСубʼєктаНативнийТип, обʼєкт_нативного_типу });
    вернути Тип { ВидТипуНативний, обʼєкт_нативного_типу };
  }

  дія створити_компілятор(Л: комірка<ЛМодуль>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.глобальне_середовище = глобальне_середовище;
    К.Л = Л;

    К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", LLVM::void(К.Л));
    К.тип_комірка = визначити_нативний_тип(К, ю8"комірка", LLVM::pointer(К.Л));
    змінити_в_середовищі(К.глобальне_середовище, ю8"невідома_комірка", Субʼєкт { ВидСубʼєктаНативнийТип, К.тип_комірка.дані як комірка<ОбʼєктНативногоТипу> });
    К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", LLVM::і8(К.Л));
    К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", LLVM::і16(К.Л));
    К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", LLVM::і32(К.Л));
    К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", LLVM::і64(К.Л));
    К.тип_п8 = визначити_нативний_тип(К, ю8"п8", LLVM::і8(К.Л));
    К.тип_п16 = визначити_нативний_тип(К, ю8"п16", LLVM::і16(К.Л));
    К.тип_п32 = визначити_нативний_тип(К, ю8"п32", LLVM::і32(К.Л));
    К.тип_п64 = визначити_нативний_тип(К, ю8"п64", LLVM::і64(К.Л));
    К.тип_д32 = визначити_нативний_тип(К, ю8"д32", LLVM::f32(К.Л));
    К.тип_д64 = визначити_нативний_тип(К, ю8"д64", LLVM::f64(К.Л));

    К.константа_пусто = виділити<ОбʼєктКонстанти>();
    К.константа_пусто.тип = К.тип_комірка;
    К.константа_пусто.л_значення = LLVM::null(К.Л);
    змінити_в_середовищі(К.глобальне_середовище, ю8"пусто", Субʼєкт { ВидСубʼєктаКонстанта, К.константа_пусто });

    вернути К;
  }

  дія отримати_ЛТип(К: комірка<Компілятор>, тип: Тип): комірка<ЛТип> {
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ОбʼєктНативногоТипу>;
      вернути дані.л_тип;
    } інакше якщо тип.вид == ВидТипуСтруктура {
      ціль дані = тип.дані як комірка<ОбʼєктСтруктури>;
      вернути дані.л_тип;
    } інакше якщо тип.вид == ВидТипуДія {
      ціль дані = тип.дані як комірка<ОбʼєктТипуДії>;
      вернути дані.л_тип_функції як комірка<ЛТип>;
    } інакше якщо тип.вид == ВидТипуКомірка {
      ціль дані = тип.дані як комірка<ОбʼєктТипуКомірка>;
      вернути дані.л_тип;
    }
    вернути пусто;
  }

  дія перевірити_чи_тип_комірка(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо тип.вид == ВидТипуКомірка {
      вернути так;
    }
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ОбʼєктНативногоТипу>;
      ціль обʼєкт_нативного_типу_комірка = К.тип_комірка.дані як комірка<ОбʼєктНативногоТипу>;
      якщо дані == обʼєкт_нативного_типу_комірка {
        вернути так;
      } інакше {
        вернути ні;
      }
    }
    вернути ні;
  }

  дія перевірити_тип(К: комірка<Компілятор>, тип: Тип, очікуваний_тип: Тип): логічне {
    якщо перевірити_чи_тип_комірка(К, тип) {
      якщо перевірити_чи_тип_комірка(К, очікуваний_тип) {
        вернути так;
      }
    }
    якщо тип.вид == очікуваний_тип.вид {
      ціль дані_типу = тип.дані як комірка<ОбʼєктНативногоТипу>;
      ціль дані_очікуваного_типу = очікуваний_тип.дані як комірка<ОбʼєктНативногоТипу>;
      якщо дані_типу == дані_очікуваного_типу {
        вернути так;
      } інакше {
        вернути ні;
      }
    } інакше {
      вернути ні;
    }
  }
}