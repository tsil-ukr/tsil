взяти визначення Ц;

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_додати(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_відняти(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_помножити(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_помножити(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_поділити(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_поділити(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_поділити_за_модулем(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_поділити_за_модулем(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_більше(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_більше(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_менше(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_менше(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_більше_рівно(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_більше_рівно(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_менше_рівно(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_менше_рівно(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_рівно(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_рівно(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_не_рівно(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_не_рівно(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_зсунути_вліво(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_зсунути_вліво(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_зсунути_вправо(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_зсунути_вправо(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_зсунути_вправо_знаковий(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_зсунути_вправо_знаковий(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_ді(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_ді(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_дабо(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_дабо(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_вабо(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_вабо(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_як(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    якщо аргумент.обʼєкт.вид != ВидОбʼєктаТипу {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
      вернути результат_помилка(помилка_компіляції);
    }
    ціль новий_тип = аргумент.обʼєкт.дані як адреса<ОбʼєктТипу>;
    якщо новий_тип == обʼєкт_незавантаженого_значення.тип {
      вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженогоЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
    }
    якщо обʼєкт_незавантаженого_значення.тип.вид == ВидТипуВаріація {
      змінна ціль знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
      змінна ціль пх: позитивне = 0;
      поки пх < обʼєкт_незавантаженого_значення.тип.типи_варіації.розмір {
        якщо перевірити_тип(обʼєкт_незавантаженого_значення.тип.типи_варіації.дані[пх], новий_тип) {
          знайдений_тип_варіації = обʼєкт_незавантаженого_значення.тип.типи_варіації.дані[пх];
        }
        пх = пх + 1;
      }
      якщо знайдений_тип_варіації == пусто {
        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
        вернути результат_помилка(помилка_компіляції);
      }
      обʼєкт_незавантаженого_значення.тип = знайдений_тип_варіації;
      вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженогоЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
    }
    // потім: ехх... треба як знизу робити без load
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_як(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_отримати_властивість(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: памʼять<п8>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    змінна ціль тип: адреса<ОбʼєктТипу>;
    змінна ціль llvm_value: адреса<LLVM::Value>;
    тип = обʼєкт_незавантаженого_значення.тип;
    llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
    якщо тип.вид == ВидТипуАдреса {
      llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value);
      тип = тип.тип_адреси;
    }
    якщо тип.вид != ВидТипуСтруктура {
      ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_отримати_властивість(місцезнаходження, назва, Обʼєкт { ВидОбʼєктаНезавантаженогоЗначення, дані = обʼєкт_незавантаженого_значення });
      вернути результат_помилка(помилка_компіляції);
    }
    змінна ціль позиція_знайденої_властивості: позитивне = 0;
    змінна ціль властивість_структури: ВластивістьСтруктури;
    змінна ціль властивість_структури_знайдено: логічне = ні;
    змінна ціль пх: позитивне = 0;
    поки пх < тип.властивості_структури.розмір {
      якщо strcmp(тип.властивості_структури.дані[пх].назва, назва) == 0 {
        позиція_знайденої_властивості = пх;
        властивість_структури = тип.властивості_структури.дані[пх];
        властивість_структури_знайдено = так;
      }
      пх = пх + 1;
    }
    якщо властивість_структури_знайдено == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції_властивість_не_знайдено(місцезнаходження, назва, тип);
      вернути результат_помилка(помилка_компіляції);
    }
    ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
    gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
    gep_positions_llvm_values[1] = LLVM::const_int32(К.L, ц32(позиція_знайденої_властивості));
    ціль llvm_value_gep = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
    ціль обʼєкт_значення: ОбʼєктНезавантаженогоЗначення;
    обʼєкт_значення.тип = властивість_структури.тип;
    обʼєкт_значення.llvm_value = llvm_value_gep;
    обʼєкт_значення.змінний = так;
    вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженогоЗначення, дані = обʼєкт_значення }, помилка = пусто };
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_отримати_властивість_секції(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: памʼять<п8>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    якщо strcmp(назва, ю8"адреса") == 0 {
      ціль обʼєкт_типу = виділити_тип_адреси(К, обʼєкт_незавантаженого_значення.тип);
      ціль обʼєкт_значення: ОбʼєктЗначення;
      обʼєкт_значення.тип = обʼєкт_типу;
      обʼєкт_значення.llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
      вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
    }
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_отримати_властивість_секції(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, назва, очікуваний_тип);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_отримати_за_позицією(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_отримати_за_позицією(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, позиція, очікуваний_тип);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_виконати(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_виконати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, кількість_аргументів, аргументи);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_виконати_шаблон(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати_шаблон");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_змінити_властивість(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: памʼять<п8>, аргумент: Аргумент): Результат {
    змінна ціль тип: адреса<ОбʼєктТипу> = пусто;
    змінна ціль llvm_value: адреса<LLVM::Value> = пусто;
    тип = обʼєкт_незавантаженого_значення.тип;
    llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
    якщо тип.вид == ВидТипуАдреса {
      llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value);
      тип = тип.тип_адреси;
    }
    якщо тип.вид != ВидТипуСтруктура {
      ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_змінити_властивість(місцезнаходження, назва, аргумент.обʼєкт);
      вернути результат_помилка(помилка_компіляції);
    }
    змінна ціль позиція_знайденої_властивості: позитивне = 0;
    змінна ціль властивість_структури: ВластивістьСтруктури;
    змінна ціль властивість_структури_знайдено: логічне = ні;
    змінна ціль пх: позитивне = 0;
    поки пх < тип.властивості_структури.розмір {
      якщо strcmp(тип.властивості_структури.дані[пх].назва, назва) == 0 {
        позиція_знайденої_властивості = пх;
        властивість_структури = тип.властивості_структури.дані[пх];
        властивість_структури_знайдено = так;
      }
      пх = пх + 1;
    }
    якщо властивість_структури_знайдено == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції_властивість_не_знайдено(місцезнаходження, назва, тип);
      вернути результат_помилка(помилка_компіляції);
    }
    ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
    gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
    gep_positions_llvm_values[1] = LLVM::const_int32(К.L, ц32(позиція_знайденої_властивості));
    ціль llvm_value_gep = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
    ціль результат_аргумента_як_значення = отримати_як_значення(К, інформація_середовища, аргумент.місцезнаходження, аргумент.обʼєкт, властивість_структури.тип);
    якщо результат_аргумента_як_значення.помилка != пусто {
      вернути результат_помилка(результат_аргумента_як_значення.помилка);
    }
    змінна ціль обʼєкт_значення = результат_аргумента_як_значення.обʼєкт_значення;
    якщо властивість_структури.тип.вид == ВидТипуВаріація {
      змінна ціль знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
      змінна ціль пх: позитивне = 0;
      поки пх < властивість_структури.тип.типи_варіації.розмір {
        якщо перевірити_тип(обʼєкт_значення.тип, властивість_структури.тип.типи_варіації.дані[пх]) == так {
          знайдений_тип_варіації = властивість_структури.тип.типи_варіації.дані[пх];
        }
        пх = пх + 1;
      }
      якщо знайдений_тип_варіації == пусто {
        ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва, властивість_структури.тип, обʼєкт_значення.тип);
        вернути результат_помилка(помилка_компіляції);
      }
    } інакше {
      ціль результат_перевірки_типу_значення = перевірити_тип_значення_і_перетворити_якщо_треба(К, властивість_структури.тип, обʼєкт_значення);
      якщо результат_перевірки_типу_значення.успіх == ні {
        ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва, властивість_структури.тип, обʼєкт_значення.тип);
        вернути результат_помилка(помилка_компіляції);
      }
      обʼєкт_значення = результат_перевірки_типу_значення.обʼєкт_значення;
    }
    LLVM::store(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, llvm_value_gep);
    вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_змінити_в_секції(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: памʼять<п8>, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_змінити_в_секції(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, назва, аргумент);
  }
}

секція ц {
  місцева дія обʼєкт_незавантаженого_значення_змінити_за_позицією(обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, аргумент: Аргумент): Результат {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_незавантаженого_значення.тип.llvm_type, обʼєкт_незавантаженого_значення.llvm_value);
    вернути обʼєкт_змінити_за_позицією(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, позиція, аргумент);
  }
}