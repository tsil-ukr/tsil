взяти визначення Ц;

секція ц {
  місцева дія перевірити_чи_ю8_рівні(а: ю8, б: ю8): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }
    змінна ціль п: позитивне = 0;
    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }
    вернути так;
  }

  дія виділити_копію_ю8(значення: ю8): ю8 {
    ціль копія_даних_значення = виділити<п8>(значення.розмір);
    змінна ціль п: позитивне = 0;
    поки п < значення.розмір {
      копія_даних_значення[п] = значення.дані[п];
      п += 1;
    }
    вернути ю8 { значення.розмір, копія_даних_значення };
  }

  місцева дія назва_з_ю8(К: адреса<Компілятор>, значення: ю8): адреса<Назва> {
    змінна ціль п: позитивне = 0;
    поки п < К.назви.розмір {
      ціль назва = К.назви.дані[п];
      якщо перевірити_чи_ю8_рівні(назва.значення, значення) == так {
        вернути назва;
      }
      п += 1;
    }
    ціль назва = виділити<Назва>();
    назва.значення = виділити_копію_ю8(значення);
    покласти_в_накопичувач<адреса<Назва>>(К.назви::адреса, назва);
    вернути назва;
  }

  місцева дія зробити_базу_назв(К: адреса<Компілятор>): БазаНазв {
    вернути БазаНазв {
      назва = назва_з_ю8(К, ю8"назва"),
      ніщо = назва_з_ю8(К, ю8"ніщо"),
      логічне = назва_з_ю8(К, ю8"логічне"),
      ц8 = назва_з_ю8(К, ю8"ц8"),
      ц16 = назва_з_ю8(К, ю8"ц16"),
      ц32 = назва_з_ю8(К, ю8"ц32"),
      ц64 = назва_з_ю8(К, ю8"ц64"),
      ціле = назва_з_ю8(К, ю8"ціле"),
      п8 = назва_з_ю8(К, ю8"п8"),
      п16 = назва_з_ю8(К, ю8"п16"),
      п32 = назва_з_ю8(К, ю8"п32"),
      п64 = назва_з_ю8(К, ю8"п64"),
      позитивне = назва_з_ю8(К, ю8"позитивне"),
      д32 = назва_з_ю8(К, ю8"д32"),
      д64 = назва_з_ю8(К, ю8"д64"),
      десяткове = назва_з_ю8(К, ю8"десяткове"),
      дійсне = назва_з_ю8(К, ю8"дійсне"),
      адреса = назва_з_ю8(К, ю8"адреса"),
      невідома_адреса = назва_з_ю8(К, ю8"невідома_адреса"),
      памʼять = назва_з_ю8(К, ю8"памʼять"),
      невідома_памʼять = назва_з_ю8(К, ю8"невідома_памʼять"),
      так = назва_з_ю8(К, ю8"так"),
      ні = назва_з_ю8(К, ю8"ні"),
      пусто = назва_з_ю8(К, ю8"пусто"),
      char = назва_з_ю8(К, ю8"char"),
      signed_char = назва_з_ю8(К, ю8"signed_char"),
      unsigned_char = назва_з_ю8(К, ю8"unsigned_char"),
      short = назва_з_ю8(К, ю8"short"),
      signed_short = назва_з_ю8(К, ю8"signed_short"),
      unsigned_short = назва_з_ю8(К, ю8"unsigned_short"),
      int = назва_з_ю8(К, ю8"int"),
      signed_int = назва_з_ю8(К, ю8"signed_int"),
      unsigned_int = назва_з_ю8(К, ю8"unsigned_int"),
      long = назва_з_ю8(К, ю8"long"),
      signed_long = назва_з_ю8(К, ю8"signed_long"),
      unsigned_long = назва_з_ю8(К, ю8"unsigned_long"),
      float = назва_з_ю8(К, ю8"float"),
      double = назва_з_ю8(К, ю8"double"),
      size_t = назва_з_ю8(К, ю8"size_t"),
      вміст = назва_з_ю8(К, ю8"вміст"),
      позиція_елемента = назва_з_ю8(К, ю8"позиція_елемента"),
      розмір = назва_з_ю8(К, ю8"розмір"),
    };
  }
}