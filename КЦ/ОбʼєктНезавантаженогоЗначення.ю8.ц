взяти визначення КЦ;

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_додати(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_відняти(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_помножити(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_поділити(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_поділити_за_модулем(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_більше(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_менше(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_більше_рівно(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_менше_рівно(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_рівно(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_не_рівно(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_зсунути_вліво(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_зсунути_вправо(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_ді(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_дабо(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_вабо(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта {
//    якщо аргумент.обʼєкт.вид != ВидОбʼєктаТип {
//      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
//      вернути результат_помилка(помилка_компіляції);
//    }
//    ціль новий_тип = аргумент.обʼєкт.дані як адреса<ОбʼєктТипу>;
//    якщо новий_тип == обʼєкт_незавантаженого_значення.тип {
//      вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
//    }
//    якщо обʼєкт_незавантаженого_значення.тип.вид == ВидТипуВаріація {
//      змінна знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
//      змінна пх: позитивне = 0;
//      поки пх < обʼєкт_незавантаженого_значення.тип.типи_варіації.розмір {
//        якщо перевірити_тип(новий_тип, обʼєкт_незавантаженого_значення.тип.типи_варіації.дані[пх]) {
//          знайдений_тип_варіації = обʼєкт_незавантаженого_значення.тип.типи_варіації.дані[пх];
//        }
//        пх = пх + 1;
//      }
//      якщо знайдений_тип_варіації == пусто {
//        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
//        вернути результат_помилка(помилка_компіляції);
//      }
//      обʼєкт_незавантаженого_значення.тип = знайдений_тип_варіації;
//      вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
//    }
//    якщо обʼєкт_незавантаженого_значення.тип.вид == ВидТипуПерелік {
//      змінна пе: позитивне = 0;
//      поки пе < обʼєкт_незавантаженого_значення.тип.елементи_переліку.розмір {
//        якщо обʼєкт_незавантаженого_значення.тип.елементи_переліку.дані[пе] == новий_тип {
//          обʼєкт_незавантаженого_значення.тип = новий_тип;
//          вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
//        }
//        пе += 1;
//      }
//      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
//      вернути результат_помилка(помилка_компіляції);
//    }
//    якщо обʼєкт_незавантаженого_значення.тип.вид == ВидТипуЕлементПереліку {
//      якщо обʼєкт_незавантаженого_значення.тип.обʼєкт_типу_переліку_елемента_переліку == новий_тип {
//        обʼєкт_незавантаженого_значення.тип = новий_тип;
//        вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
//      }
//      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
//      вернути результат_помилка(помилка_компіляції);
//    }
//    // потім: ехх... треба як знизу робити без load
//    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
//    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
//    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
//    вернути обʼєкт_як(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, аргумент);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
//    змінна тип: адреса<ОбʼєктТипу>;
//    змінна llvm_value: адреса<LLVM::Value>;
//
//    тип = обʼєкт_незавантаженого_значення.тип;
//    llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
//
//    якщо тип.вид == ВидТипуПерелік {
//      якщо назва == К.БН.позиція_елемента {
//        ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
//        gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
//        gep_positions_llvm_values[1] = LLVM::const_int32(К.L, 0);
//        llvm_value = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
//        ціль обʼєкт_значення: ОбʼєктНезавантаженогоЗначення;
//        обʼєкт_значення.тип = К.тип_п64;
//        обʼєкт_значення.llvm_value = llvm_value;
//        обʼєкт_значення.змінний = позитивне(так);
//        вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_значення }, помилка = пусто };
//      }
//    }
//
//    якщо обʼєкт_незавантаженого_значення.тип.вид == ВидТипуЕлементПереліку {
//      якщо обʼєкт_незавантаженого_значення.тип.обʼєкт_типу_структури_елемента_переліку != пусто {
//        ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
//        gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
//        gep_positions_llvm_values[1] = LLVM::const_int32(К.L, 1);
//        llvm_value = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
//        тип = тип.обʼєкт_типу_структури_елемента_переліку;
//      }
//    }
//
//    якщо тип.вид == ВидТипуАдреса {
//      llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value);
//      тип = тип.тип_адреси;
//    }
//    якщо тип.вид != ВидТипуСтруктура {
//      ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_отримати_властивість(місцезнаходження, назва.значення, Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення });
//      вернути результат_помилка(помилка_компіляції);
//    }
//    змінна позиція_знайденої_властивості: позитивне = 0;
//    змінна властивість_структури: ВластивістьСтруктури;
//    змінна властивість_структури_знайдено: логічне = ні;
//    змінна пх: позитивне = 0;
//    поки пх < тип.властивості_структури.розмір {
//      якщо тип.властивості_структури.дані[пх].назва == назва {
//        позиція_знайденої_властивості = пх;
//        властивість_структури = тип.властивості_структури.дані[пх];
//        властивість_структури_знайдено = так;
//      }
//      пх = пх + 1;
//    }
//    якщо властивість_структури_знайдено == ні {
//      ціль помилка_компіляції = виділити_помилку_компіляції_властивість_не_знайдено(місцезнаходження, назва.значення, тип);
//      вернути результат_помилка(помилка_компіляції);
//    }
//    ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
//    gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
//    gep_positions_llvm_values[1] = LLVM::const_int32(К.L, ц32(позиція_знайденої_властивості));
//    ціль llvm_value_gep = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
//    ціль обʼєкт_значення: ОбʼєктНезавантаженогоЗначення;
//    обʼєкт_значення.тип = властивість_структури.тип;
//    обʼєкт_значення.llvm_value = llvm_value_gep;
//    обʼєкт_значення.змінний = позитивне(так);
//    вернути Результат { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_значення }, помилка = пусто };
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
//    якщо назва == К.БН.адреса {
//      ціль обʼєкт_типу = виділити_тип_адреси(К, обʼєкт_незавантаженого_значення.тип);
//      ціль обʼєкт_значення: ОбʼєктЗначення;
//      обʼєкт_значення.тип = обʼєкт_типу;
//      обʼєкт_значення.llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
//      вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//    }
//    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
//    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
//    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
//    вернути обʼєкт_отримати_властивість_секції(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, назва, очікуваний_тип);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_отримати_за_позицією(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, позиція, очікуваний_тип);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_виконати(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, кількість_аргументів, аргументи);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
//    змінна тип: адреса<ОбʼєктТипу> = пусто;
//    змінна llvm_value: адреса<LLVM::Value> = пусто;
//    тип = обʼєкт_незавантаженого_значення.тип;
//    llvm_value = обʼєкт_незавантаженого_значення.llvm_value;
//    якщо тип.вид == ВидТипуАдреса {
//      llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value);
//      тип = тип.тип_адреси;
//    }
//    якщо тип.вид != ВидТипуСтруктура {
//      ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_змінити_властивість(місцезнаходження, назва.значення, аргумент.обʼєкт);
//      вернути результат_помилка(помилка_компіляції);
//    }
//    змінна позиція_знайденої_властивості: позитивне = 0;
//    змінна властивість_структури: ВластивістьСтруктури;
//    змінна властивість_структури_знайдено: логічне = ні;
//    змінна пх: позитивне = 0;
//    поки пх < тип.властивості_структури.розмір {
//      якщо тип.властивості_структури.дані[пх].назва == назва {
//        позиція_знайденої_властивості = пх;
//        властивість_структури = тип.властивості_структури.дані[пх];
//        властивість_структури_знайдено = так;
//      }
//      пх = пх + 1;
//    }
//    якщо властивість_структури_знайдено == ні {
//      ціль помилка_компіляції = виділити_помилку_компіляції_властивість_не_знайдено(місцезнаходження, назва.значення, тип);
//      вернути результат_помилка(помилка_компіляції);
//    }
//    ціль gep_positions_llvm_values = виділити<адреса<LLVM::Value>>(2);
//    gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
//    gep_positions_llvm_values[1] = LLVM::const_int32(К.L, ц32(позиція_знайденої_властивості));
//    ціль llvm_value_gep = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
//    ціль результат_аргумента_як_значення = отримати_як_значення(К, інформація_середовища, аргумент.місцезнаходження, аргумент.обʼєкт, властивість_структури.тип);
//    якщо результат_аргумента_як_значення.помилка != пусто {
//      вернути результат_помилка(результат_аргумента_як_значення.помилка);
//    }
//    змінна обʼєкт_значення = результат_аргумента_як_значення.обʼєкт_значення;
//    якщо властивість_структури.тип.вид == ВидТипуВаріація {
//      змінна знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
//      змінна пх: позитивне = 0;
//      поки пх < властивість_структури.тип.типи_варіації.розмір {
//        якщо перевірити_тип(обʼєкт_значення.тип, властивість_структури.тип.типи_варіації.дані[пх]) == так {
//          знайдений_тип_варіації = властивість_структури.тип.типи_варіації.дані[пх];
//        }
//        пх = пх + 1;
//      }
//      якщо знайдений_тип_варіації == пусто {
//        ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва.значення, властивість_структури.тип, обʼєкт_значення.тип);
//        вернути результат_помилка(помилка_компіляції);
//      }
//    } інакше {
//      ціль результат_перевірки_типу_значення = перевірити_тип_значення_і_перетворити_якщо_треба(К, інформація_середовища, властивість_структури.тип, обʼєкт_значення);
//      якщо результат_перевірки_типу_значення.успіх == позитивне(ні) {
//        ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва.значення, властивість_структури.тип, обʼєкт_значення.тип);
//        вернути результат_помилка(помилка_компіляції);
//      }
//      обʼєкт_значення = результат_перевірки_типу_значення.обʼєкт_значення;
//    }
//    LLVM::store(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, llvm_value_gep);
//    вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_змінити_в_секції(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, назва, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_змінити_за_позицією(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, позиція, аргумент);
  }
}

секція КЦ {
  зовнішня дія обʼєкт_незавантаженого_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення): РезультатОбʼєкта {
    ціль обʼєкт_значення_для_цілі: ОбʼєктЗначення;
    обʼєкт_значення_для_цілі.тип = обʼєкт_незавантаженого_значення.тип;
    обʼєкт_значення_для_цілі.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення.тип.пм_тип, обʼєкт_незавантаженого_значення.пм_значення);
    вернути обʼєкт_унарний_мінус(компілятор, контекст, місцезнаходження, Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі });
  }
}