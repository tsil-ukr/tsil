взяти визначення Ц;

секція ц {
  місцева дія отримати_ЛТип(К: комірка<Компілятор>, тип: Тип): комірка<ЛТип> {
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ОбʼєктНативногоТипу>;
      вернути дані.л_тип;
    } інакше якщо тип.вид == ВидТипуСтруктура {
      ціль дані = тип.дані як комірка<ОбʼєктСтруктури>;
      вернути дані.л_тип;
    } інакше якщо тип.вид == ВидТипуДія {
      ціль дані = тип.дані як комірка<ОбʼєктТипуДії>;
      вернути дані.л_тип_функції як комірка<ЛТип>;
    } інакше якщо тип.вид == ВидТипуКомірка {
      ціль дані = тип.дані як комірка<ОбʼєктТипуКомірка>;
      вернути дані.л_тип;
    }
    вернути пусто;
  }

  місцева дія перевірити_чи_тип_комірка(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо тип.вид == ВидТипуКомірка {
      вернути так;
    }
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ОбʼєктНативногоТипу>;
      ціль обʼєкт_нативного_типу_комірка = К.тип_комірка.дані як комірка<ОбʼєктНативногоТипу>;
      якщо дані == обʼєкт_нативного_типу_комірка {
        вернути так;
      } інакше {
        вернути ні;
      }
    }
    вернути ні;
  }

  місцева дія перевірити_тип(К: комірка<Компілятор>, тип: Тип, очікуваний_тип: Тип): логічне {
    якщо перевірити_чи_тип_комірка(К, тип) {
      якщо перевірити_чи_тип_комірка(К, очікуваний_тип) {
        вернути так;
      }
    }
    якщо тип.вид == очікуваний_тип.вид {
      ціль дані_типу = (тип.дані як комірка<ОбʼєктНативногоТипу>) як невідома_комірка;
      ціль дані_очікуваного_типу = (очікуваний_тип.дані як комірка<ОбʼєктНативногоТипу>) як невідома_комірка;
      якщо дані_типу == дані_очікуваного_типу {
        вернути так;
      } інакше {
        вернути ні;
      }
    } інакше {
      вернути ні;
    }
  }

  місцева дія перевірити_чи_тип_підтримує_add(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо перевірити_тип(К, тип, К.тип_ц8) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц16) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц64) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п8) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п16) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п64) {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_тип_підтримує_fadd(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо перевірити_тип(К, тип, К.тип_д32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_д64) {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_тип_підтримує_sub(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо перевірити_тип(К, тип, К.тип_ц8) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц16) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_ц64) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п8) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п16) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_п64) {
      вернути так;
    }
    вернути ні;
  }

  місцева дія перевірити_чи_тип_підтримує_fsub(К: комірка<Компілятор>, тип: Тип): логічне {
    якщо перевірити_тип(К, тип, К.тип_д32) {
      вернути так;
    }
    якщо перевірити_тип(К, тип, К.тип_д64) {
      вернути так;
    }
    вернути ні;
  }
}