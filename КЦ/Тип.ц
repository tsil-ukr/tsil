взяти визначення Ц;

секція ц {
  місцева дія виділити_обʼєкт_типу(вид: позитивне): комірка<ОбʼєктТипу> {
    ціль обʼєкт_типу = виділити<ОбʼєктТипу>();
    обʼєкт_типу.вид = вид;
    обʼєкт_типу.назва = пусто;
    обʼєкт_типу.властивості_структури = пусто;
    обʼєкт_типу.параметри_дії = пусто;
    обʼєкт_типу.тип_результату_дії = пусто;
    обʼєкт_типу.тип_адреси = пусто;
    обʼєкт_типу.тип_масиву = пусто;
    обʼєкт_типу.розмір_масиву = 0;
    обʼєкт_типу.llvm_type = пусто;
    вернути обʼєкт_типу;
  }

  місцева дія виділити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, llvm_type: комірка<LLVM::Type>): комірка<ОбʼєктТипу> {
    ціль обʼєкт_типу = виділити_обʼєкт_типу(ВидТипуНативний);
    обʼєкт_типу.назва = назва;
    обʼєкт_типу.llvm_type = llvm_type;
    вернути обʼєкт_типу;
  }

  місцева дія виділити_тип_адреси(К: комірка<Компілятор>, назва: памʼять<п8>, тип_адреси: комірка<ОбʼєктТипу>): комірка<ОбʼєктТипу> {
    ціль обʼєкт_типу = виділити_обʼєкт_типу(ВидТипуАдреса);
    обʼєкт_типу.тип_адреси = тип_адреси;
    обʼєкт_типу.llvm_type = LLVM::pointer(К.L);
    вернути обʼєкт_типу;
  }

  місцева дія перевірити_тип(тип_1: комірка<ОбʼєктТипу>, тип_2: комірка<ОбʼєктТипу>): логічне {
    якщо тип_1 == тип_2 {
      вернути так;
    }
    якщо тип_1.вид == ВидТипуНативний {
      якщо тип_2.вид == ВидТипуНативний {
        якщо тип_1 == тип_2 {
          вернути так;
        }
      }
    }
    якщо тип_1.вид == ВидТипуСтруктура {
      якщо тип_2.вид == ВидТипуСтруктура {
        якщо тип_1 == тип_2 {
          вернути так;
        }
      }
    }
    якщо тип_1.вид == ВидТипуДія {
      якщо тип_2.вид == ВидТипуДія {
        якщо тип_1.параметри_дії.довжина != тип_2.параметри_дії.довжина {
          вернути ні;
        }
        змінна пх: позитивне = 0;
        поки пх < тип_1.параметри_дії.довжина {
          ціль параметр_1 = тип_1.параметри_дії.дані[пх];
          ціль параметр_2 = тип_2.параметри_дії.дані[пх];
          якщо перевірити_тип(параметр_1.тип, параметр_2.тип) == ні {
            вернути ні;
          }
          пх = пх + 1;
        }
        якщо перевірити_тип(тип_1.тип_результату_дії, тип_2.тип_результату_дії) == ні {
          вернути ні;
        }
        вернути так;
      }
    }
    якщо тип_1.вид == ВидТипуАдреса {
      якщо тип_2.вид == ВидТипуАдреса {
        якщо перевірити_тип(тип_1.тип_адреси, тип_2.тип_адреси) == так {
          вернути так;
        }
      }
    }
    якщо тип_1.вид == ВидТипуМасив {
      якщо тип_2.вид == ВидТипуМасив {
        якщо перевірити_тип(тип_1.тип_масиву, тип_2.тип_масиву) == так {
          якщо тип_1.розмір_масиву == тип_2.розмір_масиву {
            вернути так;
          }
        }
      }
    }
    вернути ні;
  }

  дія сплющити_тип(обʼєкт_типу: комірка<ОбʼєктТипу>, вихід: комірка<список<комірка<ОбʼєктТипу>>>) {
    якщо обʼєкт_типу.вид == ВидТипуСтруктура {
      змінна пх: позитивне = 0;
      поки пх < обʼєкт_типу.властивості_структури.довжина {
        сплющити_тип(обʼєкт_типу.властивості_структури.дані[пх].тип, вихід);
        пх = пх + 1;
      }
    } інакше якщо обʼєкт_типу.вид == ВидТипуВаріація {
      сплющити_тип(обʼєкт_типу.найбільший_тип_варіації, вихід);
    } інакше {
      додати_до_списку<комірка<ОбʼєктТипу>>(вихід, обʼєкт_типу);
    }
  }

  місцева дія дізнатись_розмір_типу(К: комірка<Компілятор>, обʼєкт_типу: комірка<ОбʼєктТипу>): позитивне {
    якщо обʼєкт_типу.вид == ВидТипуНативний {
      якщо обʼєкт_типу == К.тип_логічне {
        вернути 1;
      }
      якщо обʼєкт_типу == К.тип_ц8 {
        вернути 1;
      }
      якщо обʼєкт_типу == К.тип_ц16 {
        вернути 2;
      }
      якщо обʼєкт_типу == К.тип_ц32 {
        вернути 4;
      }
      якщо обʼєкт_типу == К.тип_ц64 {
        вернути 8;
      }
      якщо обʼєкт_типу == К.тип_ціле {
        вернути 8;
      }
      якщо обʼєкт_типу == К.тип_п8 {
        вернути 1;
      }
      якщо обʼєкт_типу == К.тип_п16 {
        вернути 2;
      }
      якщо обʼєкт_типу == К.тип_п32 {
        вернути 4;
      }
      якщо обʼєкт_типу == К.тип_п64 {
        вернути 8;
      }
      якщо обʼєкт_типу == К.тип_позитивне {
        вернути 8;
      }
      якщо обʼєкт_типу == К.тип_д32 {
        вернути 4;
      }
      якщо обʼєкт_типу == К.тип_д64 {
        вернути 8;
      }
      якщо обʼєкт_типу == К.тип_дійсне {
        вернути 8;
      }
    }
    якщо обʼєкт_типу.вид == ВидТипуСтруктура {
      // потім: перевірити чи це працює правильно
      ціль сплющений_тип = виділити_список<комірка<ОбʼєктТипу>>();
      сплющити_тип(обʼєкт_типу, сплющений_тип);
      змінна result: позитивне = 0;
      змінна maxalign: позитивне = 0;
      змінна пх: позитивне = 0;
      поки пх < сплющений_тип.довжина {
        ціль align = дізнатись_розмір_типу(К, сплющений_тип.дані[пх]);
        ціль offset = result;
        якщо result == 0 {
          result = result + align;
        } інакше {
          ціль padding = (align - (offset % align)) % align;
          ціль aligned = align + padding;
          result = result + aligned;
        }
        якщо align > maxalign {
          maxalign = align;
        }
        пх = пх + 1;
      }
      поки result % maxalign != 0 {
        result = result + 1;
      }
      звільнити_список<комірка<ОбʼєктТипу>>(сплющений_тип);
      вернути result;
    }
    якщо обʼєкт_типу.вид == ВидТипуДія {
      вернути 8;
    }
    якщо обʼєкт_типу.вид == ВидТипуАдреса {
      вернути 8;
    }
    якщо обʼєкт_типу.вид == ВидТипуВаріація {
      вернути дізнатись_розмір_типу(К, обʼєкт_типу.найбільший_тип_варіації);
    }
    біб::друк_ю8(ю8"Не вдалося дізнатись розмір типу");
    вернути 0;
  }

  місцева дія перевірити_чи_тип_повний(К: комірка<Компілятор>, обʼєкт_типу: комірка<ОбʼєктТипу>): логічне {
    якщо обʼєкт_типу.вид == ВидТипуСтруктура {
      якщо обʼєкт_типу.властивості_структури.довжина == 0 {
        // потім: довжина може бути не 0 якщо перевіряється не перша властивість
        //        треба подумати кращий спосіб перевірки на повність
        вернути ні;
      }
    }
    вернути так;
  }

  місцева дія перевірити_тип_значення_і_перетворити_якщо_треба(К: комірка<Компілятор>, очікуваний_тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення): РезультатПеревіркиТипуЗначення {
    якщо очікуваний_тип.вид == ВидТипуАдреса {
      якщо очікуваний_тип.тип_адреси == К.тип_ніщо {
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          вернути РезультатПеревіркиТипуЗначення { так, обʼєкт_значення };
        }
      }
      якщо обʼєкт_значення.llvm_value == LLVM::null(К.L) {
        вернути РезультатПеревіркиТипуЗначення { так, обʼєкт_значення };
      }
    }
    якщо очікуваний_тип.вид == ВидТипуДія {
      якщо обʼєкт_значення.llvm_value == LLVM::null(К.L) {
        вернути РезультатПеревіркиТипуЗначення { так, обʼєкт_значення };
      }
    }
    якщо перевірити_тип(обʼєкт_значення.тип, очікуваний_тип) == ні {
      вернути РезультатПеревіркиТипуЗначення { ні };
    }
    вернути РезультатПеревіркиТипуЗначення { так, обʼєкт_значення };
  }
}