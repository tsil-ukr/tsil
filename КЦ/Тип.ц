взяти визначення Ц;

секція цк {
  місцева дія визначити_нативний_тип(К: комірка<Компілятор>, назва: памʼять<п8>, llvm_type: комірка<LLVM::Type>): Тип {
    ціль тип = виділити<Тип>();
    ціль дані_типу = виділити<ДаніТипуНативний>();
    дані_типу.llvm_type = llvm_type;
    тип.вид = ВидТипуНативний;
    тип.дані = дані_типу;
    ціль обʼєкт_компіляції = ОбʼєктКомпіляції {};
    обʼєкт_компіляції.вид = ВидОКТип;
    обʼєкт_компіляції.дані = тип;
    змінити_в_середовищі(К.глобальне_середовище, назва, обʼєкт_компіляції);
    вернути вміст(тип);
  }

  місцева дія отримати_llvm_type(К: комірка<Компілятор>, тип: Тип): комірка<LLVM::Type> {
    якщо тип.вид == ВидТипуНативний {
      ціль дані = тип.дані як комірка<ДаніТипуНативний>;
      вернути дані.llvm_type;
    }
    якщо тип.вид == ВидТипуСтруктура {
      ціль дані = тип.дані як комірка<ДаніТипуСтруктура>;
      вернути дані.llvm_type;
    }
    якщо тип.вид == ВидТипуДія {
      ціль дані = тип.дані як комірка<ДаніТипуДія>;
      вернути дані.llvm_function_type як комірка<LLVM::Type>;
    }
    якщо тип.вид == ВидТипуКомірка {
      ціль дані = тип.дані як комірка<ДаніТипуКомірка>;
      вернути дані.llvm_type;
    }
    біб::друк_ю8(ю8"ОЙЙ!!! НЕ ВМІЮ ОТРИМУВАТИ ЛТИП");
    біб::друк_позитивне(тип.вид);
  }

  місцева дія перевірити_тип(К: комірка<Компілятор>, тип: Тип, очікуваний_тип: Тип): логічне {
    якщо тип.вид == очікуваний_тип.вид {
      ціль дані_типу = тип.дані як комірка<ДаніТипуНативний>;
      ціль дані_очікуваного_типу = очікуваний_тип.дані як комірка<ДаніТипуНативний>;
      якщо дані_типу == дані_очікуваного_типу {
        вернути так;
      }
    }
    вернути ні;
  }

  місцева дія зробити_тип_з_дії(К: комірка<Компілятор>, д: комірка<Дія>): Тип {
    ціль тип = Тип {};
    ціль дані_типу = виділити<ДаніТипуДія>();
    дані_типу.llvm_function_type = LLVM::type_of_function(К.Л, д.llvm_function);
    дані_типу.параметри = д.параметри;
    дані_типу.тип_результату = д.тип_результату;
    тип.вид = ВидТипуДія;
    тип.дані = дані_типу;
    вернути тип;
  }
}