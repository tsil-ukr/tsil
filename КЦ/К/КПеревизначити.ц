взяти визначення К;

секція цк {
  місцева дія скомпілювати_перевизначити(К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПеревизначити>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;

    ціль результат_отримання_з_середовища = отримати_з_середовища(середовище, назва);
    якщо результат_отримання_з_середовища.знайдено == ні {
      ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт не визначено");
      вернути помилка_компіляції;
    } інакше {
      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
      якщо субʼєкт.вид == ВидОКЦіль {
        ціль ц = субʼєкт.дані як комірка<Ціль>;
        ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.значення, так);
        якщо результат_компіляції_значення.помилка != пусто {
          вернути результат_компіляції_значення.помилка;
        }
        якщо перевірити_тип(К, результат_компіляції_значення.в.тип, ц.тип) == ні {
          ціль помилка_компіляції = створити_помилку_компіляції(дані.значення.місцезнаходження, ю8"Невідповідні типи");
          вернути помилка_компіляції;
        }
        LLVM::store(К.Л, блок.llvm_block, результат_компіляції_значення.в.llvm_value, ц.llvm_alloca_value);
      } інакше {
        ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт не є ціллю");
        вернути помилка_компіляції;
      }
    }

    вернути пусто;
  }
}

секція ц {
  місцева дія скомпілювати_перевизначити(К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПеревизначити>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    ціль обʼєкт: Обʼєкт;
    ціль успіх_отримання_зі_середовища = отримати_зі_середовища(середовище, назва, комірка(обʼєкт));
    якщо успіх_отримання_зі_середовища == так {
      якщо обʼєкт.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі = обʼєкт.дані як комірка<ОбʼєктЦілі>;
        ціль тип = обʼєкт_цілі.тип;
        ціль результат_компіляції_значення = скомпілювати_значення(К, блок, пусто, середовище, дані.значення, обʼєкт_цілі.тип, так);
        якщо результат_компіляції_значення.помилка != пусто {
          вернути результат_компіляції_значення.помилка;
        }
        якщо результат_компіляції_значення.обʼєкт.вид == ВидОбʼєктаЗначення {
          ціль обʼєкт_значення = результат_компіляції_значення.обʼєкт.дані як ОбʼєктЗначення;
          якщо перевірити_тип(К, обʼєкт_значення.тип, тип) == ні {
            ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Невідповідні типи");
            вернути помилка_компіляції;
          }
          LLVM::store(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_цілі.llvm_value);
          вернути пусто;
        }
      }
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Неможливо перевизначити");
      вернути помилка_компіляції;
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт не визначено");
    вернути помилка_компіляції;
  }
}