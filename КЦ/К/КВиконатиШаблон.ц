взяти визначення К;

секція ц {
  місцева дія скомпілювати_виконати_шаблон(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВиконатиШаблон>): Результат {
//    ціль результат_компіляції_значення = скомпілювати_значення(К, інформація_середовища, дані.обʼєкт, пусто);
//    якщо результат_компіляції_значення.помилка != пусто {
//      вернути Результат { помилка = результат_компіляції_значення.помилка };
//    }
//    ціль кількість_аргументів = дані.аргументи.довжина;
//    ціль аргументи = виділити<Аргумент>(кількість_аргументів);
//    змінна ах: позитивне = 0;
//    поки ах < дані.аргументи.довжина {
//      ціль асд_аргумент = дані.аргументи.елементи[ах];
//      ціль результат_компіляції_значення_аргумента = скомпілювати_значення(К, інформація_середовища, асд_аргумент, пусто);
//      якщо результат_компіляції_значення_аргумента.помилка != пусто {
//        вернути Результат { помилка = результат_компіляції_значення_аргумента.помилка };
//      }
//      аргументи[ах] = Аргумент {
//        результат_компіляції_значення_аргумента.обʼєкт,
//        асд_аргумент.місцезнаходження
//      };
//      ах = ах + 1;
//    }
//    вернути обʼєкт_виконати_шаблон(результат_компіляції_значення.обʼєкт, К, інформація_середовища, місцезнаходження, кількість_аргументів, аргументи);






    ціль результат_компіляції_обʼєкта = скомпілювати_значення(К, інформація_середовища, дані.обʼєкт, пусто);
    якщо результат_компіляції_обʼєкта.помилка != пусто {
      вернути Результат { помилка = результат_компіляції_обʼєкта.помилка };
    }
    ціль обʼєкт = результат_компіляції_обʼєкта.обʼєкт;
    якщо обʼєкт.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = обʼєкт.дані як комірка<ОбʼєктТипу>;
      якщо обʼєкт_типу == К.тип_комірка {
        якщо дані.аргументи.довжина != 1 {
          ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, дані.аргументи.довжина);
          вернути Результат { помилка = помилка_компіляції };
        }
        ціль результат_компіляції_значення_аргумента = скомпілювати_значення_як_тип(К, інформація_середовища, дані.аргументи.елементи[0], ні);
        якщо результат_компіляції_значення_аргумента.помилка != пусто {
          вернути Результат { помилка = результат_компіляції_значення_аргумента.помилка };
        }
        ціль обʼєкт_типу_комірки = виділити<ОбʼєктТипу>();
        обʼєкт_типу_комірки.вид = ВидТипуКомірка;
        обʼєкт_типу_комірки.тип_комірки = результат_компіляції_значення_аргумента.обʼєкт_типу;
        обʼєкт_типу_комірки.llvm_type = LLVM::pointer(К.L);
        вернути Результат { Обʼєкт { ВидОбʼєктаТипу, дані = обʼєкт_типу_комірки }, помилка = пусто };
      } інакше якщо обʼєкт_типу == К.тип_памʼять {
        якщо дані.аргументи.довжина != 1 {
          ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, дані.аргументи.довжина);
          вернути Результат { помилка = помилка_компіляції };
        }
        ціль результат_компіляції_значення_аргумента = скомпілювати_значення_як_тип(К, інформація_середовища, дані.аргументи.елементи[0], ні);
        якщо результат_компіляції_значення_аргумента.помилка != пусто {
          вернути Результат { помилка = результат_компіляції_значення_аргумента.помилка };
        }
        ціль обʼєкт_типу_комірки = виділити<ОбʼєктТипу>();
        обʼєкт_типу_комірки.вид = ВидТипуПамʼять;
        обʼєкт_типу_комірки.тип_памʼяті = результат_компіляції_значення_аргумента.обʼєкт_типу;
        обʼєкт_типу_комірки.llvm_type = LLVM::pointer(К.L);
        вернути Результат { Обʼєкт { ВидОбʼєктаТипу, дані = обʼєкт_типу_комірки }, помилка = пусто };
      }
    } інакше якщо обʼєкт.вид == ВидОбʼєктаШаблону {
      ціль обʼєкт_шаблону = обʼєкт.дані як комірка<ОбʼєктШаблону>;
      якщо дані.аргументи.довжина != обʼєкт_шаблону.параметри.довжина {
        ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, обʼєкт_шаблону.параметри.довжина, дані.аргументи.довжина);
        вернути Результат { помилка = помилка_компіляції };
      }
      ціль інформація_виконання_шаблону = виділити<ІнформаціяВиконанняШаблону>();
      інформація_виконання_шаблону.шаблон = обʼєкт_шаблону;
      інформація_виконання_шаблону.аргументи = виділити_список<комірка<ОбʼєктТипу>>();
      ціль середовище_шаблону = створити_середовище(обʼєкт_шаблону.інформація_середовища_компіляції.середовище);
      змінна ах: позитивне = 0;
      поки ах < дані.аргументи.довжина {
        ціль аргумент = дані.аргументи.елементи[ах];
        ціль результат_компіляції_значення_аргумента = скомпілювати_значення_як_тип(К, інформація_середовища, аргумент, ні);
        якщо результат_компіляції_значення_аргумента.помилка != пусто {
          вернути Результат { помилка = результат_компіляції_значення_аргумента.помилка };
        }
        додати_до_списку<комірка<ОбʼєктТипу>>(інформація_виконання_шаблону.аргументи, результат_компіляції_значення_аргумента.обʼєкт_типу);
        змінити_в_середовищі(середовище_шаблону, обʼєкт_шаблону.параметри.дані[ах], Обʼєкт { ВидОбʼєктаТипу, дані = результат_компіляції_значення_аргумента.обʼєкт_типу });
        ах = ах + 1;
      }
      якщо перевірити_чи_карта_містить_значення<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>(обʼєкт_шаблону.карта_готових_значень, інформація_виконання_шаблону.аргументи) == так {
        ціль обʼєкт = отримати_значення_з_карти<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>(обʼєкт_шаблону.карта_готових_значень, інформація_виконання_шаблону.аргументи, Обʼєкт {});
        вернути Результат { обʼєкт, помилка = пусто };
      }
      вернути скомпілювати_значення(
        К,
        ІнформаціяСередовища {
          середовище = середовище_шаблону,
          обʼєкт_дії = обʼєкт_шаблону.інформація_середовища_компіляції.обʼєкт_дії,
          llvm_block = обʼєкт_шаблону.інформація_середовища_компіляції.llvm_block,
          інформація_виконання_шаблону = інформація_виконання_шаблону
        },
        обʼєкт_шаблону.асд_значення,
        пусто
      );
    }
    ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_виконати_шаблон(місцезнаходження, обʼєкт);
    вернути Результат { помилка = помилка_компіляції };
  }
}