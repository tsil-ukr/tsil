взяти визначення К;

секція цк {
  місцева дія скомпілювати_створити_структуру(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_шаблону: комірка<ІнформаціяШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтворитиСтруктуру>): РезультатЗначення {
    якщо інформація_шаблону != пусто {
      якщо дані.кількість_параметрів == 0 {
        ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Шаблон можна створити лише для структури з визначеними властивостями");
        вернути РезультатЗначення { помилка = помилка_компіляції };
      }
    }

    ціль назва = дані.ідентифікатор.значення;

    змінна дані_типу_структури: комірка<ДаніТипуСтруктура> = пусто;

    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
    якщо результат_отримання_з_середовища.знайдено == так {
      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
      якщо субʼєкт.вид == ВидОКТип {
        ціль тип = субʼєкт.дані як комірка<Тип>;
        якщо тип.вид == ВидТипуСтруктура {
          дані_типу_структури = тип.дані як комірка<ДаніТипуСтруктура>;
          якщо дані_типу_структури.параметри.довжина != 0 {
            ціль помилка_компіляції = створити_помилку_компіляції(пусто, ю8"Субʼєкт вже визначено");
            вернути РезультатЗначення { помилка = помилка_компіляції };
          }
        } інакше {
          ціль помилка_компіляції = створити_помилку_компіляції(пусто, ю8"Субʼєкт вже визначено");
          вернути РезультатЗначення { помилка = помилка_компіляції };
        }
      } інакше {
        ціль помилка_компіляції = створити_помилку_компіляції(пусто, ю8"Субʼєкт вже визначено");
        вернути РезультатЗначення { помилка = помилка_компіляції };
      }
    } інакше {
      дані_типу_структури = виділити<ДаніТипуСтруктура>();
      дані_типу_структури.л_тип = LLVM::struct(К.Л, назва);
      дані_типу_структури.параметри = виділити_список<Параметр>();

      ціль тип = виділити<Тип>();
      тип.вид = ВидТипуСтруктура;
      тип.дані = дані_типу_структури;

      якщо інформація_шаблону == пусто {
        змінити_в_середовищі(середовище, назва, ОбʼєктКомпіляції { ВидОКТип, тип });
      } інакше {
        ціль значення = Значення { ВидЗначенняОК, к = ОбʼєктКомпіляції { ВидОКТип, тип } };

        ціль шаблон = інформація_шаблону.шаблон;
        ціль аргументи = інформація_шаблону.аргументи;
        ціль карта_готових_значень = шаблон.карта_готових_значень;

        змінити_значення_карти<комірка<список<Значення>>, Значення>(карта_готових_значень, аргументи, значення);
      }
    }

    ціль л_типи_параметрів = виділити<комірка<ЛТип>>(дані.кількість_параметрів);

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль параметр = Параметр {};
      параметр.назва = асд_параметр.ідентифікатор.значення;
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, середовище, асд_параметр.тип);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути РезультатЗначення { Значення {}, результат_компіляції_типу.помилка };
      }
      параметр.тип = результат_компіляції_типу.тип;
      додати_до_списку<Параметр>(дані_типу_структури.параметри, параметр);
      л_типи_параметрів[пх] = отримати_ЛТип(К, результат_компіляції_типу.тип);
      пх = пх + 1;
    }

    якщо дані.кількість_параметрів != 0 {
      LLVM::struct_set_fields(К.Л, дані_типу_структури.л_тип, дані.кількість_параметрів, л_типи_параметрів);
    }

    ціль тип = виділити<Тип>();
    тип.вид = ВидТипуСтруктура;
    тип.дані = дані_типу_структури;
    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКТип, тип };

    вернути РезультатЗначення { Значення { ВидЗначенняОК, к = обʼєкт_компіляції }, пусто };
  }
}