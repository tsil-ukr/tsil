взяти визначення К;

секція ц {
  місцева дія заповнити_структуру(К: адреса<Компілятор>, обʼєкт_типу: адреса<ОбʼєктТипу>, інформація_середовища: ІнформаціяСередовища, дані: адреса<АСДДаніСтруктура>): адреса<ПомилкаКомпіляції> {
    ціль llvm_param_types = виділити<адреса<LLVM::Type>>(дані.кількість_параметрів);
    змінна ціль пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль параметр = дані.параметри[пх];
      ціль назва_параметра = параметр.ідентифікатор.значення;
      ціль результат_компіляції_значення_типу_параметра = скомпілювати_значення_як_тип(К, інформація_середовища, параметр.тип, так);
      якщо результат_компіляції_значення_типу_параметра.помилка != пусто {
        вернути результат_компіляції_значення_типу_параметра.помилка;
      }
      ціль обʼєкт_типу_параметра = результат_компіляції_значення_типу_параметра.обʼєкт_типу;
      ціль властивість_структури = ВластивістьСтруктури { назва = назва_параметра, тип = обʼєкт_типу_параметра };
      покласти_в_накопичувач<ВластивістьСтруктури>(обʼєкт_типу.властивості_структури::адреса, властивість_структури);
      llvm_param_types[пх] = обʼєкт_типу_параметра.llvm_type;
      пх = пх + 1;
    }
    LLVM::struct_set_fields(К.L, обʼєкт_типу.llvm_type, дані.кількість_параметрів, llvm_param_types);
    звільнити(llvm_param_types як адреса);
    вернути пусто;
  }

  місцева дія скомпілювати_структуру(К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, дані: адреса<АСДДаніСтруктура>): Результат {
    ціль назва = дані.ідентифікатор.значення;
    ціль середовище_компіляції_структури = створити_середовище(інформація_середовища.середовище);
    змінна ціль обʼєкт_типу: адреса<ОбʼєктТипу>;
    обʼєкт_типу = виділити_обʼєкт_типу(ВидТипуСтруктура);
    обʼєкт_типу.назва = назва;
    обʼєкт_типу.властивості_структури = зробити_накопичувач<ВластивістьСтруктури>();
    ціль повна_назва = отримати_повну_назву(інформація_середовища.середовище, назва);
    обʼєкт_типу.llvm_type = LLVM::struct(К.L, повна_назва);
    якщо інформація_середовища.інформація_виконання_шаблону == пусто {
      змінити_в_середовищі(середовище_компіляції_структури, назва, Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу });
    } інакше {
      ціль обʼєкт_шаблону = інформація_середовища.інформація_виконання_шаблону.шаблон;
      ціль аргументи = інформація_середовища.інформація_виконання_шаблону.аргументи;
      якщо обʼєкт_шаблону.вид == ВидШаблонуЗвичайний {
        змінити_в_реєстрі<Накопичувач<адреса<ОбʼєктТипу>>, Обʼєкт>(
          обʼєкт_шаблону.реєстр_готових_значень_звичайного_шаблону,
          аргументи,
          Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу }
        );
      } інакше якщо обʼєкт_шаблону.вид == ВидШаблонуСтруктури {
        змінити_в_реєстрі<Накопичувач<адреса<ОбʼєктТипу>>, адреса<ОбʼєктТипу>>(
          обʼєкт_шаблону.реєстр_готових_значень_шаблону_структури,
          аргументи,
          обʼєкт_типу
        );
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Щось пішло не так");
        вернути результат_помилка(помилка_компіляції);
      }
    }
    ціль помилка_заповнення = заповнити_структуру(К, обʼєкт_типу, інформація_середовища, дані);
    якщо помилка_заповнення != пусто {
      вернути результат_помилка(помилка_заповнення);
    }
    ціль обʼєкт = Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу };
    вернути Результат { обʼєкт, пусто };
  }

  місцева дія скомпілювати_визначити_структуру(К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, дані: адреса<АСДДаніСтруктура>): адреса<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна ціль обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва, обʼєкт_з_середовища::адреса);
    якщо успіх_отримання_з_середовища == так {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаТип {
        ціль обʼєкт_типу = обʼєкт_з_середовища.дані як адреса<ОбʼєктТипу>;
        якщо обʼєкт_типу.вид == ВидТипуСтруктура {
          якщо обʼєкт_типу.властивості_структури.розмір == 0 {
            ціль помилка_заповнення = заповнити_структуру(К, обʼєкт_типу, інформація_середовища, дані);
            якщо помилка_заповнення != пусто {
              вернути помилка_заповнення;
            }
            вернути пусто;
          }
        }
      }
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль результат_компіляції_структури = скомпілювати_структуру(К, інформація_середовища, місцезнаходження, дані);
      якщо результат_компіляції_структури.помилка != пусто {
        вернути результат_компіляції_структури.помилка;
      }
      змінити_в_середовищі(інформація_середовища.середовище, назва, результат_компіляції_структури.обʼєкт);
    }
    вернути пусто;
  }
}