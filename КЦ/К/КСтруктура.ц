взяти визначення К;

секція цк {
  місцева дія заповнити_дані_типу_структури(К: комірка<Компілятор>, середовище: комірка<Середовище>, дані_типу_структури: комірка<ДаніТипуСтруктура>, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції> {
    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів);

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, середовище, асд_параметр.тип);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      ціль параметр = Параметр {
        назва = асд_параметр.ідентифікатор.значення,
        тип = результат_компіляції_типу.тип
      };
      додати_до_списку<Параметр>(дані_типу_структури.параметри, параметр);
      llvm_param_types[пх] = отримати_llvm_type(К, результат_компіляції_типу.тип);
      пх = пх + 1;
    }

    якщо дані.кількість_параметрів != 0 {
      LLVM::struct_set_fields(К.Л, дані_типу_структури.llvm_type, дані.кількість_параметрів, llvm_param_types);
    }

    вернути пусто;
  }

  місцева дія скомпілювати_структуру(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): РезультатЗначення {
    ціль назва = дані.ідентифікатор.значення;

    ціль середовище_створення_структури = створити_середовище(середовище);

    змінна дані_типу_структури: комірка<ДаніТипуСтруктура> = пусто;

    якщо інформація_виконання_шаблону == пусто {
      дані_типу_структури = виділити<ДаніТипуСтруктура>();
      дані_типу_структури.llvm_type = LLVM::struct(К.Л, назва);
      дані_типу_структури.параметри = виділити_список<Параметр>();
      дані_типу_структури.середовище_створення_структури = середовище_створення_структури;

      ціль тип = виділити<Тип>();
      тип.вид = ВидТипуСтруктура;
      тип.дані = дані_типу_структури;

      змінити_в_середовищі(середовище_створення_структури, назва, ОбʼєктКомпіляції { ВидОКТип, тип });
    } інакше {
      дані_типу_структури = виділити<ДаніТипуСтруктура>();
      дані_типу_структури.llvm_type = LLVM::struct(К.Л, назва);
      дані_типу_структури.параметри = виділити_список<Параметр>();
      дані_типу_структури.середовище_створення_структури = середовище_створення_структури;

      ціль тип = виділити<Тип>();
      тип.вид = ВидТипуСтруктура;
      тип.дані = дані_типу_структури;

      ціль значення = Значення { ВидЗначенняОК, к = ОбʼєктКомпіляції { ВидОКТип, тип } };

      ціль шаблон = інформація_виконання_шаблону.шаблон;
      ціль аргументи = інформація_виконання_шаблону.аргументи;
      ціль карта_готових_значень = шаблон.карта_готових_значень;

      змінити_значення_карти<комірка<список<Значення>>, Значення>(карта_готових_значень, аргументи, значення);
    }

    ціль помилка_заповнення = заповнити_дані_типу_структури(К, середовище_створення_структури, дані_типу_структури, дані);
    якщо помилка_заповнення != пусто {
      вернути РезультатЗначення { помилка = помилка_заповнення };
    }

    ціль тип = виділити<Тип>();
    тип.вид = ВидТипуСтруктура;
    тип.дані = дані_типу_структури;
    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКТип, тип };

    вернути РезультатЗначення { Значення { ВидЗначенняОК, к = обʼєкт_компіляції }, помилка = пусто };
  }

  місцева дія скомпілювати_визначити_структуру(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
    якщо результат_отримання_з_середовища.знайдено == так {
      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
      якщо субʼєкт.вид == ВидОКТип {
        ціль тип = субʼєкт.дані як комірка<Тип>;
        якщо тип.вид == ВидТипуСтруктура {
          ціль дані_типу_структури = тип.дані як комірка<ДаніТипуСтруктура>;
          якщо дані_типу_структури.параметри.довжина == 0 {
            ціль помилка_заповнення = заповнити_дані_типу_структури(К, середовище, дані_типу_структури, дані);
            якщо помилка_заповнення != пусто {
              вернути помилка_заповнення;
            }
            вернути пусто;
          }
        }
      }
      ціль помилка_компіляції = створити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль результат_створення_структури = скомпілювати_структуру(К, пусто, пусто, середовище, місцезнаходження, дані);
      якщо результат_створення_структури.помилка != пусто {
        вернути результат_створення_структури.помилка;
      }
      змінити_в_середовищі(середовище, назва, результат_створення_структури.значення.к);
    }
    вернути пусто;
  }
}

секція ц {
  місцева дія заповнити_структуру(К: комірка<Компілятор>, середовище: комірка<Середовище>, обʼєкт_типу: комірка<ОбʼєктТипу>, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції> {
    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів);
    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль параметр = дані.параметри[пх];
      ціль назва_параметра = параметр.ідентифікатор.значення;
      ціль результат_компіляції_значення_типу_параметра = скомпілювати_значення_як_тип(К, пусто, пусто, середовище, параметр.тип);
      якщо результат_компіляції_значення_типу_параметра.помилка != пусто {
        вернути результат_компіляції_значення_типу_параметра.помилка;
      }
      ціль обʼєкт_типу_параметра = результат_компіляції_значення_типу_параметра.обʼєкт_типу;
      ціль властивість_структури = ВластивістьСтруктури { назва = назва_параметра, тип = обʼєкт_типу_параметра };
      додати_до_списку<ВластивістьСтруктури>(обʼєкт_типу.властивості_структури, властивість_структури);
      llvm_param_types[пх] = обʼєкт_типу_параметра.llvm_type;
      пх = пх + 1;
    }
    LLVM::struct_set_fields(К.L, обʼєкт_типу.llvm_type, дані.кількість_параметрів, llvm_param_types);
    звільнити(llvm_param_types);
    вернути пусто;
  }

  місцева дія скомпілювати_структуру(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): Результат {
    ціль назва = дані.ідентифікатор.значення;
    ціль середовище_компіляції_структури = створити_середовище(середовище);
    змінна обʼєкт_типу: комірка<ОбʼєктТипу>;
    обʼєкт_типу = виділити<ОбʼєктТипу>();
    обʼєкт_типу.вид = ВидТипуСтруктура;
    обʼєкт_типу.назва = назва;
    обʼєкт_типу.властивості_структури = виділити_список<ВластивістьСтруктури>();
    обʼєкт_типу.параметри_дії = пусто;
    обʼєкт_типу.тип_результату_дії = пусто;
    обʼєкт_типу.llvm_type = LLVM::struct(К.L, назва);
    обʼєкт_типу.додати = пусто;
    якщо інформація_виконання_шаблону == пусто {
      змінити_в_середовищі(середовище_компіляції_структури, назва, Обʼєкт { ВидОбʼєктаТипу, дані = обʼєкт_типу });
    } інакше {
      // ...
    }
    ціль помилка_заповнення = заповнити_структуру(К, середовище_компіляції_структури, обʼєкт_типу, дані);
    якщо помилка_заповнення != пусто {
      вернути Результат { помилка = помилка_заповнення };
    }
    ціль обʼєкт = Обʼєкт { ВидОбʼєктаТипу, дані = обʼєкт_типу };
    вернути Результат { обʼєкт, пусто };
  }

  місцева дія скомпілювати_визначити_структуру(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніСтруктура>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва, комірка(обʼєкт_з_середовища));
    якщо успіх_отримання_з_середовища == так {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаТипу {
        ціль обʼєкт_типу = обʼєкт_з_середовища.дані як комірка<ОбʼєктТипу>;
        якщо обʼєкт_типу.вид == ВидТипуСтруктура {
          якщо обʼєкт_типу.властивості_структури.довжина == 0 {
            ціль помилка_заповнення = заповнити_структуру(К, середовище, обʼєкт_типу, дані);
            якщо помилка_заповнення != пусто {
              вернути помилка_заповнення;
            }
            вернути пусто;
          }
        }
      }
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт вже визначено");
      вернути помилка_компіляції;
    } інакше {
      ціль результат_компіляції_структури = скомпілювати_структуру(К, пусто, пусто, середовище, місцезнаходження, дані);
      якщо результат_компіляції_структури.помилка != пусто {
        вернути результат_компіляції_структури.помилка;
      }
      змінити_в_середовищі(середовище, назва, результат_компіляції_структури.обʼєкт);
    }
    вернути пусто;
  }
}