взяти визначення К;

секція цк {
//  дія отримати_LLVM_LINKAGE_з_асд_видимості(видимість: позитивне): позитивне {
//    якщо видимість == АСДВидимістьЗовнішня {
//      вернути LLVM::LINKAGE_EXTERNAL;
//    } інакше якщо видимість == АСДВидимістьМісцева {
//      вернути LLVM::LINKAGE_DSO_LOCAL;
//    } інакше {
//      вернути LLVM::LINKAGE_INTERNAL;
//    }
//  }
//
//  дія скомпілювати_тіло_дії(К: комірка<Компілятор>, дія_: комірка<Дія>, середовище: комірка<Середовище>, тіло: комірка <СписокАСДЗначень>): комірка<ПомилкаКомпіляції> {
//    ціль середовище_тіла_дії = створити_середовище(середовище);
//
//    дія_.середовище_тіла_дії = середовище_тіла_дії;
//
//    ціль блок = виділити<Блок>();
//    блок.llvm_ret_value = пусто;
//    блок.llvm_alloca_block = LLVM::block(К.Л, дія_.llvm_function, ю8"alloca");
//    блок.llvm_block = LLVM::block(К.Л, дія_.llvm_function, ю8"entry");
//    блок.llvm_exit_block = LLVM::block(К.Л, дія_.llvm_function, ю8"exit");
//    блок.llvm_return_exit_block = блок.llvm_exit_block;
//
//    якщо перевірити_тип(дія_.тип_результату, К.тип_ніщо) == ні {
//      блок.llvm_ret_value = LLVM::alloca(К.Л, блок.llvm_alloca_block, ю8"return", отримати_llvm_type(К, дія_.тип_результату));
//    }
//
//    змінна пх: позитивне = 0;
//    поки пх < дія_.параметри.довжина {
//      ціль параметр = дія_.параметри.дані[пх];
//      ціль arg = LLVM::function_arg(К.Л, дія_.llvm_function, пх);
//      ціль llvm_value = LLVM::alloca(К.Л, блок.llvm_alloca_block, параметр.назва, отримати_llvm_type(К, параметр.тип));
//      LLVM::store(К.Л, блок.llvm_alloca_block, arg, llvm_value);
//      ціль ціль_ = виділити<Ціль>();
//      ціль_.тип = параметр.тип;
//      ціль_.llvm_alloca_value = llvm_value;
//      змінити_в_середовищі(середовище_тіла_дії, параметр.назва, ОбʼєктКомпіляції { ВидОКЦіль, ціль_ });
//      пх = пх + 1;
//    }
//
//    ціль результат_компіляції_блоку = скомпілювати_блок(К, блок, середовище_тіла_дії, тіло);
//    якщо результат_компіляції_блоку.помилка != пусто {
//      вернути результат_компіляції_блоку.помилка;
//    }
//
//    LLVM::br(К.Л, блок.llvm_alloca_block, блок.llvm_block);
//    якщо блок.llvm_ret_value == пусто {
//      LLVM::ret(К.Л, блок.llvm_exit_block, пусто);
//    } інакше {
//      ціль llvm_value = LLVM::load(К.Л, блок.llvm_exit_block, отримати_llvm_type(К, дія_.тип_результату), блок.llvm_ret_value);
//      LLVM::ret(К.Л, блок.llvm_exit_block, llvm_value);
//    }
//
//    вернути пусто;
//  }
//
//  дія заповнити_неповну_дію(К: комірка<Компілятор>, середовище: комірка<Середовище>, дія_: комірка<Дія>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
//    // потім: перевірити назву
//
//    якщо дані.кількість_параметрів != дія_.параметри.довжина {
//      ціль помилка_компіляції = створити_помилку_компіляції_невірна_кількість_параметрів(місцезнаходження, дія_.назва, дія_.параметри.довжина, дані.кількість_параметрів);
//      вернути помилка_компіляції;
//    }
//
//    якщо дані.видимість != дія_.видимість {
//      ціль помилка_компіляції = створити_помилку_компіляції_невірна_видимість(місцезнаходження, дія_.назва, дія_.видимість, дані.видимість);
//      вернути помилка_компіляції;
//    }
//
//    змінна пх: позитивне = 0;
//    поки пх < дані.кількість_параметрів {
//      ціль асд_параметр = дані.параметри[пх];
//      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, асд_параметр.тип);
//      якщо результат_компіляції_типу.помилка != пусто {
//        вернути результат_компіляції_типу.помилка;
//      }
//      // потім: перевірити назву і тип
//      пх = пх + 1;
//    }
//
//    якщо дані.тип_результату != пусто {
//      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, дані.тип_результату);
//      якщо результат_компіляції_типу.помилка != пусто {
//        вернути результат_компіляції_типу.помилка;
//      }
//      // потім: перевірити тип результату
//    }
//
//    якщо дані.тіло != пусто {
//      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, дія_, середовище, дані.тіло);
//      якщо помилка_компіляції_тіла != пусто {
//        вернути помилка_компіляції_тіла;
//      }
//    }
//
//    вернути пусто;
//  }
//
//  місцева дія скомпілювати_дію(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): РезультатКомпіляціїДії {
//    ціль середовище_створення_дії = створити_середовище(середовище);
//
//    ціль дія_ = виділити<Дія>();
//    дія_.видимість = дані.видимість;
//    дія_.середовище_створення_дії = середовище_створення_дії;
//    дія_.назва = дані.ідентифікатор.значення;
//    дія_.параметри = виділити_список<Параметр>();
//    дія_.тип_результату = К.тип_ніщо;
//    дія_.середовище_тіла_дії = пусто;
//    дія_.дані_типу_дія = пусто;
//
//    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів);
//
//    змінна пх: позитивне = 0;
//    поки пх < дані.кількість_параметрів {
//      ціль асд_параметр = дані.параметри[пх];
//      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, асд_параметр.тип);
//      якщо результат_компіляції_типу.помилка != пусто {
//        вернути РезультатКомпіляціїДії { помилка = результат_компіляції_типу.помилка };
//      }
//      ціль параметр = Параметр {
//        назва = асд_параметр.ідентифікатор.значення,
//        тип = результат_компіляції_типу.тип
//      };
//      додати_до_списку<Параметр>(дія_.параметри, параметр);
//      llvm_param_types[пх] = отримати_llvm_type(К, параметр.тип);
//      пх = пх + 1;
//    }
//
//    якщо дані.тип_результату != пусто {
//      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, середовище_створення_дії, дані.тип_результату);
//      якщо результат_компіляції_типу.помилка != пусто {
//        вернути РезультатКомпіляціїДії { помилка = результат_компіляції_типу.помилка };
//      }
//      дія_.тип_результату = результат_компіляції_типу.тип;
//    }
//
//    змінна назва_з_префіксом = дія_.назва;
//    ціль префікс = отримати_префікс_назви(середовище_створення_дії);
//    якщо префікс != пусто {
//      назва_з_префіксом = зʼєднати_ю8(зʼєднати_ю8(префікс, ю8"::"), дія_.назва);
//    }
//
//    дія_.llvm_function = LLVM::function(К.Л, отримати_LLVM_LINKAGE_з_асд_видимості(дані.видимість), назва_з_префіксом, отримати_llvm_type(К, дія_.тип_результату), дія_.параметри.довжина, llvm_param_types, ні);
//
//    ціль дані_типу_дія = виділити<ДаніТипуДія>();
//    дані_типу_дія.llvm_function_type = LLVM::type_of_function(К.Л, дія_.llvm_function);
//    дані_типу_дія.параметри = дія_.параметри;
//    дані_типу_дія.тип_результату = дія_.тип_результату;
//
//    дія_.дані_типу_дія = дані_типу_дія;
//
//    якщо інформація_виконання_шаблону == пусто {
//      змінити_в_середовищі(середовище_створення_дії, дія_.назва, ОбʼєктКомпіляції { ВидОКДія, дія_ });
//    } інакше {
//      ціль шаблон = інформація_виконання_шаблону.шаблон;
//      ціль аргументи = інформація_виконання_шаблону.аргументи;
//      ціль карта_готових_значень = шаблон.карта_готових_значень;
//
//      змінити_значення_карти<комірка<список<Значення>>, Значення>(
//        карта_готових_значень,
//        аргументи,
//        Значення { ВидЗначенняОК, к = ОбʼєктКомпіляції { ВидОКДія, дія_ } }
//      );
//    }
//
//    якщо дані.тіло != пусто {
//      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, дія_, середовище_створення_дії, дані.тіло);
//      якщо помилка_компіляції_тіла != пусто {
//        вернути РезультатКомпіляціїДії { помилка = помилка_компіляції_тіла };
//      }
//    } інакше {
//      якщо інформація_виконання_шаблону != пусто {
//        // потім: помилка
//      }
//    }
//
//    вернути РезультатКомпіляціїДії { дія_ = дія_, помилка = пусто };
//  }
//
//  місцева дія скомпілювати_визначити_дію(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
//    ціль назва = дані.ідентифікатор.значення;
//    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
//    якщо результат_отримання_з_середовища.знайдено == так {
//      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
//      якщо субʼєкт.вид == ВидОКДія {
//        ціль дія_ = субʼєкт.дані як комірка<Дія>;
//        якщо дія_.середовище_тіла_дії == пусто {
//          ціль помилка_заповнення = заповнити_неповну_дію(К, середовище, дія_, місцезнаходження, дані);
//          якщо помилка_заповнення != пусто {
//            вернути помилка_заповнення;
//          }
//          вернути пусто;
//        }
//      }
//      ціль помилка_компіляції = створити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
//      вернути помилка_компіляції;
//    } інакше {
//      ціль результат_створення_дії = скомпілювати_дію(К, пусто, пусто, середовище, місцезнаходження, дані);
//      якщо результат_створення_дії.помилка != пусто {
//        вернути результат_створення_дії.помилка;
//      }
//      змінити_в_середовищі(середовище, назва, ОбʼєктКомпіляції { ВидОКДія, дані = результат_створення_дії.дія_ });
//    }
//    вернути пусто;
//  }
}

секція ц {
  місцева дія отримати_LLVM_LINKAGE_з_асд_видимості(видимість: позитивне): позитивне {
    якщо видимість == АСДВидимістьЗовнішня {
      вернути LLVM::LINKAGE_EXTERNAL;
    } інакше якщо видимість == АСДВидимістьМісцева {
      вернути LLVM::LINKAGE_DSO_LOCAL;
    } інакше {
      вернути LLVM::LINKAGE_INTERNAL;
    }
  }

  місцева дія отримати_видимість_дії_з_асд_видимості(видимість: позитивне): позитивне {
    якщо видимість == АСДВидимістьЗовнішня {
      вернути ВидимістьДіїЗовнішня;
    } інакше якщо видимість == АСДВидимістьМісцева {
      вернути ВидимістьДіїМісцева;
    } інакше {
      вернути ВидимістьДіїВнутрішня;
    }
  }

  місцева дія скомпілювати_тіло_дії(К: комірка<Компілятор>, обʼєкт_дії: комірка<ОбʼєктДії>, інформація_середовища: ІнформаціяСередовища, тіло: комірка <СписокАСДЗначень>): комірка<ПомилкаКомпіляції> {
    обʼєкт_дії.llvm_return_value = пусто;
    обʼєкт_дії.llvm_alloca_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"alloca");
    обʼєкт_дії.llvm_entry_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"entry");
    обʼєкт_дії.llvm_return_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"return");
    якщо обʼєкт_дії.тип_результату == К.тип_ніщо {
      LLVM::ret(К.L, обʼєкт_дії.llvm_return_block, пусто);
    } інакше {
      обʼєкт_дії.llvm_return_value = LLVM::alloca(К.L, обʼєкт_дії.llvm_alloca_block, ю8"return", обʼєкт_дії.тип_результату.llvm_type);
      ціль loaded_llvm_return_value = LLVM::load(К.L, обʼєкт_дії.llvm_return_block, обʼєкт_дії.тип_результату.llvm_type, обʼєкт_дії.llvm_return_value);
      LLVM::ret(К.L, обʼєкт_дії.llvm_return_block, loaded_llvm_return_value);
    }
    ціль середовище_тіла_дії = створити_середовище(інформація_середовища.середовище);
    обʼєкт_дії.середовище_тіла_дії = середовище_тіла_дії;
    ціль інформація_середовища_блоку = ІнформаціяСередовища {
      середовище = середовище_тіла_дії,
      обʼєкт_дії = обʼєкт_дії,
      llvm_block = обʼєкт_дії.llvm_entry_block,
      інформація_виконання_шаблону = пусто
    };
    ціль результат_компіляції_блоку = скомпілювати_блок(К, інформація_середовища_блоку, обʼєкт_дії.llvm_return_block, тіло);
    якщо результат_компіляції_блоку.помилка != пусто {
      вернути  результат_компіляції_блоку.помилка;
    }
    LLVM::br(К.L, обʼєкт_дії.llvm_alloca_block, обʼєкт_дії.llvm_entry_block);
    вернути пусто;
  }

  місцева дія перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(а: позитивне, б: позитивне): логічне {
    якщо а == отримати_видимість_дії_з_асд_видимості(б) {
      вернути так;
    }
    вернути ні;
  }

  місцева дія заповнити_неповну_дію(К: комірка<Компілятор>, обʼєкт_дії: комірка<ОбʼєктДії>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    // потім: перевірити назву

    якщо дані.кількість_параметрів != обʼєкт_дії.параметри.довжина {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Невірна кількість параметрів");
      вернути помилка_компіляції;
    }

    якщо перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(обʼєкт_дії.видимість, дані.видимість) == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Невірна видимість");
      вернути помилка_компіляції;
    }

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, асд_параметр.тип);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      // потім: перевірити назву і тип
      пх = пх + 1;
    }

    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип_результату);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      // потім: перевірити тип результату
    }

    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, обʼєкт_дії, інформація_середовища, дані.тіло);
      якщо помилка_компіляції_тіла != пусто {
        вернути помилка_компіляції_тіла;
      }
    }

    вернути пусто;
  }

  місцева дія скомпілювати_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): Результат {
    ціль назва = дані.ідентифікатор.значення;
    ціль середовище_компіляції_дії = створити_середовище(інформація_середовища.середовище);
    ціль обʼєкт_дії = виділити<ОбʼєктДії>();
    обʼєкт_дії.видимість = отримати_видимість_дії_з_асд_видимості(дані.видимість);
    обʼєкт_дії.назва = назва;
    обʼєкт_дії.параметри = виділити_список<ПараметрДії>();
    обʼєкт_дії.тип_результату = К.тип_ніщо;
    обʼєкт_дії.тип = пусто;
    обʼєкт_дії.llvm_function = пусто;
    обʼєкт_дії.llvm_return_value = пусто;
    обʼєкт_дії.llvm_alloca_block = пусто;
    обʼєкт_дії.llvm_entry_block = пусто;
    обʼєкт_дії.llvm_return_block = пусто;
    обʼєкт_дії.середовище_компіляції_дії = середовище_компіляції_дії;
    обʼєкт_дії.середовище_тіла_дії = пусто;
    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів);
    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль параметр = дані.параметри[пх];
      ціль назва_параметра = параметр.ідентифікатор.значення;
      ціль результат_компіляції_значення_типу_параметра = скомпілювати_значення_як_тип(
        К,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = обʼєкт_дії,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        параметр.тип
      );
      якщо результат_компіляції_значення_типу_параметра.помилка != пусто {
        вернути Результат { помилка = результат_компіляції_значення_типу_параметра.помилка };
      }
      ціль обʼєкт_типу_параметра = результат_компіляції_значення_типу_параметра.обʼєкт_типу;
      ціль параметр_дії = ПараметрДії { назва = назва_параметра, тип = обʼєкт_типу_параметра };
      додати_до_списку<ПараметрДії>(обʼєкт_дії.параметри, параметр_дії);
      llvm_param_types[пх] = обʼєкт_типу_параметра.llvm_type;
      пх = пх + 1;
    }
    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_значення_типу_результату = скомпілювати_значення_як_тип(
        К,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = обʼєкт_дії,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        дані.тип_результату
      );
      якщо результат_компіляції_значення_типу_результату.помилка != пусто {
        вернути Результат { помилка = результат_компіляції_значення_типу_результату.помилка };
      }
      обʼєкт_дії.тип_результату = результат_компіляції_значення_типу_результату.обʼєкт_типу;
    }
    ціль повна_назва = отримати_повну_назву(інформація_середовища.середовище, назва);
    обʼєкт_дії.llvm_function = LLVM::function(К.L, отримати_LLVM_LINKAGE_з_асд_видимості(дані.видимість), повна_назва, обʼєкт_дії.тип_результату.llvm_type, обʼєкт_дії.параметри.довжина, llvm_param_types, ні);
    якщо інформація_середовища.інформація_виконання_шаблону == пусто {
      змінити_в_середовищі(середовище_компіляції_дії, назва, Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії });
    } інакше {
      ціль обʼєкт_шаблону = інформація_середовища.інформація_виконання_шаблону.шаблон;
      ціль аргументи = інформація_середовища.інформація_виконання_шаблону.аргументи;
      ціль карта_готових_значень = обʼєкт_шаблону.карта_готових_значень;
      змінити_значення_карти<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>(
        карта_готових_значень,
        аргументи,
        Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії }
      );
    }
    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(
        К,
        обʼєкт_дії,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = обʼєкт_дії,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        дані.тіло
      );
      якщо помилка_компіляції_тіла != пусто {
        вернути Результат { помилка = помилка_компіляції_тіла };
      }
    } інакше {
      якщо інформація_середовища.інформація_виконання_шаблону != пусто {
        // потім: помилка
      }
    }
    ціль обʼєкт = Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії };
    вернути Результат { обʼєкт, помилка = пусто };
  }

  місцева дія скомпілювати_визначити_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва, комірка(обʼєкт_з_середовища));
    якщо успіх_отримання_з_середовища == так {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаДії {
        ціль обʼєкт_дії = обʼєкт_з_середовища.дані як комірка<ОбʼєктДії>;
        якщо обʼєкт_дії.середовище_тіла_дії == пусто {
          ціль помилка_заповнення = заповнити_неповну_дію(К, обʼєкт_дії, інформація_середовища, місцезнаходження, дані);
          якщо помилка_заповнення != пусто {
            вернути помилка_заповнення;
          }
          вернути пусто;
        }
      }
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт вже визначено");
      вернути помилка_компіляції;
    } інакше {
      ціль результат_компіляції_дії = скомпілювати_дію(
        К,
        ІнформаціяСередовища {
          середовище = інформація_середовища.середовище,
          обʼєкт_дії = пусто,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        місцезнаходження,
        дані
      );
      якщо результат_компіляції_дії.помилка != пусто {
        вернути результат_компіляції_дії.помилка;
      }
      змінити_в_середовищі(інформація_середовища.середовище, назва, результат_компіляції_дії.обʼєкт);
    }
    вернути пусто;
  }
}