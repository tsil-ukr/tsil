взяти визначення К;

секція ц {
  місцева дія отримати_LLVM_LINKAGE_з_асд_видимості(видимість: позитивне): позитивне {
    якщо видимість == АСДВидимістьЗовнішня {
      вернути LLVM::LINKAGE_EXTERNAL;
    } інакше якщо видимість == АСДВидимістьМісцева {
      вернути LLVM::LINKAGE_DSO_LOCAL;
    } інакше {
      вернути LLVM::LINKAGE_INTERNAL;
    }
  }

  місцева дія отримати_видимість_дії_з_асд_видимості(видимість: позитивне): позитивне {
    якщо видимість == АСДВидимістьЗовнішня {
      вернути ВидимістьДіїЗовнішня;
    } інакше якщо видимість == АСДВидимістьМісцева {
      вернути ВидимістьДіїМісцева;
    } інакше {
      вернути ВидимістьДіїВнутрішня;
    }
  }

  місцева дія скомпілювати_тіло_дії(К: комірка<Компілятор>, обʼєкт_дії: комірка<ОбʼєктДії>, інформація_середовища: ІнформаціяСередовища, тіло: комірка <СписокАСДЗначень>): комірка<ПомилкаКомпіляції> {
    обʼєкт_дії.має_тіло = так;
    обʼєкт_дії.llvm_return_value = пусто;
    обʼєкт_дії.llvm_alloca_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"alloca");
    обʼєкт_дії.llvm_entry_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"entry");
    обʼєкт_дії.llvm_return_block = LLVM::block(К.L, обʼєкт_дії.llvm_function, ю8"return");
    якщо обʼєкт_дії.тип_результату == К.тип_ніщо {
      LLVM::ret(К.L, обʼєкт_дії.llvm_return_block, пусто);
    } інакше {
      обʼєкт_дії.llvm_return_value = LLVM::alloca(К.L, обʼєкт_дії.llvm_alloca_block, ю8"return", обʼєкт_дії.тип_результату.llvm_type);
      ціль loaded_llvm_return_value = LLVM::load(К.L, обʼєкт_дії.llvm_return_block, обʼєкт_дії.тип_результату.llvm_type, обʼєкт_дії.llvm_return_value);
      LLVM::ret(К.L, обʼєкт_дії.llvm_return_block, loaded_llvm_return_value);
    }
    ціль середовище_тіла_дії = створити_середовище(інформація_середовища.середовище);
    змінна ціль пх: позитивне = 0;
    поки пх < обʼєкт_дії.параметри.довжина {
      ціль параметр = обʼєкт_дії.параметри.дані[пх];
      ціль param_llvm_value = tsil_llvm_get_function_arg_value(К.L, обʼєкт_дії.llvm_function, пх);
      ціль param_alloca_llvm_value = LLVM::alloca(К.L, обʼєкт_дії.llvm_alloca_block, параметр.назва, параметр.тип.llvm_type);
      LLVM::store(К.L, обʼєкт_дії.llvm_entry_block, param_llvm_value, param_alloca_llvm_value);
      ціль обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
      обʼєкт_незавантаженого_значення.тип = параметр.тип;
      обʼєкт_незавантаженого_значення.llvm_value = param_alloca_llvm_value;
      змінити_в_середовищі(середовище_тіла_дії, параметр.назва, Обʼєкт { ВидОбʼєктаНезавантаженогоЗначення, дані = обʼєкт_незавантаженого_значення });
      пх = пх + 1;
    }
    ціль інформація_середовища_блоку = ІнформаціяСередовища {
      середовище = середовище_тіла_дії,
      обʼєкт_дії = обʼєкт_дії,
      llvm_block = обʼєкт_дії.llvm_entry_block,
      інформація_виконання_шаблону = пусто
    };
    ціль результат_компіляції_блоку = скомпілювати_блок(К, інформація_середовища_блоку, обʼєкт_дії.llvm_return_block, тіло);
    якщо результат_компіляції_блоку.помилка != пусто {
      вернути  результат_компіляції_блоку.помилка;
    }
    LLVM::br(К.L, обʼєкт_дії.llvm_alloca_block, обʼєкт_дії.llvm_entry_block);
    змінна ціль пс: позитивне = 0;
    поки пс < обʼєкт_дії.стрибки.довжина {
      ціль стрибок = обʼєкт_дії.стрибки.дані[пс];
      змінна ціль знайдена_мітка: адреса<Мітка> = пусто;
      змінна ціль пм: позитивне = 0;
      поки пм < обʼєкт_дії.мітки.довжина {
        якщо strcmp(обʼєкт_дії.мітки.дані[пм].назва, стрибок.назва) == 0 {
          знайдена_мітка = обʼєкт_дії.мітки.дані[пм]::адреса;
        }
        пм += 1;
      }
      якщо знайдена_мітка == пусто {
        ціль помилка_компіляції = виділити_помилку_компіляції(стрибок.місцезнаходження, ю8"Мітку не знайдено");
        вернути помилка_компіляції;
      }
      LLVM::set_br_successor(К.L, стрибок.llvm_branch_inst, знайдена_мітка.llvm_block);
      пс += 1;
    }
    вернути пусто;
  }

  місцева дія перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(а: позитивне, б: позитивне): логічне {
    якщо а == отримати_видимість_дії_з_асд_видимості(б) {
      вернути так;
    }
    вернути ні;
  }

  місцева дія заповнити_неповну_дію_без_перевірки_підпису_параметрів(К: комірка<Компілятор>, обʼєкт_дії: комірка<ОбʼєктДії>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    змінна ціль пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, асд_параметр.тип, так);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      обʼєкт_дії.параметри.дані[пх].назва = асд_параметр.ідентифікатор.значення;
      обʼєкт_дії.параметри.дані[пх].тип = результат_компіляції_типу.обʼєкт_типу;
      пх = пх + 1;
    }
    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип_результату, так);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      обʼєкт_дії.тип_результату = результат_компіляції_типу.обʼєкт_типу;
    }
    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, обʼєкт_дії, інформація_середовища, дані.тіло);
      якщо помилка_компіляції_тіла != пусто {
        вернути помилка_компіляції_тіла;
      }
    }
    вернути пусто;
  }

  місцева дія скомпілювати_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): Результат {
    ціль назва = дані.ідентифікатор.значення;
    ціль середовище_компіляції_дії = створити_середовище(інформація_середовища.середовище);
    ціль обʼєкт_дії = виділити<ОбʼєктДії>();
    обʼєкт_дії.видимість = отримати_видимість_дії_з_асд_видимості(дані.видимість);
    обʼєкт_дії.назва = назва;
    обʼєкт_дії.параметри = виділити_список<ПараметрДії>();
    обʼєкт_дії.тип_результату = К.тип_ніщо;
    обʼєкт_дії.тип = пусто;
    обʼєкт_дії.llvm_function = пусто;
    обʼєкт_дії.llvm_return_value = пусто;
    обʼєкт_дії.llvm_alloca_block = пусто;
    обʼєкт_дії.llvm_entry_block = пусто;
    обʼєкт_дії.llvm_return_block = пусто;
    обʼєкт_дії.має_тіло = ні;
    обʼєкт_дії.мітки = виділити_список<Мітка>();
    обʼєкт_дії.стрибки = виділити_список<Стрибок>();
    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів як ц32);
    змінна ціль пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль параметр = дані.параметри[пх];
      ціль назва_параметра = параметр.ідентифікатор.значення;
      ціль результат_компіляції_значення_типу_параметра = скомпілювати_значення_як_тип(
        К,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = пусто,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        параметр.тип,
        так
      );
      якщо результат_компіляції_значення_типу_параметра.помилка != пусто {
        вернути результат_помилка(результат_компіляції_значення_типу_параметра.помилка);
      }
      ціль обʼєкт_типу_параметра = результат_компіляції_значення_типу_параметра.обʼєкт_типу;
      ціль параметр_дії = ПараметрДії { назва = назва_параметра, тип = обʼєкт_типу_параметра };
      додати_до_списку<ПараметрДії>(обʼєкт_дії.параметри, параметр_дії);
      llvm_param_types[пх] = обʼєкт_типу_параметра.llvm_type;
      пх = пх + 1;
    }
    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_значення_типу_результату = скомпілювати_значення_як_тип(
        К,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = пусто,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        дані.тип_результату,
        так
      );
      якщо результат_компіляції_значення_типу_результату.помилка != пусто {
        вернути результат_помилка(результат_компіляції_значення_типу_результату.помилка);
      }
      обʼєкт_дії.тип_результату = результат_компіляції_значення_типу_результату.обʼєкт_типу;
    }
    ціль повна_назва = отримати_повну_назву(середовище_компіляції_дії, назва);
    якщо strcmp(повна_назва, ю8"main") == 0 {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Неможливо визначити дію main, використовуйте старт");
      вернути результат_помилка(помилка_компіляції);
    } інакше якщо strcmp(повна_назва, ю8"старт") == 0 {
      повна_назва = ю8"main";
      якщо дані.видимість != АСДВидимістьВнутрішня {
        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Дія старт може бути тільки внутрішньою");
        вернути результат_помилка(помилка_компіляції);
      }
      дані.видимість = АСДВидимістьЗовнішня;
    }
    // потім: перевіряти кількість параметрів, типи параметрів і тип результату якщо назва старт
    обʼєкт_дії.llvm_function = LLVM::function(К.L, отримати_LLVM_LINKAGE_з_асд_видимості(дані.видимість), повна_назва, обʼєкт_дії.тип_результату.llvm_type, обʼєкт_дії.параметри.довжина, llvm_param_types, 0);
    ціль llvm_function_type = LLVM::type_of_function(К.L, обʼєкт_дії.llvm_function);
    обʼєкт_дії.тип = виділити_обʼєкт_типу(ВидТипуДія);
    обʼєкт_дії.тип.параметри_дії = обʼєкт_дії.параметри;
    обʼєкт_дії.тип.тип_результату_дії = обʼєкт_дії.тип_результату;
    обʼєкт_дії.тип.llvm_function_type = llvm_function_type;
    обʼєкт_дії.тип.llvm_type = LLVM::pointer(К.L);
    якщо інформація_середовища.інформація_виконання_шаблону == пусто {
      змінити_в_середовищі(середовище_компіляції_дії, назва, Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії });
    } інакше {
      ціль обʼєкт_шаблону = інформація_середовища.інформація_виконання_шаблону.шаблон;
      ціль аргументи = інформація_середовища.інформація_виконання_шаблону.аргументи;
      якщо обʼєкт_шаблону.вид == ВидШаблонуЗвичайний {
        змінити_значення_карти<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>(
          обʼєкт_шаблону.карта_готових_значень_звичайного_шаблону,
          аргументи,
          Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії }
        );
      } інакше якщо обʼєкт_шаблону.вид == ВидШаблонуДії {
        змінити_значення_карти<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктДії>>(
          обʼєкт_шаблону.карта_готових_значень_шаблону_дії,
          аргументи,
          обʼєкт_дії
        );
      } інакше якщо обʼєкт_шаблону.вид == ВидШаблонуГрупиДій {
        змінна ціль обʼєкт_групи_дій: комірка<ОбʼєктГрупиДій> = пусто;
        якщо перевірити_чи_карта_містить_значення<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктГрупиДій>>(обʼєкт_шаблону.карта_готових_значень_шаблону_групи_дій, аргументи) == так {
          обʼєкт_групи_дій = отримати_значення_з_карти<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктГрупиДій>>(обʼєкт_шаблону.карта_готових_значень_шаблону_групи_дій, аргументи, пусто);
        } інакше {
          обʼєкт_групи_дій = виділити<ОбʼєктГрупиДій>();
          обʼєкт_групи_дій.обʼєкти_дій = виділити_список<комірка<ОбʼєктДії>>();
          змінити_значення_карти<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктГрупиДій>>(обʼєкт_шаблону.карта_готових_значень_шаблону_групи_дій, аргументи, обʼєкт_групи_дій);
        }
        додати_до_списку<комірка<ОбʼєктДії>>(обʼєкт_групи_дій.обʼєкти_дій, обʼєкт_дії);
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Щось пішло не так");
        вернути результат_помилка(помилка_компіляції);
      }
    }
    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(
        К,
        обʼєкт_дії,
        ІнформаціяСередовища {
          середовище = середовище_компіляції_дії,
          обʼєкт_дії = обʼєкт_дії,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        дані.тіло
      );
      якщо помилка_компіляції_тіла != пусто {
        вернути результат_помилка(помилка_компіляції_тіла);
      }
    } інакше {
      якщо інформація_середовища.інформація_виконання_шаблону != пусто {
        // потім: помилка
      }
    }
    ціль обʼєкт = Обʼєкт { ВидОбʼєктаДії, дані = обʼєкт_дії };
    вернути Результат { обʼєкт, помилка = пусто };
  }

  місцева дія перевірити_підпис_дії_асд_параметрів(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, обʼєкт_дії: комірка<ОбʼєктДії>, кількість_асд_параметрів: позитивне, асд_параметри: памʼять<комірка<АСДПараметр>>, перевірити_назву: логічне): РезультатПеревіркиПідписуПараметрівДії {
    якщо обʼєкт_дії.параметри.довжина != кількість_асд_параметрів {
      вернути РезультатПеревіркиПідписуПараметрівДії { ні, помилка = пусто };
    }
    змінна ціль пх: позитивне = 0;
    поки пх < кількість_асд_параметрів {
      ціль асд_параметр = асд_параметри[пх];
      ціль параметр = обʼєкт_дії.параметри.дані[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, асд_параметр.тип, так);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути РезультатПеревіркиПідписуПараметрівДії { помилка = результат_компіляції_типу.помилка, ... };
      }
      якщо перевірити_тип(параметр.тип, результат_компіляції_типу.обʼєкт_типу) == ні {
        вернути РезультатПеревіркиПідписуПараметрівДії { ні, помилка = пусто };
      }
      якщо перевірити_назву == так {
        якщо strcmp(параметр.назва, асд_параметр.ідентифікатор.значення) != 0 {
          вернути РезультатПеревіркиПідписуПараметрівДії { ні, помилка = пусто };
        }
      }
      пх = пх + 1;
    }
    вернути РезультатПеревіркиПідписуПараметрівДії { так, помилка = пусто };
  }

  місцева дія перевірити_назви_дії_асд_параметрів(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, обʼєкт_дії: комірка<ОбʼєктДії>, кількість_асд_параметрів: позитивне, асд_параметри: памʼять<комірка<АСДПараметр>>): логічне {
    якщо обʼєкт_дії.параметри.довжина != кількість_асд_параметрів {
      вернути ні;
    }
    змінна ціль пх: позитивне = 0;
    поки пх < кількість_асд_параметрів {
      ціль асд_параметр = асд_параметри[пх];
      ціль параметр = обʼєкт_дії.параметри.дані[пх];
      якщо strcmp(параметр.назва, асд_параметр.ідентифікатор.значення) != 0 {
        вернути ні;
      }
      пх = пх + 1;
    }
    вернути так;
  }

  місцева дія дозаповнити_дію_без_перевірки_підпису_параметрів(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    якщо перевірити_назви_дії_асд_параметрів(К, інформація_середовища, обʼєкт_дії, дані.кількість_параметрів, дані.параметри) == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції_назви_дії_параметрів_не_співпадають(місцезнаходження);
      вернути помилка_компіляції;
    }
    якщо обʼєкт_дії.має_тіло == ні {
      якщо дані.тип_результату == пусто {
        якщо обʼєкт_дії.тип_результату == К.тип_ніщо {
        } інакше {
          ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
          вернути помилка_компіляції;
        }
      } інакше {
        ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип_результату, так);
        якщо результат_компіляції_типу.помилка != пусто {
          вернути результат_компіляції_типу.помилка;
        }
        якщо перевірити_тип(результат_компіляції_типу.обʼєкт_типу, обʼєкт_дії.тип_результату) == ні {
          ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
          вернути помилка_компіляції;
        }
      }
      якщо перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(обʼєкт_дії.видимість, дані.видимість) == ні {
        ціль помилка_компіляції = виділити_помилку_компіляції_видимість_дії_не_співпадає(місцезнаходження, обʼєкт_дії.видимість, отримати_видимість_дії_з_асд_видимості(дані.видимість));
        вернути помилка_компіляції;
      }
      якщо дані.тіло == пусто {
        ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
        вернути помилка_компіляції;
      }
      ціль помилка_заповнення = заповнити_неповну_дію_без_перевірки_підпису_параметрів(К, обʼєкт_дії, інформація_середовища, місцезнаходження, дані);
      якщо помилка_заповнення != пусто {
        вернути помилка_заповнення;
      }
      вернути пусто;
    } інакше {
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    }
  }

  місцева дія скомпілювати_визначити_дію(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна ціль обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва, обʼєкт_з_середовища::адреса);
    якщо успіх_отримання_з_середовища == так {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаДії {
        ціль обʼєкт_дії = обʼєкт_з_середовища.дані як комірка<ОбʼєктДії>;
        ціль результат_перевірки_підпису_асд_параметрів = перевірити_підпис_дії_асд_параметрів(К, інформація_середовища, обʼєкт_дії, дані.кількість_параметрів, дані.параметри, ні);
        якщо результат_перевірки_підпису_асд_параметрів.помилка != пусто {
          вернути результат_перевірки_підпису_асд_параметрів.помилка;
        }
        якщо результат_перевірки_підпису_асд_параметрів.успіх == так {
          вернути дозаповнити_дію_без_перевірки_підпису_параметрів(обʼєкт_дії, К, інформація_середовища, місцезнаходження, дані);
        } інакше {
          якщо обʼєкт_дії.видимість == ВидимістьДіїЗовнішня {
            ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
            вернути помилка_компіляції;
          }
          якщо дані.видимість == АСДВидимістьЗовнішня {
            ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
            вернути помилка_компіляції;
          }
          якщо перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(обʼєкт_дії.видимість, дані.видимість) == ні {
            ціль помилка_компіляції = виділити_помилку_компіляції_видимість_дії_не_співпадає(місцезнаходження, обʼєкт_дії.видимість, отримати_видимість_дії_з_асд_видимості(дані.видимість));
            вернути помилка_компіляції;
          }
          ціль обʼєкт_групи_дій = виділити<ОбʼєктГрупиДій>();
          обʼєкт_групи_дій.обʼєкти_дій = виділити_список<комірка<ОбʼєктДії>>();
          додати_до_списку<комірка<ОбʼєктДії>>(обʼєкт_групи_дій.обʼєкти_дій, обʼєкт_дії);
          змінити_в_середовищі(інформація_середовища.середовище, назва, Обʼєкт { ВидОбʼєктаГрупиДій, дані = обʼєкт_групи_дій });
          ціль результат_компіляції_дії = скомпілювати_дію(
            К,
            ІнформаціяСередовища {
              середовище = інформація_середовища.середовище,
              обʼєкт_дії = пусто,
              llvm_block = пусто,
              інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
            },
            місцезнаходження,
            дані
          );
          якщо результат_компіляції_дії.помилка != пусто {
            вернути результат_компіляції_дії.помилка;
          }
          // потім: в скомпілювати_дію вертати РезультатЯкДія
          додати_до_списку<комірка<ОбʼєктДії>>(обʼєкт_групи_дій.обʼєкти_дій, результат_компіляції_дії.обʼєкт.дані як комірка<ОбʼєктДії>);
          вернути пусто;
        }
      } інакше якщо обʼєкт_з_середовища.вид == ВидОбʼєктаГрупиДій {
        ціль обʼєкт_групи_дій = обʼєкт_з_середовища.дані як комірка<ОбʼєктГрупиДій>;
        змінна ціль знайдений_обʼєкт_дії: комірка<ОбʼєктДії> = пусто;
        змінна ціль пх: позитивне = 0;
        поки пх < обʼєкт_групи_дій.обʼєкти_дій.довжина {
          ціль результат_перевірки_підпису_асд_параметрів = перевірити_підпис_дії_асд_параметрів(К, інформація_середовища, обʼєкт_групи_дій.обʼєкти_дій.дані[пх], дані.кількість_параметрів, дані.параметри, ні);
          якщо результат_перевірки_підпису_асд_параметрів.помилка != пусто {
            вернути результат_перевірки_підпису_асд_параметрів.помилка;
          }
          якщо результат_перевірки_підпису_асд_параметрів.успіх == так {
            знайдений_обʼєкт_дії = обʼєкт_групи_дій.обʼєкти_дій.дані[пх];
          }
          пх = пх + 1;
        }
        якщо знайдений_обʼєкт_дії == пусто {
          ціль результат_компіляції_дії = скомпілювати_дію(
            К,
            ІнформаціяСередовища {
              середовище = інформація_середовища.середовище,
              обʼєкт_дії = пусто,
              llvm_block = пусто,
              інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
            },
            місцезнаходження,
            дані
          );
          якщо результат_компіляції_дії.помилка != пусто {
            вернути результат_компіляції_дії.помилка;
          }
          // потім: в скомпілювати_дію вертати РезультатЯкДія
          додати_до_списку<комірка<ОбʼєктДії>>(обʼєкт_групи_дій.обʼєкти_дій, результат_компіляції_дії.обʼєкт.дані як комірка<ОбʼєктДії>);
          вернути пусто;
        } інакше {
          якщо перевірити_назви_дії_асд_параметрів(К, інформація_середовища, знайдений_обʼєкт_дії, дані.кількість_параметрів, дані.параметри) == ні {
            ціль помилка_компіляції = виділити_помилку_компіляції_назви_дії_параметрів_не_співпадають(місцезнаходження);
            вернути помилка_компіляції;
          }
          якщо знайдений_обʼєкт_дії.має_тіло == ні {
            якщо дані.тип_результату == пусто {
              якщо знайдений_обʼєкт_дії.тип_результату == К.тип_ніщо {
              } інакше {
                ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
                вернути помилка_компіляції;
              }
            } інакше {
              ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип_результату, так);
              якщо результат_компіляції_типу.помилка != пусто {
                вернути результат_компіляції_типу.помилка;
              }
              якщо перевірити_тип(результат_компіляції_типу.обʼєкт_типу, знайдений_обʼєкт_дії.тип_результату) == ні {
                ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
                вернути помилка_компіляції;
              }
            }
            якщо перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(знайдений_обʼєкт_дії.видимість, дані.видимість) == ні {
              ціль помилка_компіляції = виділити_помилку_компіляції_видимість_дії_не_співпадає(місцезнаходження, знайдений_обʼєкт_дії.видимість, отримати_видимість_дії_з_асд_видимості(дані.видимість));
              вернути помилка_компіляції;
            }
            якщо дані.тіло == пусто {
              ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
              вернути помилка_компіляції;
            }
            ціль помилка_заповнення = заповнити_неповну_дію_без_перевірки_підпису_параметрів(К, знайдений_обʼєкт_дії, інформація_середовища, місцезнаходження, дані);
            якщо помилка_заповнення != пусто {
              вернути помилка_заповнення;
            }
            вернути пусто;
          } інакше {
            ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
            вернути помилка_компіляції;
          }
        }
      }
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль результат_компіляції_дії = скомпілювати_дію(
        К,
        ІнформаціяСередовища {
          середовище = інформація_середовища.середовище,
          обʼєкт_дії = пусто,
          llvm_block = пусто,
          інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
        },
        місцезнаходження,
        дані
      );
      якщо результат_компіляції_дії.помилка != пусто {
        вернути результат_компіляції_дії.помилка;
      }
      змінити_в_середовищі(інформація_середовища.середовище, назва, результат_компіляції_дії.обʼєкт);
    }
    вернути пусто;
  }
}