взяти визначення К;

секція цк {
  дія отримати_LLVM_LINKAGE_з_асд_видимості(видимість: позитивне): позитивне {
    якщо видимість == АСДВидимістьЗовнішня {
      вернути LLVM::LINKAGE_EXTERNAL;
    } інакше якщо видимість == АСДВидимістьМісцева {
      вернути LLVM::LINKAGE_DSO_LOCAL;
    } інакше {
      вернути LLVM::LINKAGE_INTERNAL;
    }
  }

  дія скомпілювати_тіло_дії(К: комірка<Компілятор>, дія_: комірка<Дія>, середовище: комірка<Середовище>, тіло: комірка <СписокАСДЗначень>): комірка<ПомилкаКомпіляції> {
    ціль середовище_тіла_дії = створити_середовище(середовище);

    дія_.середовище_тіла_дії = середовище_тіла_дії;

    ціль блок = виділити<Блок>();
    блок.llvm_ret_value = пусто;
    блок.llvm_alloca_block = LLVM::block(К.Л, дія_.llvm_function, ю8"alloca");
    блок.llvm_block = LLVM::block(К.Л, дія_.llvm_function, ю8"entry");
    блок.llvm_exit_block = LLVM::block(К.Л, дія_.llvm_function, ю8"exit");
    блок.llvm_function_exit_block = блок.llvm_exit_block;

    якщо перевірити_тип(К, дія_.тип_результату, К.тип_ніщо) == ні {
      блок.llvm_ret_value = LLVM::alloca(К.Л, блок.llvm_alloca_block, ю8"return", отримати_llvm_type(К, дія_.тип_результату));
    }

    змінна пх: позитивне = 0;
    поки пх < дія_.параметри.довжина {
      ціль параметр = дія_.параметри.дані[пх];
      ціль arg = LLVM::function_arg(К.Л, дія_.llvm_function, пх);
      ціль л_значення = LLVM::alloca(К.Л, блок.llvm_alloca_block, параметр.назва, отримати_llvm_type(К, параметр.тип));
      LLVM::store(К.Л, блок.llvm_alloca_block, arg, л_значення);
      ціль ціль_ = виділити<Ціль>();
      ціль_.тип = параметр.тип;
      ціль_.llvm_alloca_value = л_значення;
      змінити_в_середовищі(середовище_тіла_дії, параметр.назва, ОбʼєктКомпіляції { ВидОКЦіль, ціль_ });
      пх = пх + 1;
    }

    ціль результат_компіляції_блоку = скомпілювати_блок(К, блок, середовище_тіла_дії, тіло);
    якщо результат_компіляції_блоку.помилка != пусто {
      вернути результат_компіляції_блоку.помилка;
    }

    LLVM::br(К.Л, блок.llvm_alloca_block, блок.llvm_block);
    якщо блок.llvm_ret_value == пусто {
      LLVM::ret(К.Л, блок.llvm_exit_block, пусто);
    } інакше {
      ціль л_значення = LLVM::load(К.Л, блок.llvm_exit_block, отримати_llvm_type(К, дія_.тип_результату), блок.llvm_ret_value);
      LLVM::ret(К.Л, блок.llvm_exit_block, л_значення);
    }

    вернути пусто;
  }

  дія заповнити_неповну_дію(К: комірка<Компілятор>, середовище: комірка<Середовище>, дія_: комірка<Дія>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    // потім: перевірити назву

    якщо дані.кількість_параметрів != дія_.параметри.довжина {
      ціль помилка_компіляції = створити_помилку_компіляції_невірна_кількість_параметрів(місцезнаходження, дія_.назва, дія_.параметри.довжина, дані.кількість_параметрів);
      вернути помилка_компіляції;
    }

    якщо дані.видимість != дія_.видимість {
      ціль помилка_компіляції = створити_помилку_компіляції_невірна_видимість(місцезнаходження, дія_.назва, дія_.видимість, дані.видимість);
      вернути помилка_компіляції;
    }

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, асд_параметр.тип);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      // потім: перевірити назву і тип
      пх = пх + 1;
    }

    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, дані.тип_результату);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути результат_компіляції_типу.помилка;
      }
      // потім: перевірити тип результату
    }

    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, дія_, середовище, дані.тіло);
      якщо помилка_компіляції_тіла != пусто {
        вернути помилка_компіляції_тіла;
      }
    }

    вернути пусто;
  }

  місцева дія скомпілювати_дію(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): РезультатКомпіляціїДії {
    ціль середовище_створення_дії = створити_середовище(середовище);

    ціль дія_ = виділити<Дія>();
    дія_.видимість = дані.видимість;
    дія_.середовище_створення_дії = середовище_створення_дії;
    дія_.назва = дані.ідентифікатор.значення;
    дія_.параметри = виділити_список<Параметр>();
    дія_.тип_результату = К.тип_ніщо;
    дія_.середовище_тіла_дії = пусто;
    дія_.дані_типу_дія = пусто;

    ціль llvm_param_types = виділити<комірка<LLVM::Type>>(дані.кількість_параметрів);

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_параметр = дані.параметри[пх];
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, дія_.середовище_створення_дії, асд_параметр.тип);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути РезультатКомпіляціїДії { помилка = результат_компіляції_типу.помилка };
      }
      ціль параметр = Параметр {
        назва = асд_параметр.ідентифікатор.значення,
        тип = результат_компіляції_типу.тип
      };
      додати_до_списку<Параметр>(дія_.параметри, параметр);
      llvm_param_types[пх] = отримати_llvm_type(К, параметр.тип);
      пх = пх + 1;
    }

    якщо дані.тип_результату != пусто {
      ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, пусто, середовище_створення_дії, дані.тип_результату);
      якщо результат_компіляції_типу.помилка != пусто {
        вернути РезультатКомпіляціїДії { помилка = результат_компіляції_типу.помилка };
      }
      дія_.тип_результату = результат_компіляції_типу.тип;
    }

    змінна назва_з_префіксом = дія_.назва;
    ціль префікс = отримати_префікс_назви(середовище_створення_дії);
    якщо префікс != пусто {
      назва_з_префіксом = зʼєднати_ю8(зʼєднати_ю8(префікс, ю8"::"), дія_.назва);
    }

    дія_.llvm_function = LLVM::function(К.Л, отримати_LLVM_LINKAGE_з_асд_видимості(дані.видимість), назва_з_префіксом, отримати_llvm_type(К, дія_.тип_результату), дія_.параметри.довжина, llvm_param_types, ні);

    ціль дані_типу_дія = виділити<ДаніТипуДія>();
    дані_типу_дія.llvm_function_type = LLVM::type_of_function(К.Л, дія_.llvm_function);
    дані_типу_дія.параметри = дія_.параметри;
    дані_типу_дія.тип_результату = дія_.тип_результату;

    дія_.дані_типу_дія = дані_типу_дія;

    якщо інформація_виконання_шаблону == пусто {
      змінити_в_середовищі(середовище_створення_дії, дія_.назва, ОбʼєктКомпіляції { ВидОКДія, дія_ });
    } інакше {
      ціль шаблон = інформація_виконання_шаблону.шаблон;
      ціль аргументи = інформація_виконання_шаблону.аргументи;
      ціль карта_готових_значень = шаблон.карта_готових_значень;

      змінити_значення_карти<комірка<список<Значення>>, Значення>(
        карта_готових_значень,
        аргументи,
        Значення { ВидЗначенняОК, к = ОбʼєктКомпіляції { ВидОКДія, дія_ } }
      );
    }

    якщо дані.тіло != пусто {
      ціль помилка_компіляції_тіла = скомпілювати_тіло_дії(К, дія_, середовище_створення_дії, дані.тіло);
      якщо помилка_компіляції_тіла != пусто {
        вернути РезультатКомпіляціїДії { помилка = помилка_компіляції_тіла };
      }
    } інакше {
      якщо інформація_виконання_шаблону != пусто {
        // потім: помилка
      }
    }

    вернути РезультатКомпіляціїДії { дія_ = дія_, помилка = пусто };
  }

  місцева дія скомпілювати_визначити_дію(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніДія>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
    якщо результат_отримання_з_середовища.знайдено == так {
      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
      якщо субʼєкт.вид == ВидОКДія {
        ціль дія_ = субʼєкт.дані як комірка<Дія>;
        якщо дія_.середовище_тіла_дії == пусто {
          ціль помилка_заповнення = заповнити_неповну_дію(К, середовище, дія_, місцезнаходження, дані);
          якщо помилка_заповнення != пусто {
            вернути помилка_заповнення;
          }
          вернути пусто;
        }
      }
      ціль помилка_компіляції = створити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль результат_створення_дії = скомпілювати_дію(К, пусто, пусто, середовище, місцезнаходження, дані);
      якщо результат_створення_дії.помилка != пусто {
        вернути результат_створення_дії.помилка;
      }
      змінити_в_середовищі(середовище, назва, ОбʼєктКомпіляції { ВидОКДія, дані = результат_створення_дії.дія_ });
    }
    вернути пусто;
  }
}