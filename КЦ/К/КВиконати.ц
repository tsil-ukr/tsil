взяти визначення К;

секція ц {
  місцева дія скомпілювати_виконати(К: комірка<Компілятор>, л_блок: комірка<ЛБлок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВиконати>): РезультатКомпіляціїВиконати {
    ціль результат_компіляції_обʼєкта_як_значення = скомпілювати_асд_значення_як_значення(К, л_блок, середовище, дані.обʼєкт, так);
    якщо результат_компіляції_обʼєкта_як_значення.помилка != пусто {
      вернути РезультатКомпіляціїВиконати { Тип {}, пусто, результат_компіляції_обʼєкта_як_значення.помилка };
    }

    якщо результат_компіляції_обʼєкта_як_значення.тип.вид != ВидТипуДія {
      вернути РезультатКомпіляціїВиконати { Тип {}, пусто, створити_помилку_компіляції(пусто, ю8"Обʼєкт не є дією") };
    }

    ціль обʼєкт_типу_дії = результат_компіляції_обʼєкта_як_значення.тип.дані як комірка<ОбʼєктТипуДії>;

    ціль значення_аргументів = виділити_список<комірка<ЛЗначення>>();
    // відкласти звільнити_список<комірка<ЛЗначення>>(значення_аргументів);

    якщо обʼєкт_типу_дії.параметри.довжина != дані.аргументи.довжина {
      вернути РезультатКомпіляціїВиконати { Тип {}, пусто, створити_помилку_компіляції(пусто, ю8"Невідповідна кількість аргументів") };
    }

    змінна ах: позитивне = 0;
    поки ах < дані.аргументи.довжина {
      ціль аргумент = дані.аргументи.елементи[ах];
      ціль результат_компіляції_значення_як_значення = скомпілювати_асд_значення_як_значення(К, л_блок, середовище, аргумент, так);
      якщо результат_компіляції_значення_як_значення.помилка != пусто {
        вернути РезультатКомпіляціїВиконати { Тип{}, пусто, результат_компіляції_значення_як_значення.помилка };
      }
      ціль параметр = обʼєкт_типу_дії.параметри.дані[ах];
      якщо перевірити_тип(К, результат_компіляції_значення_як_значення.тип, параметр.тип) == ні {
        вернути РезультатКомпіляціїВиконати { Тип {}, пусто, створити_помилку_компіляції(пусто, ю8"Невідповідні типи") };
      }
      додати_до_списку<комірка<ЛЗначення>>(значення_аргументів, результат_компіляції_значення_як_значення.л_значення);
      ах = ах + 1;
    }

    ціль л_значення = LLVM::call(К.Л, л_блок, отримати_ЛТип(К, результат_компіляції_обʼєкта_як_значення.тип), результат_компіляції_обʼєкта_як_значення.л_значення, значення_аргументів.довжина, значення_аргументів.дані);

    вернути РезультатКомпіляціїВиконати { обʼєкт_типу_дії.тип_результату, л_значення, пусто };
  }
}