взяти визначення К;

секція цк {
  місцева дія скомпілювати_значення_виконати(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВиконати>): РезультатЗначення {
    ціль результат_компіляції_обʼєкта_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.обʼєкт, так);
    якщо результат_компіляції_обʼєкта_значення.помилка != пусто {
      вернути РезультатЗначення { Значення {}, результат_компіляції_обʼєкта_значення.помилка };
    }

    ціль тип = результат_компіляції_обʼєкта_значення.в.тип;
    ціль л_значення = результат_компіляції_обʼєкта_значення.в.л_значення;

    якщо тип.вид != ВидТипуДія {
      ціль помилка_компіляції = створити_помилку_компіляції(дані.обʼєкт.місцезнаходження, ю8"Тип не є дією");
      вернути РезультатЗначення { Значення {}, помилка_компіляції };
    }

    ціль дані_типу_дії = тип.дані як комірка<ДаніТипуДія>;

    якщо дані_типу_дії.параметри.довжина != дані.аргументи.довжина {
      ціль помилка_компіляції = створити_помилку_компіляції(дані.обʼєкт.місцезнаходження, ю8"Невірна кількість аргументів");
      вернути РезультатЗначення { Значення {}, помилка_компіляції };
    }

    ціль л_значення_аргументів = виділити<комірка<LLVM::Value>>(дані.аргументи.довжина);

    змінна ах: позитивне = 0;
    поки ах < дані.аргументи.довжина {
      ціль аргумент = дані.аргументи.елементи[ах];
      ціль результат_компіляції_значення_аргумента = скомпілювати_значення_як_значення(К, блок, середовище, аргумент, так);
      якщо результат_компіляції_значення_аргумента.помилка != пусто {
        вернути РезультатЗначення { Значення {}, результат_компіляції_значення_аргумента.помилка };
      }
      ціль тип_аргумента = результат_компіляції_значення_аргумента.в.тип;
      ціль л_значення_аргумента = результат_компіляції_значення_аргумента.в.л_значення;
      ціль параметр = дані_типу_дії.параметри.дані[ах];
      якщо перевірити_тип(К, тип_аргумента, параметр.тип) == ні {
        ціль помилка_компіляції = створити_помилку_компіляції(дані.обʼєкт.місцезнаходження, ю8"Невірний тип аргумента");
        вернути РезультатЗначення { Значення {}, помилка_компіляції };
      }
      л_значення_аргументів[ах] = л_значення_аргумента;
      ах = ах + 1;
    }

    ціль л_значення_call = LLVM::call(К.Л, блок.block, отримати_ЛТип(К, тип), л_значення, дані.аргументи.довжина, л_значення_аргументів);

    ціль обʼєкт_виконання = ОбʼєктВиконання { дані_типу_дії.тип_результату, л_значення_call, unloaded = ні };

    вернути РезультатЗначення { Значення { ВидЗначенняОВ, в = обʼєкт_виконання }, пусто };
  }
}