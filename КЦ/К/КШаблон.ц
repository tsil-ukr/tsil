взяти визначення К;

секція цк {
//  дія порівняти_ов(ов1: ОбʼєктВиконання, ов2: ОбʼєктВиконання): логічне {
//    біб::друк_ю8(ю8"СТОП порівняти_ов");
//    вернути ні;
//  }
//
//  дія порівняти_тип(тип1: комірка<Тип>, тип2: комірка<Тип>): логічне {
//    якщо тип1.вид != тип2.вид {
//      вернути ні;
//    }
//    якщо тип1.вид == ВидТипуНативний {
//      ціль дані_типу1 = тип1.дані як комірка<ДаніТипуНативний>;
//      ціль дані_типу2 = тип2.дані як комірка<ДаніТипуНативний>;
//      якщо дані_типу1 == дані_типу2 {
//        вернути так;
//      } інакше {
//        вернути ні;
//      }
//    }
//    якщо тип1.вид == ВидТипуСтруктура {
//      ціль дані_типу1 = тип1.дані як комірка<ДаніТипуНативний>;
//      ціль дані_типу2 = тип2.дані як комірка<ДаніТипуНативний>;
//      якщо дані_типу1 == дані_типу2 {
//        вернути так;
//      } інакше {
//        вернути ні;
//      }
//    }
//    біб::друк_ю8(ю8"СТОП порівняти_тип");
//    біб::друк_позитивне(тип1.вид);
//    вернути ні;
//  }
//
//  дія порівняти_ок(ок1: ОбʼєктКомпіляції, ок2: ОбʼєктКомпіляції): логічне {
//    якщо ок1.вид != ок2.вид {
//      вернути ні;
//    }
//    якщо ок1.вид == ВидОКТип {
//      ціль тип_ок1 = ок1.дані як комірка<Тип>;
//      ціль тип_ок2 = ок2.дані як комірка<Тип>;
//      вернути порівняти_тип(тип_ок1, тип_ок2);
//    }
//    біб::друк_ю8(ю8"СТОП порівняти_ок");
//    вернути ні;
//  }
//
//  дія порівняти_значення(з1: Значення, з2: Значення): логічне {
//    якщо з1.вид != з2.вид {
//      вернути ні;
//    }
//    якщо з1.вид == ВидЗначенняОВ {
//      вернути порівняти_ов(з1.в, з2.в);
//    }
//    якщо з1.вид == ВидЗначенняОК {
//      вернути порівняти_ок(з1.к, з2.к);
//    }
//    біб::друк_ю8(ю8"СТОП порівняти_значення");
//    вернути ні;
//  }
//
//  дія порівняти_списки_значень(с1: комірка<список<Значення>>, с2: комірка<список<Значення>>): логічне {
//    якщо с1.довжина != с2.довжина {
//      вернути ні;
//    }
//    змінна х: позитивне = 0;
//    поки х < с1.довжина {
//      якщо порівняти_значення(с1.дані[х], с2.дані[х]) == ні {
//        вернути ні;
//      }
//      х = х + 1;
//    }
//    вернути так;
//  }
//
//  місцева дія скомпілювати_шаблон(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): РезультатЗначення {
//    ціль назва = дані.ідентифікатор.значення;
//
//    ціль середовище_створення_шаблону = створити_середовище(середовище);
//
//    ціль шаблон = виділити<Шаблон>();
//    шаблон.зовнішнє_середовище = середовище_створення_шаблону;
//    шаблон.параметри = виділити_список<памʼять<п8>>();
//    шаблон.асд_значення = дані.значення;
//    шаблон.карта_готових_значень = виділити_карту<комірка<список<Значення>>, Значення>(порівняти_списки_значень);
//
//    змінна пх: позитивне = 0;
//    поки пх < дані.кількість_параметрів {
//      ціль асд_ідентифікатор = дані.параметри[пх];
//      додати_до_списку<памʼять<п8>>(шаблон.параметри, асд_ідентифікатор.значення);
//      пх = пх + 1;
//    }
//
//    змінити_в_середовищі(середовище_створення_шаблону, назва, ОбʼєктКомпіляції { ВидОКШаблон, шаблон });
//
//    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКШаблон, шаблон };
//    ціль значення = Значення { ВидЗначенняОК, к = обʼєкт_компіляції };
//
//    вернути РезультатЗначення { значення, пусто };
//  }
//
//  місцева дія скомпілювати_визначити_шаблон(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): комірка<ПомилкаКомпіляції> {
//    ціль назва = дані.ідентифікатор.значення;
//    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
//    якщо результат_отримання_з_середовища.знайдено == так {
//      ціль субʼєкт = результат_отримання_з_середовища.субʼєкт;
//      якщо субʼєкт.вид == ВидОКШаблон {
//        ціль шаблон = субʼєкт.дані як комірка<Шаблон>;
//        якщо дані.значення.вид == АСДВидСтруктура {
//          ціль дані_значення = дані.значення.дані як комірка<АСДДаніСтруктура>;
//          якщо дані_значення.кількість_параметрів != 0 {
//            якщо шаблон.асд_значення.вид == АСДВидСтруктура {
//              ціль дані_значення_шаблону = шаблон.асд_значення.дані як комірка<АСДДаніСтруктура>;
//              якщо дані_значення_шаблону.кількість_параметрів == 0 {
//                шаблон.асд_значення = дані.значення;
//                змінна пх: позитивне = 0;
//                поки пх < шаблон.карта_готових_значень.елементи.довжина {
//                  ціль значення = шаблон.карта_готових_значень.елементи.дані[пх];
//                  ціль к = значення.значення.к;
//                  ціль тип = к.дані як комірка<Тип>;
//                  ціль дані_типу_структури = тип.дані як комірка<ДаніТипуСтруктура>;
//                  ціль помилка_заповнення = заповнити_дані_типу_структури(К, дані_типу_структури.середовище_створення_структури, дані_типу_структури, дані_значення);
//                  якщо помилка_заповнення != пусто {
//                    вернути помилка_заповнення;
//                  }
//                  пх = пх + 1;
//                }
//              }
//              вернути пусто;
//            }
//          }
//        }
//      }
//      ціль помилка_компіляції = створити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
//      вернути помилка_компіляції;
//    } інакше {
//      якщо дані.значення.вид == АСДВидШаблон {
//        ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Неможливо створити шаблон для шаблону");
//        вернути помилка_компіляції;
//      }
//      якщо дані.значення.вид == АСДВидДія {
//        ціль дані_значення = дані.значення.дані як комірка<АСДДаніДія>;
//        якщо дані_значення.видимість != АСДВидимістьВнутрішня {
//          ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Шаблон дії може мати лише внутрішню видимість");
//          вернути помилка_компіляції;
//        }
//      }
//      ціль результат_створення_шаблону = скомпілювати_шаблон(К, пусто, пусто, середовище, місцезнаходження, дані);
//      якщо результат_створення_шаблону.помилка != пусто {
//        вернути результат_створення_шаблону.помилка;
//      }
//      змінити_в_середовищі(середовище, назва, результат_створення_шаблону.значення.к);
//    }
//    вернути пусто;
//  }
}

секція ц {
  місцева дія скомпілювати_визначити_шаблон(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): комірка<ПомилкаКомпіляції> {
    // ...
  }
}