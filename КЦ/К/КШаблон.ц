взяти визначення К;

секція ц {
  дія порівняти_списки_обʼєктів_типів(с1: комірка<список<комірка<ОбʼєктТипу>>>, с2: комірка<список<комірка<ОбʼєктТипу>>>): логічне {
    якщо с1.довжина != с2.довжина {
      вернути ні;
    }
    змінна х: позитивне = 0;
    поки х < с1.довжина {
      якщо перевірити_тип(с1.дані[х], с2.дані[х]) == ні {
        вернути ні;
      }
      х = х + 1;
    }
    вернути так;
  }

  місцева дія скомпілювати_шаблон(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): Результат {
    якщо дані.значення.вид == АСДВидШаблон {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Неможливо створити шаблон для шаблону");
      вернути Результат { помилка = помилка_компіляції };
    }
    якщо дані.значення.вид == АСДВидДія {
      ціль дані_значення = дані.значення.дані як комірка<АСДДаніДія>;
      якщо дані_значення.видимість != АСДВидимістьВнутрішня {
        ціль помилка_компіляції = виділити_помилку_компіляції_шаблон_дії_може_мати_лише_внутрішню_видимість(місцезнаходження);
        вернути Результат { помилка = помилка_компіляції };
      }
    }
    ціль назва = дані.ідентифікатор.значення;
    ціль середовище_компіляції_шаблону = створити_середовище(інформація_середовища.середовище);
    ціль обʼєкт_шаблону = виділити<ОбʼєктШаблону>();
    якщо дані.значення.вид == АСДВидСтруктура {
      обʼєкт_шаблону.вид = ВидШаблонуСтруктури;
    } інакше якщо дані.значення.вид == АСДВидДія {
      обʼєкт_шаблону.вид = ВидШаблонуДії;
    } інакше {
      обʼєкт_шаблону.вид = ВидШаблонуЗвичайний;
    }
    обʼєкт_шаблону.назва = назва;
    обʼєкт_шаблону.інформація_середовища_компіляції = ІнформаціяСередовища {
      середовище = середовище_компіляції_шаблону,
      обʼєкт_дії = інформація_середовища.обʼєкт_дії,
      llvm_block = інформація_середовища.llvm_block,
      інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
    };
    обʼєкт_шаблону.параметри = виділити_список<памʼять<п8>>();
    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_ідентифікатор = дані.параметри[пх];
      додати_до_списку<памʼять<п8>>(обʼєкт_шаблону.параметри, асд_ідентифікатор.значення);
      пх = пх + 1;
    }
    якщо дані.значення.вид == АСДВидСтруктура {
      обʼєкт_шаблону.місцезнаходження_асд_даних_шаблону_структури = дані.значення.місцезнаходження;
      обʼєкт_шаблону.асд_дані_шаблону_структури = дані.значення.дані як комірка<АСДДаніСтруктура>;
      обʼєкт_шаблону.карта_готових_значень_шаблону_структури = виділити_карту<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктТипу>>(порівняти_списки_обʼєктів_типів);
    } інакше якщо дані.значення.вид == АСДВидДія {
      обʼєкт_шаблону.місцезнаходження_асд_дії_шаблону_дії = дані.значення.місцезнаходження;
      обʼєкт_шаблону.асд_дані_шаблону_дії = дані.значення.дані як комірка<АСДДаніДія>;
      обʼєкт_шаблону.карта_готових_значень_шаблону_дії = виділити_карту<комірка<список<комірка<ОбʼєктТипу>>>, комірка<ОбʼєктДії>>(порівняти_списки_обʼєктів_типів);
    } інакше {
      обʼєкт_шаблону.асд_значення_звичайного_шаблону = дані.значення;
      обʼєкт_шаблону.карта_готових_значень_звичайного_шаблону = виділити_карту<комірка<список<комірка<ОбʼєктТипу>>>, Обʼєкт>(порівняти_списки_обʼєктів_типів);
    }
    змінити_в_середовищі(інформація_середовища.середовище, назва, Обʼєкт { ВидОбʼєктаШаблону, дані = обʼєкт_шаблону });
    вернути Результат { Обʼєкт { ВидОбʼєктаШаблону, дані = обʼєкт_шаблону }, помилка = пусто };
  }

  дія дозаповнити_шаблон(обʼєкт_шаблону: комірка<ОбʼєктШаблону>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    якщо обʼєкт_шаблону.параметри.довжина != дані.кількість_параметрів {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Кількість параметрів не співпадає");
      вернути помилка_компіляції;
    }
    змінна пх: позитивне = 0;
    поки пх < обʼєкт_шаблону.параметри.довжина {
      ціль параметр = обʼєкт_шаблону.параметри.дані[пх];
      ціль асд_параметр = дані.параметри[пх].значення;
      якщо strcmp(параметр, асд_параметр) != 0 {
        ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Назви параметрів шаблону не співпадають");
        вернути помилка_компіляції;
      }
      пх = пх + 1;
    }
    якщо обʼєкт_шаблону.вид == ВидШаблонуЗвичайний {
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше якщо обʼєкт_шаблону.вид == ВидШаблонуСтруктури {
      якщо обʼєкт_шаблону.асд_дані_шаблону_структури.кількість_параметрів == 0 {
        якщо дані.значення.вид == АСДВидСтруктура {
          ціль нові_асд_дані_структури = дані.значення.дані як комірка<АСДДаніСтруктура>;
          обʼєкт_шаблону.асд_дані_шаблону_структури = нові_асд_дані_структури;
          пх = 0;
          поки пх < обʼєкт_шаблону.карта_готових_значень_шаблону_структури.елементи.довжина {
            ціль ек = обʼєкт_шаблону.карта_готових_значень_шаблону_структури.елементи.дані[пх];
            ціль обʼєкт_типу = ек.значення;
            ціль помилка_заповнення = заповнити_структуру(
              К,
              обʼєкт_типу,
              обʼєкт_шаблону.інформація_середовища_компіляції, // потім: здається це неправильно
              нові_асд_дані_структури
            );
            якщо помилка_заповнення != пусто {
              вернути помилка_заповнення;
            }
            пх = пх + 1;
          }
          вернути пусто;
        } інакше {
          ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
          вернути помилка_компіляції;
        }
      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
        вернути помилка_компіляції;
      }
    } інакше якщо обʼєкт_шаблону.вид == ВидШаблонуДії {
      якщо дані.значення.вид == АСДВидДія {
        ціль нові_асд_дані_дії = дані.значення.дані як комірка<АСДДаніДія>;
        якщо нові_асд_дані_дії.видимість != АСДВидимістьВнутрішня {
          ціль помилка_компіляції = виділити_помилку_компіляції_шаблон_дії_може_мати_лише_внутрішню_видимість(місцезнаходження);
          вернути помилка_компіляції;
        }

        // потім: перевірити кількість параметрів
        //        якщо кількість параметрів нерівна створити шаблон групи дій

        якщо обʼєкт_шаблону.асд_дані_шаблону_дії.кількість_параметрів != нові_асд_дані_дії.кількість_параметрів {
          ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Кількість параметрів не співпадає");
          вернути помилка_компіляції;
        }

        обʼєкт_шаблону.асд_дані_шаблону_дії = нові_асд_дані_дії;
        пх = 0;
        поки пх < обʼєкт_шаблону.карта_готових_значень_шаблону_дії.елементи.довжина {
          ціль ек = обʼєкт_шаблону.карта_готових_значень_шаблону_дії.елементи.дані[пх];
          ціль обʼєкт_дії = ек.значення;

          ціль результат_перевірки_підпису_асд_параметрів = перевірити_підпис_дії_асд_параметрів(К, інформація_середовища, обʼєкт_дії, нові_асд_дані_дії.кількість_параметрів, нові_асд_дані_дії.параметри, ні);
          якщо результат_перевірки_підпису_асд_параметрів.помилка != пусто {
            вернути результат_перевірки_підпису_асд_параметрів.помилка;
          }
          якщо результат_перевірки_підпису_асд_параметрів.успіх == так {
            якщо перевірити_назви_дії_асд_параметрів(К, інформація_середовища, обʼєкт_дії, нові_асд_дані_дії.кількість_параметрів, нові_асд_дані_дії.параметри) == ні {
              ціль помилка_компіляції = виділити_помилку_компіляції_назви_дії_параметрів_не_співпадають(місцезнаходження);
              вернути помилка_компіляції;
            }
            якщо обʼєкт_дії.середовище_тіла_дії == пусто {
              якщо нові_асд_дані_дії.тип_результату == пусто {
                якщо обʼєкт_дії.тип_результату == К.тип_ніщо {
                } інакше {
                  ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
                  вернути помилка_компіляції;
                }
              } інакше {
                ціль результат_компіляції_типу = скомпілювати_значення_як_тип(К, інформація_середовища, нові_асд_дані_дії.тип_результату, так);
                якщо результат_компіляції_типу.помилка != пусто {
                  вернути результат_компіляції_типу.помилка;
                }
                якщо перевірити_тип(результат_компіляції_типу.обʼєкт_типу, обʼєкт_дії.тип_результату) == ні {
                  ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
                  вернути помилка_компіляції;
                }
              }
              якщо перевірити_чи_видимість_обʼєкта_дії_і_асд_значення_дії_рівні(обʼєкт_дії.видимість, нові_асд_дані_дії.видимість) == ні {
                ціль помилка_компіляції = виділити_помилку_компіляції_видимість_дії_не_співпадає(місцезнаходження, обʼєкт_дії.видимість, отримати_видимість_дії_з_асд_видимості(нові_асд_дані_дії.видимість));
                вернути помилка_компіляції;
              }
              якщо нові_асд_дані_дії.тіло == пусто {
                ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
                вернути помилка_компіляції;
              }
              ціль помилка_заповнення = заповнити_неповну_дію_без_перевірки_підпису_параметрів(К, обʼєкт_дії, інформація_середовища, місцезнаходження, нові_асд_дані_дії);
              якщо помилка_заповнення != пусто {
                вернути помилка_заповнення;
              }
              вернути пусто;
            } інакше {
              ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
              вернути помилка_компіляції;
            }
          } інакше {
            ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
            вернути помилка_компіляції;
          }

          пх = пх + 1;
        }
//        вернути пусто;

      } інакше {
        ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
        вернути помилка_компіляції;
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
    вернути помилка_компіляції;
  }

  місцева дія скомпілювати_визначити_шаблон(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва, комірка(обʼєкт_з_середовища));
    якщо успіх_отримання_з_середовища == так {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаШаблону {
        ціль обʼєкт_шаблону = обʼєкт_з_середовища.дані як комірка<ОбʼєктШаблону>;
        вернути дозаповнити_шаблон(обʼєкт_шаблону, К, інформація_середовища, місцезнаходження, дані);
      }
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль результат_компіляції_шаблону = скомпілювати_шаблон(К, інформація_середовища, місцезнаходження, дані);
      якщо результат_компіляції_шаблону.помилка != пусто {
        вернути результат_компіляції_шаблону.помилка;
      }
      змінити_в_середовищі(інформація_середовища.середовище, назва, результат_компіляції_шаблону.обʼєкт);
    }
    вернути пусто;
  }
}