взяти визначення К;

секція ц {
  місцева дія скомпілювати_поки(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПоки>): РезультатКомпіляціїПоки {
    ціль while_cond_llvm_block = LLVM::block(К.L, інформація_середовища.обʼєкт_дії.llvm_function, ю8"while_cond");
    LLVM::br(К.L, інформація_середовища.llvm_block, while_cond_llvm_block);
    ціль результат_компіляції_умови = скомпілювати_значення_як_значення(
      К,
      ІнформаціяСередовища {
        середовище = інформація_середовища.середовище,
        обʼєкт_дії = інформація_середовища.обʼєкт_дії,
        llvm_block = while_cond_llvm_block,
        інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
      },
      дані.умова,
      К.тип_логічне
    );
    якщо результат_компіляції_умови.помилка != пусто {
      вернути РезультатКомпіляціїПоки { помилка = результат_компіляції_умови.помилка };
    }
    ціль обʼєкт_значення_умови = результат_компіляції_умови.обʼєкт_значення;
    якщо обʼєкт_значення_умови.тип != К.тип_логічне {
      ціль помилка_компіляції = виділити_помилку_компіляції_значення_умови_має_бути_логічним(дані.умова.місцезнаходження);
      вернути РезультатКомпіляціїПоки { помилка = помилка_компіляції };
    }
    ціль while_body_llvm_block = LLVM::block(К.L, інформація_середовища.обʼєкт_дії.llvm_function, ю8"while_body");
    ціль while_body_llvm_exit_block = LLVM::block(К.L, інформація_середовища.обʼєкт_дії.llvm_function, ю8"while_body_exit");
    LLVM::brif(К.L, while_cond_llvm_block, обʼєкт_значення_умови.llvm_value, while_body_llvm_block, while_body_llvm_exit_block);
    ціль середовище_поки = створити_середовище(інформація_середовища.середовище);
    ціль результат_компіляції_тіла = скомпілювати_блок(
      К,
      ІнформаціяСередовища {
        середовище = середовище_поки,
        обʼєкт_дії = інформація_середовища.обʼєкт_дії,
        llvm_block = while_body_llvm_block,
        інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
      },
      while_cond_llvm_block,
      дані.тіло
    );
    якщо результат_компіляції_тіла.помилка != пусто {
      вернути РезультатКомпіляціїПоки { помилка = результат_компіляції_тіла.помилка };
    }
    вернути РезультатКомпіляціїПоки { while_body_llvm_exit_block, помилка = пусто };
  }
}