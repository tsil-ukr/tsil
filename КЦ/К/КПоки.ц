взяти визначення К;

секція ц {
  місцева дія скомпілювати_поки(К: комірка<Компілятор>, обʼєкт_дії_середовища: комірка<ОбʼєктДії>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПоки>): комірка<ПомилкаКомпіляції> {
//    ціль original_llvm_block = блок.llvm_block;
//    ціль original_llvm_exit_block = блок.llvm_exit_block;
//
//    ціль блок_умови_поки = виділити<Блок>();
//    блок_умови_поки.llvm_ret_value = блок.llvm_ret_value;
//    блок_умови_поки.llvm_alloca_block = блок.llvm_alloca_block;
//    блок_умови_поки.llvm_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while_cond");
//    блок_умови_поки.llvm_exit_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while_cond_exit");
//    блок_умови_поки.llvm_return_exit_block = блок.llvm_return_exit_block;
//    ціль результат_компіляції_умови = скомпілювати_значення_як_значення(К, блок_умови_поки, пусто, середовище, дані.умова, К.тип_логічне);
//    якщо результат_компіляції_умови.помилка != пусто {
//      вернути результат_компіляції_умови.помилка;
//    }
//
//    ціль while_llvm_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while");
//    ціль while_llvm_exit_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while_exit");
//    LLVM::br(К.L, original_llvm_block, while_cond_llvm_block);
//
//    ціль обʼєкт_значення_умови = результат_компіляції_умови.обʼєкт_значення;
//    якщо обʼєкт_значення_умови.тип != К.тип_логічне {
//      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Тип умови повинен бути логічним");
//      вернути помилка_компіляції;
//    }
//    LLVM::brif(К.L, while_cond_llvm_block, обʼєкт_значення_умови.llvm_value, while_llvm_block, while_llvm_exit_block);
//    блок.llvm_block = while_llvm_block;
//    блок.llvm_exit_block = while_cond_llvm_block;
//    ціль середовище_поки = створити_середовище(середовище);
//    ціль результат_компіляції_тіла = скомпілювати_блок(К, обʼєкт_дії_середовища, блок, середовище_поки, дані.тіло);
//    якщо результат_компіляції_тіла.помилка != пусто {
//      вернути результат_компіляції_тіла.помилка;
//    }
//    LLVM::br(К.L, while_llvm_exit_block, original_llvm_exit_block);
//    блок.llvm_block = original_llvm_exit_block;
//    блок.llvm_exit_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"exit");
//
//
//    біб::друк_ю8(ю8"ятут");
//    вернути пусто;



    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не втілено");
    вернути помилка_компіляції;
  }
}