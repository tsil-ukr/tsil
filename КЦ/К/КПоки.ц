взяти визначення К;

секція ц {
  місцева дія скомпілювати_поки(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніПоки>): комірка<ПомилкаКомпіляції> {
//    ціль original_llvm_block = блок.llvm_block;
//    ціль original_llvm_exit_block = блок.llvm_exit_block;
//    ціль original_llvm_return_exit_block = блок.llvm_return_exit_block;
//
//    ціль блок_умови_поки = виділити<Блок>();
//    блок_умови_поки.llvm_block = LLVM::block(К.L, інформація_середовища.обʼєкт_дії.llvm_function, ю8"while_cond");
//    блок_умови_поки.llvm_exit_block = пусто; // потім: переосмислити
//    блок_умови_поки.llvm_return_exit_block = original_llvm_return_exit_block;
//    LLVM::br(К.L, original_llvm_block, блок_умови_поки.llvm_block);
//
//    ціль результат_компіляції_умови = скомпілювати_значення_як_значення(
//      К,
//      ІнформаціяСередовища {
//        середовище = інформація_середовища.середовище,
//        обʼєкт_дії = інформація_середовища.обʼєкт_дії,
//        блок = блок_умови_поки,
//        інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
//      },
//      дані.умова,
//      К.тип_логічне
//    );
//    якщо результат_компіляції_умови.помилка != пусто {
//      вернути результат_компіляції_умови.помилка;
//    }
//    ціль обʼєкт_значення_умови = результат_компіляції_умови.обʼєкт_значення;
//    якщо обʼєкт_значення_умови.тип != К.тип_логічне {
//      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Тип умови повинен бути логічним");
//      вернути помилка_компіляції;
//    }
//
//    ціль блок_тіла_поки = виділити<Блок>();
//    блок_тіла_поки.llvm_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while_body");
//    блок_тіла_поки.llvm_exit_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"while_body_exit");
//    блок_тіла_поки.llvm_return_exit_block = original_llvm_return_exit_block;
//
//    LLVM::brif(К.L, блок_умови_поки.llvm_block, обʼєкт_значення_умови.llvm_value, блок_тіла_поки.llvm_block, блок_тіла_поки.llvm_exit_block);
//
//    ціль середовище_поки = створити_середовище(інформація_середовища.середовище);
//    ціль результат_компіляції_тіла = скомпілювати_блок(
//      К,
//      ІнформаціяСередовища {
//        середовище = середовище_поки,
//        обʼєкт_дії = інформація_середовища.обʼєкт_дії,
//        блок = блок_тіла_поки,
//        інформація_виконання_шаблону = інформація_середовища.інформація_виконання_шаблону
//      },
//      дані.тіло
//    );
//    якщо результат_компіляції_тіла.помилка != пусто {
//      вернути результат_компіляції_тіла.помилка;
//    }
//    LLVM::br(К.L, блок_тіла_поки.llvm_block, блок_умови_поки.llvm_block);
//    блок.llvm_block = original_llvm_exit_block;
//    блок.llvm_exit_block = LLVM::block(К.L, обʼєкт_дії_середовища.llvm_function, ю8"exit");
//
//
//    біб::друк_ю8(ю8"ятут");
//    вернути пусто;



    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не втілено");
    вернути помилка_компіляції;
  }
}