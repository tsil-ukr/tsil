взяти визначення К;

секція цк {
  місцева дія скомпілювати_змінити(К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЗмінити>): комірка<ПомилкаКомпіляції> {
    ціль результат_компіляції_обʼєкта_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.обʼєкт, ні);
    якщо результат_компіляції_обʼєкта_значення.помилка != пусто {
      вернути результат_компіляції_обʼєкта_значення.помилка;
    }
    ціль тип = результат_компіляції_обʼєкта_значення.в.тип;
    якщо тип.вид != ВидТипуСтруктура {
      ціль помилка_компіляції = створити_помилку_компіляції(дані.обʼєкт.місцезнаходження, ю8"Тип не є структурою");
      вернути помилка_компіляції;
    }
    ціль дані_типу_структури = тип.дані як комірка<ДаніТипуСтруктура>;
    ціль назва_властивості = дані.ідентифікатор.значення;
    змінна параметр: Параметр;
    змінна позиція_параметра: позитивне = 0;
    змінна параметр_знайдено: логічне = ні;
    змінна пх: позитивне = 0;
    поки пх < дані_типу_структури.параметри.довжина {
      якщо strcmp(дані_типу_структури.параметри.дані[пх].назва, назва_властивості) == 0 {
        параметр = дані_типу_структури.параметри.дані[пх];
        позиція_параметра = пх;
        параметр_знайдено = так;
      }
      пх = пх + 1;
    }
    якщо параметр_знайдено == ні {
      ціль помилка_компіляції = створити_помилку_компіляції(дані.ідентифікатор.місцезнаходження, ю8"Параметр не знайдено");
      вернути помилка_компіляції;
    }
    ціль позиції_gep = виділити<комірка<LLVM::Value>>(2);
    позиції_gep[0] = LLVM::const_int32(К.Л, 0);
    позиції_gep[1] = LLVM::const_int32(К.Л, позиція_параметра);

    ціль llvm_value_gep = LLVM::getelementptr(К.Л, блок.llvm_block, отримати_llvm_type(К, тип), результат_компіляції_обʼєкта_значення.в.llvm_value, 2, позиції_gep);

    ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.значення, так);
    якщо результат_компіляції_значення.помилка != пусто {
      вернути результат_компіляції_значення.помилка;
    }

    якщо перевірити_тип(К, результат_компіляції_значення.в.тип, параметр.тип) == ні {
      ціль помилка_компіляції = створити_помилку_компіляції(дані.значення.місцезнаходження, ю8"Невідповідні типи");
      вернути помилка_компіляції;
    }

    LLVM::store(К.Л, блок.llvm_block, результат_компіляції_значення.в.llvm_value, llvm_value_gep);

    вернути пусто;
  }
}