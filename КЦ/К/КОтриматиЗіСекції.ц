взяти визначення К;

секція ц {
  місцева дія скомпілювати_отримати_зі_секції(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніОтриматиЗіСекції>, завантажити: логічне): Результат {
    ціль результат_компіляції_значення = скомпілювати_значення(К, інформація_середовища, дані.обʼєкт, пусто, ні);
    якщо результат_компіляції_значення.помилка != пусто {
      вернути Результат { помилка = результат_компіляції_значення.помилка };
    }
    ціль обʼєкт = результат_компіляції_значення.обʼєкт;
    якщо обʼєкт.вид == ВидОбʼєктаСекції {
      ціль обʼєкт_секції = обʼєкт.дані як комірка<ОбʼєктСекції>;
      ціль назва = дані.ідентифікатор.значення;
      ціль обʼєкт: Обʼєкт;
      ціль успіх_отримання_зі_середовища = отримати_з_локального_середовища(обʼєкт_секції.середовище, назва, комірка(обʼєкт));
      якщо успіх_отримання_зі_середовища == так {
        якщо обʼєкт.вид == ВидОбʼєктаЦілі {
          ціль обʼєкт_цілі = обʼєкт.дані як комірка<ОбʼєктЦілі>;
          ціль тип = обʼєкт_цілі.тип;
          якщо завантажити == так {
            ціль loaded_llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, тип.llvm_type, обʼєкт_цілі.llvm_value);
            ціль обʼєкт_значення = ОбʼєктЗначення {};
            обʼєкт_значення.тип = тип;
            обʼєкт_значення.llvm_value = loaded_llvm_value;
            вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
          }
        }
        вернути Результат { обʼєкт, помилка = пусто };
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не реалізовано");
    вернути Результат { помилка = помилка_компіляції };
  }
}