взяти визначення К;

секція ц {
  місцева дія скомпілювати_визначити_ціль_в_тілі_дії(К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, дані: адреса<АСДДаніЦіль>): адреса<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна ціль обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва_з_ю8сі(К, назва), обʼєкт_з_середовища::адреса);
    якщо успіх_отримання_з_середовища == так {
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
      обʼєкт_незавантаженого_значення.тип = пусто;
      обʼєкт_незавантаженого_значення.llvm_value = пусто;
      якщо дані.модифікатор == АСДМодифікаторЗмінна {
        обʼєкт_незавантаженого_значення.змінний = позитивне(так);
      } інакше {
        обʼєкт_незавантаженого_значення.змінний = позитивне(ні);
      }
      якщо дані.тип == пусто {
        якщо дані.значення == пусто {
          ціль помилка_компіляції = виділити_помилку_компіляції_не_вказано_тип_цілі(місцезнаходження);
          вернути помилка_компіляції;
        } інакше {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, інформація_середовища, дані.значення, пусто);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          ціль обʼєкт_значення = результат_компіляції_значення.обʼєкт_значення;
          якщо обʼєкт_значення.тип == К.тип_ніщо {
            ціль помилка_компіляції = виділити_помилку_компіляції_неможливо_визначити_ціль_з_типом_ніщо(дані.значення.місцезнаходження);
            вернути помилка_компіляції;
          }
          обʼєкт_незавантаженого_значення.тип = обʼєкт_значення.тип;
          обʼєкт_незавантаженого_значення.llvm_value = LLVM::alloca(К.L, інформація_середовища.обʼєкт_дії.llvm_alloca_block, назва, обʼєкт_незавантаженого_значення.тип.llvm_type);
          LLVM::store(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_незавантаженого_значення.llvm_value);
//          біб::вивести_ю8(ю8сі"створено ціль ");
//          біб::вивести_ю8(назва);
//          біб::вивести_ю8(ю8сі" з типом зі значення ");
//          біб::друк_ю8(обʼєкт_типу_як_ю8сі(обʼєкт_незавантаженого_значення.тип));
        }
      } інакше {
        ціль результат_компіляції_значення_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип, так);
        якщо результат_компіляції_значення_типу.помилка != пусто {
          вернути результат_компіляції_значення_типу.помилка;
        }
        ціль обʼєкт_типу_цілі = результат_компіляції_значення_типу.обʼєкт_типу;
        обʼєкт_незавантаженого_значення.тип = обʼєкт_типу_цілі;
        обʼєкт_незавантаженого_значення.llvm_value = LLVM::alloca(К.L, інформація_середовища.обʼєкт_дії.llvm_alloca_block, назва, обʼєкт_типу_цілі.llvm_type);
        якщо дані.значення != пусто {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, інформація_середовища, дані.значення, обʼєкт_типу_цілі);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          змінна ціль обʼєкт_значення = результат_компіляції_значення.обʼєкт_значення;
          якщо обʼєкт_типу_цілі.вид == ВидТипуВаріація {
            змінна ціль знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
            змінна ціль пх: позитивне = 0;
            поки пх < обʼєкт_типу_цілі.типи_варіації.розмір {
              якщо перевірити_тип(обʼєкт_значення.тип, обʼєкт_типу_цілі.типи_варіації.дані[пх]) == так {
                знайдений_тип_варіації = обʼєкт_типу_цілі.типи_варіації.дані[пх];
              }
              пх = пх + 1;
            }
            якщо знайдений_тип_варіації == пусто {
              ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва, обʼєкт_типу_цілі, обʼєкт_значення.тип);
              вернути помилка_компіляції;
            }
          } інакше {
            ціль результат_перевірки_типу_значення = перевірити_тип_значення_і_перетворити_якщо_треба(К, інформація_середовища, обʼєкт_типу_цілі, обʼєкт_значення);
            якщо результат_перевірки_типу_значення.успіх == позитивне(ні) {
              ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_цілі(місцезнаходження, назва, обʼєкт_типу_цілі, обʼєкт_значення.тип);
              вернути помилка_компіляції;
            }
            обʼєкт_значення = результат_перевірки_типу_значення.обʼєкт_значення;
          }
          LLVM::store(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_незавантаженого_значення.llvm_value);
        }
//        біб::вивести_ю8(ю8сі"створено ціль ");
//        біб::вивести_ю8(назва);
//        біб::вивести_ю8(ю8сі" з типом ");
//        біб::друк_ю8(обʼєкт_типу_як_ю8сі(обʼєкт_незавантаженого_значення.тип));
      }
      ціль обʼєкт = Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення };
      змінити_в_середовищі(інформація_середовища.середовище, назва_з_ю8сі(К, назва), обʼєкт);
      вернути пусто;
    }
  }

  місцева дія скомпілювати_визначити_ціль_в_тілі_секції(К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, дані: адреса<АСДДаніЦіль>): адреса<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна ціль обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(інформація_середовища.середовище, назва_з_ю8сі(К, назва), обʼєкт_з_середовища::адреса);
    якщо успіх_отримання_з_середовища == так {
      ціль помилка_компіляції = виділити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
      обʼєкт_незавантаженого_значення.тип = пусто;
      обʼєкт_незавантаженого_значення.llvm_value = пусто;
      обʼєкт_незавантаженого_значення.змінний = позитивне(так);
      якщо дані.модифікатор == АСДМодифікаторЗмінна {
        обʼєкт_незавантаженого_значення.змінний = позитивне(так);
      } інакше {
        обʼєкт_незавантаженого_значення.змінний = позитивне(ні);
      }
      якщо дані.тип == пусто {
        якщо дані.значення == пусто {
          ціль помилка_компіляції = виділити_помилку_компіляції_не_вказано_тип_цілі(місцезнаходження);
          вернути помилка_компіляції;
        } інакше {
          ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8сі"Не втілено глобальна ціль зі значенням");
          вернути помилка_компіляції;
        }
      } інакше {
        ціль результат_компіляції_значення_типу = скомпілювати_значення_як_тип(К, інформація_середовища, дані.тип, так);
        якщо результат_компіляції_значення_типу.помилка != пусто {
          вернути результат_компіляції_значення_типу.помилка;
        }
        ціль обʼєкт_типу_цілі = результат_компіляції_значення_типу.обʼєкт_типу;
        обʼєкт_незавантаженого_значення.тип = обʼєкт_типу_цілі;
        якщо дані.видимість == АСДВидимістьЗовнішня {
          обʼєкт_незавантаженого_значення.llvm_value = LLVM::make_external_global(К.L, назва, обʼєкт_типу_цілі.llvm_type);
        } інакше якщо дані.видимість == АСДВидимістьЗовнішня {
          обʼєкт_незавантаженого_значення.llvm_value = LLVM::make_local_global(К.L, назва, обʼєкт_типу_цілі.llvm_type);
        } інакше {
          обʼєкт_незавантаженого_значення.llvm_value = LLVM::make_internal_global(К.L, назва, обʼєкт_типу_цілі.llvm_type);
        }
        якщо дані.значення != пусто {
          ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8сі"Не втілено глобальна ціль зі значенням");
          вернути помилка_компіляції;
        }
      }
      ціль обʼєкт = Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення };
      змінити_в_середовищі(інформація_середовища.середовище, назва_з_ю8сі(К, назва), обʼєкт);
      вернути пусто;
    }
  }
}