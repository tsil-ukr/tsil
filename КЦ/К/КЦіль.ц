взяти визначення К;

секція цк {
  місцева дія скомпілювати_визначити_ціль(К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЦіль>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    ціль результат_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва);
    якщо результат_отримання_з_середовища.знайдено == так {
      ціль помилка_компіляції = створити_помилку_компіляції_субʼєкт_вже_визначено(місцезнаходження, назва);
      вернути помилка_компіляції;
    } інакше {
      ціль ціль_ = виділити<Ціль>();

      якщо дані.тип == пусто {
        якщо дані.значення == пусто {
          ціль помилка_компіляції = створити_помилку_компіляції(місцезнаходження, ю8"Не вказано тип цілі");
          вернути помилка_компіляції;
        } інакше {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.значення, так);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          ціль тип = результат_компіляції_значення.в.тип;
          якщо тип.вид == ВидТипуНативний {
            якщо перевірити_тип(К, тип, К.тип_ніщо) == так {
              ціль помилка_компіляції = створити_помилку_компіляції(дані.значення.місцезнаходження, ю8"Тип не визначено");
              вернути помилка_компіляції;
            }
          }
          ціль_.тип = тип;
          ціль_.llvm_alloca_value = LLVM::alloca(К.Л, блок.llvm_alloca_block, назва, отримати_llvm_type(К, тип));

          LLVM::store(К.Л, блок.llvm_block, результат_компіляції_значення.в.llvm_value, ціль_.llvm_alloca_value);
        }
      } інакше {
        ціль результат_компіляції_як_типу = скомпілювати_значення_як_тип(К, блок, середовище, дані.тип);
        якщо результат_компіляції_як_типу.помилка != пусто {
          вернути результат_компіляції_як_типу.помилка;
        }
        ціль тип = результат_компіляції_як_типу.тип;
        ціль_.тип = тип;
        ціль_.llvm_alloca_value = LLVM::alloca(К.Л, блок.llvm_alloca_block, назва, отримати_llvm_type(К, тип));

        якщо дані.значення != пусто {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, середовище, дані.значення, так);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          якщо перевірити_тип(К, результат_компіляції_значення.в.тип, тип) == ні {
            ціль помилка_компіляції = створити_помилку_компіляції(дані.значення.місцезнаходження, ю8"Невідповідні типи");
            вернути помилка_компіляції;
          }
          LLVM::store(К.Л, блок.llvm_block, результат_компіляції_значення.в.llvm_value, ціль_.llvm_alloca_value);
        }
      }

      ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКЦіль, ціль_ };

      змінити_в_середовищі(середовище, назва, обʼєкт_компіляції);

      вернути пусто;
    }
  }
}