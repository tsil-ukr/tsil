взяти визначення К;

секція ц {
  місцева дія скомпілювати_визначити_ціль(К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніЦіль>): комірка<ПомилкаКомпіляції> {
    ціль назва = дані.ідентифікатор.значення;
    змінна обʼєкт_з_середовища: Обʼєкт;
    ціль успіх_отримання_з_середовища = отримати_з_локального_середовища(середовище, назва, комірка(обʼєкт_з_середовища));
    якщо успіх_отримання_з_середовища == так {
      ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Субʼєкт вже визначено");
      вернути помилка_компіляції;
    } інакше {
      ціль обʼєкт_цілі = виділити<ОбʼєктЦілі>();
      обʼєкт_цілі.тип = пусто;
      обʼєкт_цілі.llvm_value = пусто;
      якщо дані.тип == пусто {
        якщо дані.значення == пусто {
          ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вказано тип цілі");
          вернути помилка_компіляції;
        } інакше {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, пусто, середовище, дані.значення, пусто);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          ціль обʼєкт_значення = результат_компіляції_значення.обʼєкт_значення;
          якщо обʼєкт_значення.тип == К.тип_ніщо {
            ціль помилка_компіляції = виділити_помилку_компіляції(дані.значення.місцезнаходження, ю8"Тип не визначено");
            вернути помилка_компіляції;
          }
          обʼєкт_цілі.тип = обʼєкт_значення.тип;
          обʼєкт_цілі.llvm_value = LLVM::alloca(К.L, блок.llvm_alloca_block, назва, обʼєкт_цілі.тип.llvm_type);
          LLVM::store(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_цілі.llvm_value);
        }
      } інакше {
        ціль результат_компіляції_значення_типу = скомпілювати_значення_як_тип(К, пусто, пусто, середовище, дані.тип);
        якщо результат_компіляції_значення_типу.помилка != пусто {
          вернути результат_компіляції_значення_типу.помилка;
        }
        ціль обʼєкт_типу_цілі = результат_компіляції_значення_типу.обʼєкт_типу;
        обʼєкт_цілі.тип = обʼєкт_типу_цілі;
        обʼєкт_цілі.llvm_value = LLVM::alloca(К.L, блок.llvm_alloca_block, назва, обʼєкт_типу_цілі.llvm_type);
        якщо дані.значення != пусто {
          ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, блок, пусто, середовище, дані.значення, обʼєкт_типу_цілі);
          якщо результат_компіляції_значення.помилка != пусто {
            вернути результат_компіляції_значення.помилка;
          }
          ціль обʼєкт_значення = результат_компіляції_значення.обʼєкт_значення;
          якщо перевірити_тип(К, обʼєкт_значення.тип, обʼєкт_типу_цілі) == ні {
            ціль помилка_компіляції = виділити_помилку_компіляції(пусто, ю8"Тип значення не відповідає типу цілі");
            вернути помилка_компіляції;
          }
          LLVM::store(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_цілі.llvm_value);
        }
      }
      ціль обʼєкт = Обʼєкт { ВидОбʼєктаЦілі, дані = обʼєкт_цілі };
      змінити_в_середовищі(середовище, назва, обʼєкт);
      вернути пусто;
    }
  }
}