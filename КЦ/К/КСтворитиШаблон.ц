взяти визначення К;

секція цк {
  дія порівняти_ов(ов1: ОбʼєктВиконання, ов2: ОбʼєктВиконання): логічне {
    біб::друк_ю8(ю8"СТОП порівняти_ов");
    вернути ні;
  }

  дія порівняти_тип(тип1: комірка<Тип>, тип2: комірка<Тип>): логічне {
    якщо тип1.вид != тип2.вид {
      вернути ні;
    }
    якщо тип1.вид == ВидТипуНативний {
      ціль дані_типу1 = тип1.дані як комірка<ДаніТипуНативний>;
      ціль дані_типу2 = тип2.дані як комірка<ДаніТипуНативний>;
      якщо дані_типу1 == дані_типу2 {
        вернути так;
      } інакше {
        вернути ні;
      }
    }
    якщо тип1.вид == ВидТипуСтруктура {
      ціль дані_типу1 = тип1.дані як комірка<ДаніТипуНативний>;
      ціль дані_типу2 = тип2.дані як комірка<ДаніТипуНативний>;
      якщо дані_типу1 == дані_типу2 {
        вернути так;
      } інакше {
        вернути ні;
      }
    }
    біб::друк_ю8(ю8"СТОП порівняти_тип");
    біб::друк_позитивне(тип1.вид);
    вернути ні;
  }

  дія порівняти_ок(ок1: ОбʼєктКомпіляції, ок2: ОбʼєктКомпіляції): логічне {
    якщо ок1.вид != ок2.вид {
      вернути ні;
    }
    якщо ок1.вид == ВидОКТип {
      ціль тип_ок1 = ок1.дані як комірка<Тип>;
      ціль тип_ок2 = ок2.дані як комірка<Тип>;
      вернути порівняти_тип(тип_ок1, тип_ок2);
    }
    біб::друк_ю8(ю8"СТОП порівняти_ок");
    вернути ні;
  }

  дія порівняти_значення(з1: Значення, з2: Значення): логічне {
    якщо з1.вид != з2.вид {
      вернути ні;
    }
    якщо з1.вид == ВидЗначенняОВ {
      вернути порівняти_ов(з1.в, з2.в);
    }
    якщо з1.вид == ВидЗначенняОК {
      вернути порівняти_ок(з1.к, з2.к);
    }
    біб::друк_ю8(ю8"СТОП порівняти_значення");
    вернути ні;
  }

  дія порівняти_списки_значень(с1: комірка<список<Значення>>, с2: комірка<список<Значення>>): логічне {
    якщо с1.довжина != с2.довжина {
      вернути ні;
    }
    змінна х: позитивне = 0;
    поки х < с1.довжина {
      якщо порівняти_значення(с1.дані[х], с2.дані[х]) == ні {
        вернути ні;
      }
      х = х + 1;
    }
    вернути так;
  }

  місцева дія скомпілювати_створити_шаблон(К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніШаблон>): РезультатЗначення {
    ціль назва = дані.ідентифікатор.значення;

    ціль середовище_шаблону = створити_середовище(середовище);

    ціль ш = виділити<Шаблон>();
    ш.зовнішнє_середовище = середовище_шаблону;
    ш.параметри = виділити_список<памʼять<п8>>();
    ш.асд_значення = дані.значення;
    ш.карта_готових_значень = виділити_карту<комірка<список<Значення>>, Значення>(порівняти_списки_значень);

    змінна пх: позитивне = 0;
    поки пх < дані.кількість_параметрів {
      ціль асд_ідентифікатор = дані.параметри[пх];
      додати_до_списку<памʼять<п8>>(ш.параметри, асд_ідентифікатор.значення);
      пх = пх + 1;
    }

    змінити_в_середовищі(середовище_шаблону, назва, ОбʼєктКомпіляції { ВидОКШаблон, ш });

    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКШаблон, ш };
    ціль значення = Значення { ВидЗначенняОК, к = обʼєкт_компіляції };

    вернути РезультатЗначення { значення, пусто };
  }
}