взяти визначення К;

секція ц {
  місцева дія скомпілювати_вернути(К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, дані: адреса<АСДДаніВернути>): адреса<ПомилкаКомпіляції> {
    змінна ціль очікуваний_тип: адреса<ОбʼєктТипу> = пусто;
    якщо інформація_середовища.обʼєкт_дії == пусто {
      ціль помилка_компліяції = виділити_помилку_компіляції(місцезнаходження, ю8"Вернути може бути використано тільки всередині дії");
      вернути помилка_компліяції;
    } інакше {
      якщо інформація_середовища.обʼєкт_дії.тип_результату == К.тип_ніщо {
        якщо дані.значення == пусто {
          LLVM::br(К.L, інформація_середовища.llvm_block, інформація_середовища.обʼєкт_дії.llvm_return_block);
          вернути пусто;
        } інакше {
          ціль помилка_компліяції = виділити_помилку_компіляції(місцезнаходження, ю8"Вернути може бути використано тільки всередині дії з результатом");
          вернути помилка_компліяції;
        }
      } інакше {
        якщо дані.значення == пусто {
          ціль помилка_компліяції = виділити_помилку_компіляції(місцезнаходження, ю8"Вернути має значення");
          вернути помилка_компліяції;
        } інакше {
          очікуваний_тип = інформація_середовища.обʼєкт_дії.тип_результату;
        }
      }
    }
    ціль результат_компіляції_значення = скомпілювати_значення_як_значення(К, інформація_середовища, дані.значення, очікуваний_тип);
    якщо результат_компіляції_значення.помилка != пусто {
      вернути результат_компіляції_значення.помилка;
    }
    ціль результат_перевірки_типу_значення = перевірити_тип_значення_і_перетворити_якщо_треба(К, інформація_середовища, очікуваний_тип, результат_компіляції_значення.обʼєкт_значення);
    якщо результат_перевірки_типу_значення.успіх == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції_невірний_тип_значення_повернення(місцезнаходження, очікуваний_тип, результат_компіляції_значення.обʼєкт_значення.тип);
      вернути помилка_компіляції;
    }
    LLVM::store(К.L, інформація_середовища.llvm_block, результат_перевірки_типу_значення.обʼєкт_значення.llvm_value, інформація_середовища.обʼєкт_дії.llvm_return_value);
    // потім: насправді треба стрибати в блок повернення наявного блоку
    LLVM::br(К.L, інформація_середовища.llvm_block, інформація_середовища.обʼєкт_дії.llvm_return_block);
    вернути пусто;
  }
}