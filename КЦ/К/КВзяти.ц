взяти визначення К;

зовнішня дія перевірити_чи_файл_існує(шлях: комірка<п8>): позитивне;
зовнішня дія перевірити_чи_файл_доступний(шлях: комірка<п8>): позитивне;
зовнішня дія прочитати_файл(шлях: комірка<п8>): памʼять<п8>;

секція ц {
  місцева дія скомпілювати_взяти(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніВзяти>): комірка<ПомилкаКомпіляції> {
    якщо дані.тип != пусто {
      якщо strcmp(дані.тип.значення, ю8"визначення") == 0 {
        ціль ю8_буфер_шляху = створити_буфер_ю8();
        додати_до_буфера_ю8(ю8_буфер_шляху, К.cwd);
        додати_до_буфера_ю8(ю8_буфер_шляху, ю8"/");
        змінна назва_файлу: памʼять<п8> = пусто;
        змінна пх: позитивне = 0;
        поки пх < дані.довжина_шляху {
          додати_до_буфера_ю8(ю8_буфер_шляху, дані.шлях[пх].значення);
          якщо пх != дані.довжина_шляху - 1 {
            додати_до_буфера_ю8(ю8_буфер_шляху, ю8"/");
          }
          якщо пх == дані.довжина_шляху - 1 {
            назва_файлу = дані.шлях[пх].значення;
          }
          пх = пх + 1;
        }
        додати_до_буфера_ю8(ю8_буфер_шляху, ю8".в");
        ціль ю8_шляху_до_файлу = створити_ю8_сі_з_буфера(ю8_буфер_шляху);
        видалити_останнє_значення_з_буфера_ю8(ю8_буфер_шляху);
        видалити_останнє_значення_з_буфера_ю8(ю8_буфер_шляху);
        видалити_останнє_значення_з_буфера_ю8(ю8_буфер_шляху);
        додати_до_буфера_ю8(ю8_буфер_шляху, ю8"/");
        додати_до_буфера_ю8(ю8_буфер_шляху, назва_файлу);
        додати_до_буфера_ю8(ю8_буфер_шляху, ю8".в");
        ціль ю8_шляху_до_папки_і_файлу = створити_ю8_сі_з_буфера(ю8_буфер_шляху);
        звільнити_буфер_ю8(ю8_буфер_шляху);
        змінна шлях_до_файлу_визначення: памʼять<п8> = пусто;
        якщо перевірити_чи_файл_доступний(ю8_шляху_до_файлу) != 0 {
          шлях_до_файлу_визначення = ю8_шляху_до_файлу;
        } інакше якщо перевірити_чи_файл_доступний(ю8_шляху_до_папки_і_файлу) != 0 {
          шлях_до_файлу_визначення = ю8_шляху_до_папки_і_файлу;
        }
        якщо шлях_до_файлу_визначення == пусто {
          ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Файл визначення не знайдено");
          вернути помилка_компіляції;
        }
        пх = 0;
        поки пх < К.взяті_файли.довжина {
          якщо strcmp(К.взяті_файли.дані[пх], шлях_до_файлу_визначення) == 0 {
            вернути пусто;
          }
          пх = пх + 1;
        }
        біб::друк_ю8(шлях_до_файлу_визначення);
        ціль дані_файлу_визначення = прочитати_файл(шлях_до_файлу_визначення);
        ціль текст_коду = виділити<ТекстКоду>();
        текст_коду.шлях = шлях_до_файлу_визначення;
        текст_коду.значення = дані_файлу_визначення;
        ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
        якщо результат_розбору_цілі.успіх == ні {
          ціль помилка_компіляції = виділити_помилку_компіляції(результат_розбору_цілі.помилка.місцезнаходження, результат_розбору_цілі.помилка.повідомлення);
          вернути помилка_компіляції;
        }
        ціль результат_компіляції_секції = скомпілювати_тіло_секції(
          К,
          ц::ІнформаціяСередовища {
            середовище = інформація_середовища.середовище,
            обʼєкт_дії = пусто,
            llvm_block = пусто,
            інформація_виконання_шаблону = пусто
          },
          результат_розбору_цілі.тіло
        );
        вернути результат_компіляції_секції.помилка;
      } інакше якщо strcmp(дані.тип.значення, ю8"біб") == 0 {
        //
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалося скомпілювати взяти");
    вернути помилка_компіляції;
  }
}