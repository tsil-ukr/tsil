взяти визначення К;

секція ц {
  місцева дія скомпілювати_отримати(К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, дані: комірка<АСДДаніОтримати>, завантажити: логічне): Результат {
    ціль результат_компіляції_значення = скомпілювати_значення(К, інформація_середовища, дані.обʼєкт, пусто, ні);
    якщо результат_компіляції_значення.помилка != пусто {
      вернути Результат { помилка = результат_компіляції_значення.помилка };
    }
    ціль обʼєкт = результат_компіляції_значення.обʼєкт;
    змінна тип: комірка<ОбʼєктТипу>;
    змінна llvm_value: комірка<LLVM::Value>;
    якщо обʼєкт.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = обʼєкт.дані як комірка<ОбʼєктЦілі>;
      тип = обʼєкт_цілі.тип;
      llvm_value = обʼєкт_цілі.llvm_value;
    } інакше якщо обʼєкт.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = обʼєкт.дані як ОбʼєктЗначення;
      тип = обʼєкт_значення.тип;
      llvm_value = обʼєкт_значення.llvm_value;
    } інакше {
      ціль помилка_компіляції = виділити_помилку_компіляції(дані.ідентифікатор.місцезнаходження, ю8"Не вийшло");
      вернути Результат { помилка = помилка_компіляції };
    }
    змінна позиція_знайденої_властивості: позитивне = 0;
    змінна властивість_структури: ВластивістьСтруктури;
    змінна властивість_структури_знайдено: логічне = ні;
    змінна пх: позитивне = 0;
    поки пх < тип.властивості_структури.довжина {
      якщо strcmp(тип.властивості_структури.дані[пх].назва, дані.ідентифікатор.значення) == 0 {
        позиція_знайденої_властивості = пх;
        властивість_структури = тип.властивості_структури.дані[пх];
        властивість_структури_знайдено = так;
      }
      пх = пх + 1;
    }
    якщо властивість_структури_знайдено == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції(дані.ідентифікатор.місцезнаходження, ю8"Властивість не знайдено");
      вернути Результат { помилка = помилка_компіляції };
    }
    ціль gep_positions_llvm_values = виділити<комірка<LLVM::Value>>(2);
    gep_positions_llvm_values[0] = LLVM::const_int32(К.L, 0);
    gep_positions_llvm_values[1] = LLVM::const_int32(К.L, позиція_знайденої_властивості);
    ціль llvm_value_gep = LLVM::getelementptr(К.L, інформація_середовища.llvm_block, тип.llvm_type, llvm_value, 2, gep_positions_llvm_values);
    ціль обʼєкт_значення = ОбʼєктЗначення {};
    обʼєкт_значення.тип = властивість_структури.тип;
    якщо завантажити == так {
      ціль loaded_llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, властивість_структури.тип.llvm_type, llvm_value_gep);
      обʼєкт_значення.llvm_value = loaded_llvm_value;
    } інакше {
      обʼєкт_значення.llvm_value = llvm_value_gep;
    }
    вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
  }
}