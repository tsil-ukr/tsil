взяти визначення Ц;

секція ц {
  дія обʼєкт_значення_operation(тип: комірка<ОбʼєктТипу>, llvm_diia: (L: комірка<LLVM::TL>, блок: комірка<LLVM::BasicBlock>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>) -> комірка<LLVM::Value>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо аргумент.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення_аргумента = аргумент.дані як ОбʼєктЗначення;
      якщо обʼєкт_значення_аргумента.тип == тип {
        ціль обʼєкт_значення_для_результату = ОбʼєктЗначення {};
        обʼєкт_значення_для_результату.тип = тип;
        обʼєкт_значення_для_результату.llvm_value = llvm_diia(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
        ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
        вернути Результат { обʼєкт_для_результату, помилка = пусто };
      }
    } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
      ціль обʼєкт_значення_для_аргумента = ОбʼєктЗначення {};
      обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
      обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
      ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
      вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, інформація_середовища, місцезнаходження, обʼєкт_для_аргумента);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати операцію");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_додати(обʼєкт_типу: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_додати(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_додати(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = ОбʼєктЗначення {};
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_add(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::add, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_fadd(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::fadd, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати(обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      вернути обʼєкт_значення_додати_add(К.тип_ц8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      вернути обʼєкт_значення_додати_add(К.тип_ц16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      вернути обʼєкт_значення_додати_add(К.тип_ц32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      вернути обʼєкт_значення_додати_add(К.тип_ц64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      вернути обʼєкт_значення_додати_add(К.тип_п8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      вернути обʼєкт_значення_додати_add(К.тип_п16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      вернути обʼєкт_значення_додати_add(К.тип_п32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      вернути обʼєкт_значення_додати_add(К.тип_п64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      вернути обʼєкт_значення_додати_fadd(К.тип_д32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      вернути обʼєкт_значення_додати_fadd(К.тип_д64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_додати(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_додати(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_додати(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_додати(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
      вернути обʼєкт_значення_додати(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_відняти(обʼєкт_типу: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_відняти(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_відняти(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = ОбʼєктЗначення {};
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_sub(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::sub, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_fsub(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::fsub, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_відняти(обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      вернути обʼєкт_значення_додати_sub(К.тип_ц8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      вернути обʼєкт_значення_додати_sub(К.тип_ц16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      вернути обʼєкт_значення_додати_sub(К.тип_ц32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      вернути обʼєкт_значення_додати_sub(К.тип_ц64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      вернути обʼєкт_значення_додати_sub(К.тип_п8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      вернути обʼєкт_значення_додати_sub(К.тип_п16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      вернути обʼєкт_значення_додати_sub(К.тип_п32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      вернути обʼєкт_значення_додати_sub(К.тип_п64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      вернути обʼєкт_значення_додати_fsub(К.тип_д32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      вернути обʼєкт_значення_додати_fsub(К.тип_д64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_відняти(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_відняти(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_відняти(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_відняти(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
      вернути обʼєкт_значення_відняти(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_помножити(обʼєкт_типу: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_помножити(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_помножити(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = ОбʼєктЗначення {};
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_помножити(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_mul(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::mul, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_fmul(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::fmul, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_помножити(обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      вернути обʼєкт_значення_додати_mul(К.тип_ц8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      вернути обʼєкт_значення_додати_mul(К.тип_ц16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      вернути обʼєкт_значення_додати_mul(К.тип_ц32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      вернути обʼєкт_значення_додати_mul(К.тип_ц64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      вернути обʼєкт_значення_додати_mul(К.тип_п8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      вернути обʼєкт_значення_додати_mul(К.тип_п16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      вернути обʼєкт_значення_додати_mul(К.тип_п32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      вернути обʼєкт_значення_додати_mul(К.тип_п64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      вернути обʼєкт_значення_додати_fmul(К.тип_д32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      вернути обʼєкт_значення_додати_fmul(К.тип_д64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_помножити(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_помножити(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_помножити(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_помножити(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
      вернути обʼєкт_значення_помножити(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_поділити(обʼєкт_типу: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_поділити(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_поділити(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = ОбʼєктЗначення {};
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_поділити(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_sdiv(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::sdiv, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_udiv(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::udiv, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_fdiv(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::fdiv, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_поділити(обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      вернути обʼєкт_значення_додати_sdiv(К.тип_ц8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      вернути обʼєкт_значення_додати_sdiv(К.тип_ц16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      вернути обʼєкт_значення_додати_sdiv(К.тип_ц32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      вернути обʼєкт_значення_додати_sdiv(К.тип_ц64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      вернути обʼєкт_значення_додати_udiv(К.тип_п8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      вернути обʼєкт_значення_додати_udiv(К.тип_п16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      вернути обʼєкт_значення_додати_udiv(К.тип_п32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      вернути обʼєкт_значення_додати_udiv(К.тип_п64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      вернути обʼєкт_значення_додати_fdiv(К.тип_д32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      вернути обʼєкт_значення_додати_fdiv(К.тип_д64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_поділити(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_поділити(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_поділити(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_поділити(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
      вернути обʼєкт_значення_поділити(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_поділити_за_модулем(обʼєкт_типу: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_поділити_за_модулем(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_поділити_за_модулем(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = ОбʼєктЗначення {};
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, інформація_середовища.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_поділити_за_модулем(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_srem(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::srem, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_urem(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::urem, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати_frem(тип: комірка<ОбʼєктТипу>, обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    вернути обʼєкт_значення_operation(тип, LLVM::frem, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_поділити_за_модулем(обʼєкт_значення: ОбʼєктЗначення, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      вернути обʼєкт_значення_додати_srem(К.тип_ц8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      вернути обʼєкт_значення_додати_srem(К.тип_ц16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      вернути обʼєкт_значення_додати_srem(К.тип_ц32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      вернути обʼєкт_значення_додати_srem(К.тип_ц64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      вернути обʼєкт_значення_додати_urem(К.тип_п8, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      вернути обʼєкт_значення_додати_urem(К.тип_п16, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      вернути обʼєкт_значення_додати_urem(К.тип_п32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      вернути обʼєкт_значення_додати_urem(К.тип_п64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      вернути обʼєкт_значення_додати_frem(К.тип_д32, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      вернути обʼєкт_значення_додати_frem(К.тип_д64, обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_поділити_за_модулем(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_поділити_за_модулем(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_поділити_за_модулем(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_поділити_за_модулем(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
      вернути обʼєкт_значення_поділити_за_модулем(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  місцева дія обʼєкт_більше(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
//    якщо я.вид == ВидОбʼєктаТипу {
//      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
//      вернути обʼєкт_типу_більше(обʼєкт_типу, К, інформація_середовища, місцезнаходження, аргумент);
//    }
//    якщо я.вид == ВидОбʼєктаДії {
//      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
//      вернути обʼєкт_дії_більше(обʼєкт_дії, К, інформація_середовища, місцезнаходження, аргумент);
//    }
//    якщо я.вид == ВидОбʼєктаЦілі {
//      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
//      вернути обʼєкт_цілі_більше(обʼєкт_цілі, К, інформація_середовища, місцезнаходження, аргумент);
//    }
//    якщо я.вид == ВидОбʼєктаЗначення {
//      ціль обʼєкт_значення = я.дані як ОбʼєктЗначення;
//      вернути обʼєкт_значення_більше(обʼєкт_значення, К, інформація_середовища, місцезнаходження, аргумент);
//    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  місцева дія обʼєкт_менше(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  місцева дія обʼєкт_більше_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше рівно");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  місцева дія обʼєкт_менше_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше рівно");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  місцева дія обʼєкт_рівно(я: Обʼєкт, К: комірка<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось рівно");
    вернути Результат { помилка = помилка_компіляції };
  }
}