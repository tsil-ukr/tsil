взяти визначення Ц;

секція ц {
  дія обʼєкт_типу_додати(обʼєкт_значення: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_додати(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_додати(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = виділити<ОбʼєктЗначення>();
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, блок, середовище, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати(обʼєкт_значення: комірка<ОбʼєктЗначення>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fadd(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fadd(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_додати(я: Обʼєкт, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_додати(обʼєкт_типу, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_додати(обʼєкт_дії, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_додати(обʼєкт_цілі, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як комірка<ОбʼєктЗначення>;
      вернути обʼєкт_значення_додати(обʼєкт_значення, К, блок, середовище, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }
}

секція ц {
  дія обʼєкт_типу_відняти(обʼєкт_значення: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_відняти(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_відняти(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = виділити<ОбʼєктЗначення>();
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, блок, середовище, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_відняти(обʼєкт_значення: комірка<ОбʼєктЗначення>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::sub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fsub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fsub(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_відняти(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_відняти(я: Обʼєкт, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_відняти(обʼєкт_типу, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_відняти(обʼєкт_дії, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_відняти(обʼєкт_цілі, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як комірка<ОбʼєктЗначення>;
      вернути обʼєкт_значення_відняти(обʼєкт_значення, К, блок, середовище, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути Результат { помилка = помилка_компіляції };
  }
}