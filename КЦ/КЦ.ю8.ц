взяти визначення ./КЦ;

зовнішня дія __КЦ__прочитати_файл(виділяч: адреса<біб::Виділяч>, шлях: адреса<КЦ::Шлях>, вихід: адреса<КЦ::Байти>, вихід_успіху: адреса<логічне>);

секція КЦ {
  дія змішати_назву(ключ: Назва, аргумент: невідома_адреса): позитивне {
    змінна змішане: позитивне = 5381;
    змінна п: позитивне = 0;

    поки п < ключ.значення.розмір {
      змішане = (змішане * 33) + позитивне(ключ.значення.дані[п]);
      п += 1;
    }

    вернути змішане;
  }

  дія перед_заміною_субʼєкта(ак: Назва, аз: Обʼєкт, бк: Назва, бз: Обʼєкт, аргумент: невідома_адреса) {
    змінна компілятор = аргумент як адреса<Компілятор>;

    якщо ак.вид == ВидНазвиКопія {
      звільнити_памʼять(компілятор, ак.значення.дані);
    }
  }

  дія перед_видаленням_субʼєкта(ключ: Назва, значення: Обʼєкт, аргумент: невідома_адреса) {
    змінна компілятор = аргумент як адреса<Компілятор>;

    якщо ключ.вид == ВидНазвиКопія {
      звільнити_памʼять(компілятор, ключ.значення.дані);
    }
  }

  зовнішня дія створити_середовище(компілятор: адреса<Компілятор>, зовнішнє: адреса<Середовище>): адреса<Середовище> {
    змінна середовище = виділити<Середовище>(компілятор);
    середовище.компілятор = компілятор;
    середовище.зовнішнє = зовнішнє;
    середовище.субʼєкти = біб::виділити_реєстр<Назва, Обʼєкт>(
      компілятор.виділяч,
      0,
      компілятор,
      змішати_назву,
      перевірити_назви,
      пусто,
      пусто
    );
    вернути середовище;
  }

  зовнішня дія змінити_в_середовищі(середовище: адреса<Середовище>, назва: Назва, обʼєкт: Обʼєкт) {
    біб::змінити_в_реєстрі<Назва, Обʼєкт>(середовище.субʼєкти, назва, обʼєкт);
  }

  зовнішня дія знайти_в_середовищі(середовище: адреса<Середовище>, назва: Назва, вихід: адреса<Обʼєкт>): логічне {
    вернути біб::знайти_в_реєстрі<Назва, Обʼєкт>(середовище.субʼєкти, назва, вихід);
  }

  зовнішня дія знайти_в_середовищі_рекурсивно(середовище: адреса<Середовище>, назва: Назва, вихід: адреса<Обʼєкт>): логічне {
    змінна поточне_середовище = середовище;

    поки поточне_середовище != пусто {
      якщо біб::знайти_в_реєстрі<Назва, Обʼєкт>(поточне_середовище.субʼєкти, назва, вихід) {
        вернути так;
      }

      поточне_середовище = поточне_середовище.зовнішнє;
    }

    вернути ні;
  }

  дія створити_простий_тип(компілятор: адреса<Компілятор>, назва: Назва, пм_тип: адреса<ПМ::Тип>): адреса<ОбʼєктТипу> {
    змінна обʼєкт_типу = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу.вид = ВидОбʼєктаТипуПростий;
    обʼєкт_типу.пм_тип = пм_тип;
    обʼєкт_типу.дані = ДаніОбʼєктаТипуПростий {
      назва = назва
    };
    вернути обʼєкт_типу;
  }

  зовнішня дія створити_тип_адреси(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу> {
    змінна обʼєкт_типу = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу.вид = ВидОбʼєктаТипуАдреса;
    обʼєкт_типу.пм_тип = компілятор.тип_адреса.пм_тип;
    обʼєкт_типу.дані = ДаніОбʼєктаТипуАдреса {
      тип_даних = тип_даних
    };
    вернути обʼєкт_типу;
  }

  зовнішня дія створити_тип_памʼяті(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу> {
    змінна обʼєкт_типу = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу.вид = ВидОбʼєктаТипуПамʼять;
    обʼєкт_типу.пм_тип = компілятор.тип_памʼять.пм_тип;
    обʼєкт_типу.дані = ДаніОбʼєктаТипуПамʼять {
      тип_даних = тип_даних
    };
    вернути обʼєкт_типу;
  }

  зовнішня дія створити_компілятор(виділяч: адреса<біб::Виділяч>): адреса<Компілятор> {
    змінна компілятор = біб::виділити<Компілятор>(виділяч);

    компілятор.виділяч = виділяч;

    компілятор.пм_аркуш = ПМ::створити_аркуш("а1", ПМ::ПРОЦЕСОР_Х86_64, ПМ::СИСТЕМА_ЛІНУКС_ГНУ);

    компілятор.глобальне_середовище = створити_середовище(компілятор, пусто);

    компілятор.перший_обʼєкт_дії = пусто;
    компілятор.останній_обʼєкт_дії = пусто;
    компілятор.перший_обʼєкт_типу = пусто;
    компілятор.останній_обʼєкт_типу = пусто;

    компілятор.тип_ніщо = створити_простий_тип(компілятор, назва_зовнішня("ніщо"), ПМ::отримати_тип_ніщо(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ніщо"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ніщо });

    компілятор.тип_логічне = створити_простий_тип(компілятор, назва_зовнішня("логічне"), ПМ::отримати_тип_б1(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("логічне"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_логічне });

    компілятор.тип_ц8 = створити_простий_тип(компілятор, назва_зовнішня("ц8"), ПМ::отримати_тип_б8(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц8 });

    компілятор.тип_ц16 = створити_простий_тип(компілятор, назва_зовнішня("ц16"), ПМ::отримати_тип_б16(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц16"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц16 });

    компілятор.тип_ц32 = створити_простий_тип(компілятор, назва_зовнішня("ц32"), ПМ::отримати_тип_б32(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц32 });

    компілятор.тип_ц64 = створити_простий_тип(компілятор, назва_зовнішня("ц64"), ПМ::отримати_тип_б64(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц64 });

    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ціле"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц64 });

    компілятор.тип_п8 = створити_простий_тип(компілятор, назва_зовнішня("п8"), ПМ::отримати_тип_б8(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_п8 });

    компілятор.тип_п16 = створити_простий_тип(компілятор, назва_зовнішня("п16"), ПМ::отримати_тип_б16(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п16"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_п16 });

    компілятор.тип_п32 = створити_простий_тип(компілятор, назва_зовнішня("п32"), ПМ::отримати_тип_б32(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_п32 });

    компілятор.тип_п64 = створити_простий_тип(компілятор, назва_зовнішня("п64"), ПМ::отримати_тип_б64(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_п64 });

    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("позитивне"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_п64 });

    компілятор.тип_д32 = створити_простий_тип(компілятор, назва_зовнішня("д32"), ПМ::отримати_тип_д32(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("д32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_д32 });

    компілятор.тип_д64 = створити_простий_тип(компілятор, назва_зовнішня("д64"), ПМ::отримати_тип_д64(компілятор.пм_аркуш));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("д64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_д64 });

    компілятор.обʼєкт_значення_так = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_аркуш, так) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("так"), Обʼєкт { ВидОбʼєктаТип, компілятор.обʼєкт_значення_так });

    компілятор.обʼєкт_значення_ні = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_аркуш, ні) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ні"), Обʼєкт { ВидОбʼєктаТип, компілятор.обʼєкт_значення_ні });

    компілятор.обʼєкт_значення_пусто = ОбʼєктЗначення { компілятор.тип_адреса, ПМ::отримати_значення_пусто(компілятор.пм_аркуш) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("пусто"), Обʼєкт { ВидОбʼєктаЗначення, компілятор.обʼєкт_значення_пусто });

    вернути компілятор;
  }

  зовнішня дія знищити_компілятор(компілятор: адреса<Компілятор>) {
    // потім: знищити всі реєстри, накопичувачі, обʼєкти і тд
    біб::звільнити(компілятор.виділяч, компілятор);
  }

  дія система_КД_виділити_сиру_памʼять(система: адреса<КД::Система>, розмір: позитивне): памʼять<п8> {
    змінна компілятор = система.дані як адреса<Компілятор>;
    вернути виділити_памʼять<п8>(компілятор, розмір);
  }

  дія система_КД_перевиділити_сиру_памʼять(система: адреса<КД::Система>, значення: памʼять<п8>, новий_розмір: позитивне): памʼять<п8> {
    змінна компілятор = система.дані як адреса<Компілятор>;
    перевиділити_памʼять<п8>(компілятор, значення, новий_розмір);
  }

  дія система_КД_звільнити_сиру_памʼять(система: адреса<КД::Система>, значення: невідома_памʼять) {
    змінна компілятор = система.дані як адреса<Компілятор>;
    звільнити_памʼять(компілятор, значення);
  }

  зовнішня дія перекодувати_т8_в_ю8_з_місцезнаходженнями(компілятор: адреса<Компілятор>, значення: ю8, вихід: адреса<т8>, вихід_місцезнаходжень: адреса<КД::Місцезнаходження>): логічне {
    змінна система_КД = КД::Система {
      дані = компілятор,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    вернути КД::перекодувати_ю8_в_т8_з_місцезнаходженнями(система_КД::адреса, значення, вихід, вихід_місцезнаходжень, ні);
  }

  зовнішня дія отримати_т8_з_ю8(компілятор: адреса<Компілятор>, значення: ю8): т8 {
    змінна результат = т8 { 0, пусто };

    змінна система_КД = КД::Система {
      дані = компілятор,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    якщо КД::перекодувати_ю8_в_т8(система_КД::адреса, значення, результат::адреса, ні) == ні {
      // потім: обробити помилку
    }

    вернути результат;
  }

  зовнішня дія отримати_ю8_з_т8(компілятор: адреса<Компілятор>, значення: т8): ю8 {
    змінна результат = ю8 { 0, пусто };

    змінна система_КД = КД::Система {
      дані = компілятор,
      виділити_сиру_памʼять = система_КД_виділити_сиру_памʼять,
      перевиділити_сиру_памʼять = система_КД_перевиділити_сиру_памʼять,
      звільнити_сиру_памʼять = система_КД_звільнити_сиру_памʼять
    };

    якщо КД::перекодувати_т8_в_ю8(система_КД::адреса, значення, результат::адреса, ні) == ні {
      // потім: обробити помилку
    }

    вернути результат;
  }

  зовнішня дія прочитати_файл(компілятор: адреса<Компілятор>, шлях: Шлях, вихід: адреса<Байти>): логічне {
    змінна успіх = ні;
    __КЦ__прочитати_файл(компілятор.виділяч, шлях::адреса, вихід, успіх::адреса);
    вернути успіх;
  }

  зовнішня дія скомпілювати_текст_коду(компілятор: адреса<Компілятор>, текст_коду: адреса<ТекстКоду>, вихід_помилки: адреса<адреса<Помилка>>): логічне {
    змінна розбирач = КЦ::розбирач::створити(компілятор.виділяч);

    змінна успіх_розбору = ні;
    змінна розібраний_текст = РозібранийТекст {
      текст_коду = текст_коду,
      слова = КЦ::розбирач::Слова { 0, пусто, 0 },
      сполуки = КЦ::розбирач::Сполуки { 0, пусто, 0 }
    };
    змінна помилка_розбору_на_слова: КЦ::розбирач::ПомилкаРозборуНаСлова;
    змінна помилка_розбору_на_сполуки: КЦ::розбирач::ПомилкаРозборуНаСполуки;

    успіх_розбору = КЦ::розбирач::розібрати_на_слова(
      розбирач,
      т8 { текст_коду.значення.розмір, текст_коду.значення.дані },
      розібраний_текст.слова::адреса,
      помилка_розбору_на_слова::адреса
    );
    якщо успіх_розбору == ні {
      змінна позиція_в_тексті = помилка_розбору_на_слова.позиція.позиція_в_тексті;
      змінна рядок = помилка_розбору_на_слова.позиція.рядок;
      змінна стовпець = помилка_розбору_на_слова.позиція.стовпець;

      вихід_помилки::вміст = створити_помилку(
        компілятор,
        "Неочікуваний символ.",
        створити_місцезнаходження_помилки(компілятор, текст_коду, позиція_в_тексті, рядок, стовпець)
      );

      вернути ні;
    }

    успіх_розбору = КЦ::розбирач::розібрати_слова_на_сполуки(розбирач, розібраний_текст.слова, розібраний_текст.сполуки::адреса, помилка_розбору_на_сполуки::адреса);
    якщо успіх_розбору == ні {
      змінна позиція_в_тексті = розібраний_текст.слова.дані[помилка_розбору_на_сполуки.позиція_слова].позиція_початку.позиція_в_тексті;
      змінна рядок = розібраний_текст.слова.дані[помилка_розбору_на_сполуки.позиція_слова].позиція_початку.рядок;
      змінна стовпець = розібраний_текст.слова.дані[помилка_розбору_на_сполуки.позиція_слова].позиція_початку.стовпець;

      вихід_помилки::вміст = створити_помилку(
        компілятор,
        "Неочікуване слово.",
        створити_місцезнаходження_помилки(компілятор, текст_коду, позиція_в_тексті, рядок, стовпець)
      );

      вернути ні;
    }

    змінна результат_компіляції_тіла = скомпілювати_тіло(
      компілятор,
      Контекст {
        розібраний_текст = розібраний_текст::адреса,
        середовище = компілятор.глобальне_середовище,
        обʼєкт_секції = пусто,
        кк_дії = пусто,
        кк_виконання_шаблону = пусто
      },
      розібраний_текст.сполуки,
      розібраний_текст.сполуки.дані[0].місцезнаходження
    );

    якщо результат_компіляції_тіла.помилка != пусто {
      вихід_помилки::вміст = результат_компіляції_тіла.помилка;
      вернути ні;
    }

    // ...

    вернути так;
  }

  зовнішня дія взяти_файл_ю8(компілятор: адреса<Компілятор>, шлях: Шлях, вихід_помилки: адреса<адреса<Помилка>>): логічне {
    змінна код = Байти { 0, пусто };

    якщо прочитати_файл(компілятор, шлях, код::адреса) == ні {
      вихід_помилки::вміст = створити_помилку(компілятор, "Не вдалось прочитати файл.", пусто);

      вернути ні;
    }

    змінна текст_коду = створити_текст_коду_з_ю8(компілятор, шлях, ю8 { код.розмір, код.дані });

    вернути скомпілювати_текст_коду(компілятор, текст_коду, вихід_помилки);
  }

  зовнішня дія отримати_лл(компілятор: адреса<Компілятор>, вихід: адреса<ю8>, вихід_помилки: адреса<адреса<Помилка>>): логічне {
    ПМ::отримати_лл(компілятор.пм_аркуш, вихід.розмір::адреса, вихід.дані::адреса);

    вернути так;
  }

  зовнішня дія спробувати_розібрати_ціле_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<ц64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне {
    вихід::вміст = ціле(0)-2025;
    вернути так;
  }

  зовнішня дія спробувати_розібрати_позитивне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<п64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне {
    вихід::вміст = 123;
    вернути так;
  }

  зовнішня дія спробувати_розібрати_дійсне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<д64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне {
    вихід::вміст = 3.14;
    вернути так;
  }

  зовнішня дія перетворити_позитивне_на_т8(компілятор: адреса<Компілятор>, значення: позитивне, вихід: адреса<т8>): логічне {
    вернути ні;
  }
}