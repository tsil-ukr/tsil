взяти визначення Ц;

секція ц {
  місцева дія обʼєкт_типу_додати(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_відняти(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_помножити(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_поділити(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_поділити_за_модулем(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_більше(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_менше(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_більше_рівно(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_менше_рівно(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_рівно(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_не_рівно(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось не_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_зсунути_вліво(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вліво");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_зсунути_вправо(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вправо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_зсунути_вправо_знаковий(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вправо_знаковий");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_ді(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось ді");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_дабо(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось дабо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_вабо(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось вабо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_як(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_отримати_властивість(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    якщо перевірити_чи_тип_повний(К, обʼєкт_типу) == ні {
      ціль помилка_компіляції = виділити_помилку_компіляції_виявлено_неповний_тип(місцезнаходження, Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу });
      вернути результат_помилка(помилка_компіляції);
    }
    якщо назва == К.БН.розмір {
      ціль розмір_типу = дізнатись_розмір_типу(К, обʼєкт_типу);
//      біб::друк_позитивне(розмір_типу);
      ціль розмір_типу_як_ю8 = різне::числа::перетворити_позитивне_на_ю8(розмір_типу);
//      біб::друк_ю8(розмір_типу_як_ю8);
      ціль обʼєкт_сирого_значення = ОбʼєктСирогоЗначення::ЧислоЮ8 { розмір_типу_як_ю8 };
      вернути Результат { Обʼєкт { ВидОбʼєктаСиреЗначення, дані = обʼєкт_сирого_значення як ОбʼєктСирогоЗначення }, помилка = пусто };
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_отримати_властивість_секції(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    якщо обʼєкт_типу.вид == ВидТипуПерелік {
      змінна ціль пе: позитивне = 0;
      поки пе < обʼєкт_типу.елементи_переліку.розмір {
        ціль обʼєкт_типу_елемента_переліку = обʼєкт_типу.елементи_переліку.дані[пе];
        якщо обʼєкт_типу_елемента_переліку.назва != пусто {
          якщо назва == обʼєкт_типу_елемента_переліку.назва {
            вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_елемента_переліку }, помилка = пусто };
          }
        }
        пе += 1;
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість_секції");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_отримати_за_позицією(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_за_позицією");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_виконати(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    якщо кількість_аргументів == 1 {
      ціль перший_аргумент = аргументи[0];
      ціль результат_як_значення = отримати_як_значення(К, інформація_середовища, місцезнаходження, перший_аргумент.обʼєкт, обʼєкт_типу);
      якщо результат_як_значення.помилка != пусто {
        вернути результат_помилка(результат_як_значення.помилка);
      }
      ціль обʼєкт_значення = результат_як_значення.обʼєкт_значення;
      якщо обʼєкт_значення.тип == обʼєкт_типу {
        вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
      якщо обʼєкт_типу == К.тип_логічне {
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_ц8 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_ц16 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_ц32 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_ц64 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_п8 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_п16 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_п32 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_п64 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_д32 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fptrunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
      якщо обʼєкт_типу == К.тип_д64 {
        якщо обʼєкт_значення.тип == К.тип_логічне {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_ц64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п8 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п16 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_п64 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип == К.тип_д32 {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::fpext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
          обʼєкт_значення.тип = обʼєкт_типу;
          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
        }
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_виконати_шаблон(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    якщо обʼєкт_типу == К.тип_адреса {
      якщо кількість_аргументів != 1 {
        ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, кількість_аргументів);
        вернути результат_помилка(помилка_компіляції);
      }
      ціль результат_компіляції_значення_аргумента = отримати_як_тип(К, інформація_середовища, аргументи[0].місцезнаходження, аргументи[0].обʼєкт, ні);
      якщо результат_компіляції_значення_аргумента.помилка != пусто {
        вернути результат_помилка(результат_компіляції_значення_аргумента.помилка);
      }
      ціль обʼєкт_типу_комірки = виділити_тип_адреси(К, результат_компіляції_значення_аргумента.обʼєкт_типу);
      вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_комірки }, помилка = пусто };
    }
    якщо обʼєкт_типу == К.тип_памʼять {
      якщо кількість_аргументів != 1 {
        ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, кількість_аргументів);
        вернути результат_помилка(помилка_компіляції);
      }
      ціль результат_компіляції_значення_аргумента = отримати_як_тип(К, інформація_середовища, аргументи[0].місцезнаходження, аргументи[0].обʼєкт, ні);
      якщо результат_компіляції_значення_аргумента.помилка != пусто {
        вернути результат_помилка(результат_компіляції_значення_аргумента.помилка);
      }
      ціль обʼєкт_типу_комірки = виділити_тип_памʼяті(К, результат_компіляції_значення_аргумента.обʼєкт_типу);
      вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_комірки }, помилка = пусто };
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати_шаблон");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_змінити_властивість(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_властивість");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_змінити_в_секції(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_в_секції");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_змінити_за_позицією(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_за_позицією");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_типу_унарний_мінус(обʼєкт_типу: адреса<ОбʼєктТипу>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось унарний_мінус");
    вернути результат_помилка(помилка_компіляції);
  }
}