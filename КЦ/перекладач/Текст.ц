взяти визначення КЦ;

секція КЦ {
  місцева дія скомпілювати_текст(компілятор: адреса<Компілятор>, контекст: Контекст, дані_тексту: розбирач::ДаніСполукиТекст, місцезнаходження: розбирач::Місцезнаходження) -> РезультатОбʼєкта {
    змінна значення_т8 = т8 { 0, пусто };
    
    якщо не розбирач::отримати_значення_слова(
      ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_тексту.позиція_слова],
      значення_т8::адреса
    ) {
      вернути РезультатОбʼєкта {
        помилка = створити_помилку(
          компілятор,
          "Не вдалось отримати текст.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        ),
        ...
      };
    }
    значення_т8.розмір -= 2;
    значення_т8.дані = значення_т8.дані[1]::адреса як памʼять<п8>;

    // потім: звільнити памʼять значення_т8

    змінна тип_значення = компілятор.тип_т8;
    змінна розмір_значення: природне = 0;
    змінна дані_значення: памʼять<п8> = пусто;

    якщо дані_тексту.префікс.заповнено {
      змінна префікс_т8 = т8 { 0, пусто };
      
      якщо не розбирач::отримати_значення_слова(
        ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_тексту.префікс.значення.позиція_слова],
        префікс_т8::адреса
      ) {
        вернути РезультатОбʼєкта {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось отримати префікс тексту.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          ),
          ...
        };
      }

      // потім: звільнити памʼять префікс_т8

      якщо біб::перевірити_чи_т8_рівні(префікс_т8, константа_Т8_т8()) {
        змінна оброблене_значення_т8 = т8 { 0, пусто };
        біб::обробити_екранізації_в_т8(
          компілятор.виділяч,
          значення_т8,
          ні,
          оброблене_значення_т8::адреса,
          пусто,
          пусто
        );
        розмір_значення = оброблене_значення_т8.розмір;
        дані_значення = оброблене_значення_т8.дані;
      } інакше якщо біб::перевірити_чи_т8_рівні(префікс_т8, константа_Т8_ю8()) {
        змінна значення_ю8 = ю8 { 0, пусто };
        
        якщо не розбирач::отримати_значення_слова_ю8(
          ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
          контекст.розібраний_текст.слова.дані[дані_тексту.позиція_слова],
          значення_ю8::адреса
        ) {
          вернути РезультатОбʼєкта {
            помилка = створити_помилку(
              компілятор,
              "Не вдалось отримати текст.",
              створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
            ),
            ...
          };
        }
        
        значення_ю8.розмір -= 2;
        значення_ю8.дані = значення_ю8.дані[1]::адреса як памʼять<п8>;

        змінна оброблене_значення_ю8 = ю8 { 0, пусто };
        біб::обробити_екранізації_в_ю8(
          компілятор.виділяч,
          значення_ю8,
          ні,
          оброблене_значення_ю8::адреса,
          пусто,
          пусто
        );
        тип_значення = компілятор.тип_ю8;
        розмір_значення = оброблене_значення_ю8.розмір;
        дані_значення = оброблене_значення_ю8.дані;
      } інакше {
        вернути РезультатОбʼєкта {
          помилка = створити_помилку(
            компілятор,
            "Неможливо створити текст.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          ),
          ...
        };
      }
    } інакше {
      змінна оброблене_значення_т8 = т8 { 0, пусто };
      біб::обробити_екранізації_в_т8(
        компілятор.виділяч,
        значення_т8,
        ні,
        оброблене_значення_т8::адреса,
        пусто,
        пусто
      );
      розмір_значення = оброблене_значення_т8.розмір;
      дані_значення = оброблене_значення_т8.дані;
    }

    змінна пм_значення_розміру = ПМ::створити_п64(компілятор.пм_модуль, розмір_значення);
    змінна пм_значення_даних: адреса<ПМ::Значення> = пусто;
    якщо розмір_значення == 0 {
      пм_значення_даних = ПМ::отримати_значення_пусто(компілятор.пм_модуль);
    } інакше {
      пм_значення_даних = ПМ::створити_константу_даних(компілятор.пм_модуль, розмір_значення, дані_значення);
    }

    змінна пм_значення = ПМ::вказівка_накопичити(
      контекст.кк_дії.крок_накопичень.пм_крок,
      тип_значення.пм_тип
    );

    змінна пм_позиції_адреси_розміру = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 2);
    пм_позиції_адреси_розміру[0] = ПМ::створити_п32(компілятор.пм_модуль, 0);
    пм_позиції_адреси_розміру[1] = ПМ::створити_п32(компілятор.пм_модуль, 0);
    змінна пм_значення_адреси_розміру = ПМ::вказівка_отримати_адресу_елемента(
      контекст.кк_дії.поточний_крок.пм_крок,
      тип_значення.пм_тип,
      пм_значення,
      2,
      пм_позиції_адреси_розміру
    );
    звільнити_памʼять(компілятор, пм_позиції_адреси_розміру);
    ПМ::вказівка_записати(
      контекст.кк_дії.поточний_крок.пм_крок,
      пм_значення_розміру,
      пм_значення_адреси_розміру
    );

    змінна пм_позиції_адреси_даних = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 2);
    пм_позиції_адреси_даних[0] = ПМ::створити_п32(компілятор.пм_модуль, 0);
    пм_позиції_адреси_даних[1] = ПМ::створити_п32(компілятор.пм_модуль, 1);
    змінна пм_значення_адреси_даних = ПМ::вказівка_отримати_адресу_елемента(
      контекст.кк_дії.поточний_крок.пм_крок,
      тип_значення.пм_тип,
      пм_значення,
      2,
      пм_позиції_адреси_даних
    );
    звільнити_памʼять(компілятор, пм_позиції_адреси_даних);
    ПМ::вказівка_записати(
      контекст.кк_дії.поточний_крок.пм_крок,
      пм_значення_даних,
      пм_значення_адреси_даних
    );

    вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, ОбʼєктНезавантаженогоЗначення { тип_значення, пм_значення } }, помилка = пусто };
  }
}