взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_поки(компілятор: адреса<Компілятор>, контекст: Контекст, дані_поки: розбирач::ДаніСполукиПоки, місцезнаходження: розбирач::Місцезнаходження): Результат {
    змінна пм_крок_умови = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "умова_поки");

    ПМ::вказівка_стрибнути(контекст.кк_дії.поточний_крок.пм_крок, пм_крок_умови);

    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("умова_поки"),
      контекст.кк_дії.обʼєкт_дії,
      пм_крок_умови
    };

    змінна результат_компіляції_умови = скомпілювати_значення_як_значення(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = контекст.середовище,
        обʼєкт_секції = контекст.обʼєкт_секції,
        кк_дії = контекст.кк_дії
      },
      дані_поки.умова,
      компілятор.тип_логічне
    );

    якщо результат_компіляції_умови.помилка != пусто {
      вернути Результат { помилка = результат_компіляції_умови.помилка };
    }

    змінна обʼєкт_значення_умови = результат_компіляції_умови.обʼєкт_значення;
    якщо обʼєкт_значення_умови.тип != компілятор.тип_логічне {
      вернути Результат {
        помилка = створити_помилку(
          компілятор,
          "Умова має бути логічним.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    змінна пм_крок_тіла_поки = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "тіло_поки");
    змінна пм_крок_виходу_з_тіла_поки = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "тіло_поки_вихід");

    ПМ::вказівка_стрибнути_якщо(пм_крок_умови, обʼєкт_значення_умови.пм_значення, пм_крок_тіла_поки, пм_крок_виходу_з_тіла_поки);

    змінна середовище_поки = створити_середовище(компілятор, контекст.середовище);

    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("тіло_поки"),
      контекст.кк_дії.обʼєкт_дії,
      пм_крок_тіла_поки
    };

    змінна результат_тіла = скомпілювати_тіло(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = середовище_поки,
        обʼєкт_секції = контекст.обʼєкт_секції,
        кк_дії = контекст.кк_дії
      },
      дані_поки.тіло,
      місцезнаходження
    );

    якщо результат_тіла.помилка != пусто {
      вернути Результат { помилка = результат_тіла.помилка };
    }

    ПМ::вказівка_стрибнути(контекст.кк_дії.поточний_крок.пм_крок, пм_крок_умови);

    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("тіло_поки_вихід"),
      контекст.кк_дії.обʼєкт_дії,
      пм_крок_виходу_з_тіла_поки
    };

    вернути Результат { помилка = пусто };
  }
}