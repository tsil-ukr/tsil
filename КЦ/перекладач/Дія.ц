взяти визначення КЦ;

секція КЦ {
  місцева дія скомпілювати_параметри_дії(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_дії: адреса<ОбʼєктДії>, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів {
    змінна параметри = Параметри { 0, пусто, 0 };

    змінна п: позитивне = 0;
    поки п < параметри_розбирача.розмір {
      змінна параметр_розбирача = параметри_розбирача.дані[п];

      змінна назва_т8 = т8 { 0, пусто };
      змінна місцезнаходження_назви = Місцезнаходження { пусто, 0 };

      якщо параметр_розбирача.ідентифікатор.заповнено == позитивне(так) {
        якщо не розбирач::отримати_значення_слова(
          ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
          контекст.розібраний_текст.слова.дані[параметр_розбирача.ідентифікатор.значення.позиція_слова],
          назва_т8::адреса
        ) {
          знищити_параметри(компілятор, параметри);

          вернути РезультатПараметрів {
            помилка = створити_помилку(
              компілятор,
              "Не вдалось отримати назву параметра дії.",
              створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, параметр_розбирача.ідентифікатор.значення.позиція_слова)
            ),
            ...
          };
        }
        місцезнаходження_назви = Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.ідентифікатор.значення.позиція_слова };
      }

      змінна назва = назва_без_копіювання(компілятор, назва_т8);

      змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, параметр_розбирача.тип, так);

      якщо результат_типу.помилка != пусто {
        знищити_параметри(компілятор, параметри);

        вернути РезультатПараметрів { ..., помилка = результат_типу.помилка };
      }

      якщо обʼєкт_дії != пусто {
        якщо обʼєкт_дії.видимість == ВидимістьЗовнішня {
          змінна розмір = дізнатись_розмір_типу(компілятор, результат_типу.обʼєкт_типу);

          якщо розмір > 8 {
            вернути РезультатПараметрів {
              помилка = створити_помилку(
                компілятор,
                "Параметр зовнішньої дії повинен мати розмір не більше 8 байт.",
                створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, параметр_розбирача.ідентифікатор.значення.позиція_слова)
              ),
              ...
            };
          }
        }
      }

      покласти_параметр(
        компілятор,
        параметри::адреса,
        Параметр {
          назва,
          результат_типу.обʼєкт_типу,
          місцезнаходження_назви,
          Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.тип.місцезнаходження.позиція_початкового_слова }
        }
      );

      п += 1;
    }

    вернути РезультатПараметрів {
      параметри,
      помилка = пусто
    };
  }

  місцева дія скомпілювати_голову_дії(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    змінна назва_т8 = т8 { 0, пусто };
    змінна місцезнаходження_назви = Місцезнаходження { пусто, 0 };

    якщо дані_дії.ідентифікатор.заповнено == позитивне(так) {
      якщо не розбирач::отримати_значення_слова(
        ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_дії.ідентифікатор.значення.позиція_слова],
        назва_т8::адреса
      ) {
        вернути РезультатОбʼєктаДії {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось отримати назву дії.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          ),
          ...
        };
      }
      місцезнаходження_назви = Місцезнаходження { контекст.розібраний_текст, дані_дії.ідентифікатор.значення.позиція_слова };
    }

    змінна назва = назва_без_копіювання(компілятор, назва_т8);

    змінна обʼєкт_дії = виділити_обʼєкт_дії(компілятор);
    обʼєкт_дії.місцезнаходження = Місцезнаходження { контекст.розібраний_текст, місцезнаходження.позиція_початкового_слова };

    якщо дані_дії.видимість == розбирач::ВИДИМІСТЬ_ВНУТРІШНЯ {
      обʼєкт_дії.видимість = ВидимістьВнутрішня;
    } інакше якщо дані_дії.видимість == розбирач::ВИДИМІСТЬ_МІСЦЕВА {
      обʼєкт_дії.видимість = ВидимістьМісцева;
    } інакше якщо дані_дії.видимість == розбирач::ВИДИМІСТЬ_ЗОВНІШНЯ {
      обʼєкт_дії.видимість = ВидимістьЗовнішня;
    } інакше {
      вернути РезультатОбʼєктаДії {
        помилка = створити_помилку(
          компілятор,
          "Неочікувана видимість дії.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        ),
        ...
      };
    }

    обʼєкт_дії.назва = назва;
    обʼєкт_дії.місцезнаходження_назви = місцезнаходження_назви;

    якщо назва.значення.розмір > 0 {
      обʼєкт_дії.повна_назва = назва_без_копіювання(компілятор, отримати_повну_назву_в_контексті(компілятор, контекст, назва.значення));
    }

    змінна результат_параметрів = скомпілювати_параметри_дії(
      компілятор,
      контекст,
      обʼєкт_дії,
      дані_дії.параметри,
      місцезнаходження
    );

    якщо результат_параметрів.помилка != пусто {
      вернути РезультатОбʼєктаДії { помилка = результат_параметрів.помилка, ... };
    }

    обʼєкт_дії.параметри = результат_параметрів.параметри;

    якщо дані_дії.тип_результату == пусто {
      обʼєкт_дії.тип_результату = компілятор.тип_ніщо;

      обʼєкт_дії.місцезнаходження_типу_результату = Місцезнаходження { пусто, 0 };
    } інакше {
      змінна результат_типу = скомпілювати_значення_як_тип(
        компілятор,
        контекст,
        дані_дії.тип_результату,
        так
      );

      якщо результат_типу.помилка != пусто {
        вернути РезультатОбʼєктаДії { помилка = результат_типу.помилка, ... };
      }

      якщо обʼєкт_дії.видимість == ВидимістьЗовнішня {
        змінна розмір = дізнатись_розмір_типу(компілятор, результат_типу.обʼєкт_типу);

        якщо розмір > 8 {
          вернути РезультатОбʼєктаДії {
            помилка = створити_помилку(
              компілятор,
              "Результат зовнішньої дії повинен мати розмір не більше 8 байт.",
              створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, дані_дії.тип_результату.місцезнаходження)
            ),
            ...
          };
        }
      }


      обʼєкт_дії.тип_результату = результат_типу.обʼєкт_типу;

      обʼєкт_дії.місцезнаходження_типу_результату = Місцезнаходження { контекст.розібраний_текст, дані_дії.тип_результату.місцезнаходження.позиція_початкового_слова };
    }

    вернути РезультатОбʼєктаДії { обʼєкт_дії, помилка = пусто };
  }

  місцева дія скомпілювати_тіло_дії(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_дії: адреса<ОбʼєктДії>, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла {
    змінна кк_дії = виділити<КонтекстКомпіляціїДії>(компілятор);

    кк_дії.обʼєкт_дії = обʼєкт_дії;
    кк_дії.крок_накопичень = Крок { отримати_назву(компілятор, константа_Т8_накопичення()), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, отримати_назву(компілятор, константа_Т8_накопичення())) };

    якщо обʼєкт_дії.тип_результату == компілятор.тип_ніщо {
      кк_дії.значення_вернути = ОбʼєктНезавантаженогоЗначення { компілятор.тип_ніщо, пусто };
    } інакше {
      кк_дії.значення_вернути = ОбʼєктНезавантаженогоЗначення {
        обʼєкт_дії.тип_результату,
        ПМ::вказівка_накопичити(кк_дії.крок_накопичень.пм_крок, обʼєкт_дії.тип_результату.пм_тип)
      };
    }

    кк_дії.крок_вернути = Крок { отримати_назву(компілятор, константа_Т8_вихід()), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, отримати_назву(компілятор, константа_Т8_вихід())) };
    кк_дії.поточний_крок = Крок { отримати_назву(компілятор, константа_Т8_початок()), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, отримати_назву(компілятор, константа_Т8_початок())) };

    змінна перший_крок = кк_дії.поточний_крок;

    змінна середовище_дії = створити_середовище_дії(компілятор, контекст.середовище, обʼєкт_дії);

    змінна п: позитивне = 0;

    поки п < обʼєкт_дії.параметри.розмір {
      змінна параметр = обʼєкт_дії.параметри.дані[п];

      якщо параметр.назва.значення.розмір > 0 {
        змінна пм_значення_аргумента = ПМ::отримати_значення_аргумента_інструкції(обʼєкт_дії.пм_інструкція, п);
        змінна пм_накопичене_значення_аргумента = ПМ::вказівка_накопичити(кк_дії.крок_накопичень.пм_крок, параметр.тип.пм_тип);
        ПМ::вказівка_записати(кк_дії.крок_накопичень.пм_крок, пм_значення_аргумента, пм_накопичене_значення_аргумента);

        змінити_в_середовищі(
          середовище_дії,
          параметр.назва,
          Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, ОбʼєктНезавантаженогоЗначення { параметр.тип, пм_накопичене_значення_аргумента } }
        );
      }

      п += 1;
    }

    змінна результат_тіла = скомпілювати_тіло(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = середовище_дії,
        кк_дії = кк_дії
      },
      тіло,
      місцезнаходження
    );

    якщо результат_тіла.помилка != пусто {
      звільнити(компілятор, кк_дії);

      вернути РезультатКомпіляціїТіла { помилка = результат_тіла.помилка };
    }

    п = 0;

    поки п < обʼєкт_дії.стрибки.розмір {
      змінна стрибок = обʼєкт_дії.стрибки.дані[п];

      змінна крок_знайдено = ні;
      змінна пп: позитивне = 0;

      поки пп < обʼєкт_дії.кроки.розмір {
        змінна крок = обʼєкт_дії.кроки.дані[пп];

        якщо стрибок.назва == крок.назва {
          крок_знайдено = так;

          ПМ::змінити_крок_стрибка(стрибок.пм_стрибок, крок.пм_крок);
        }

        пп += 1;
      }

      якщо крок_знайдено == ні {
        звільнити(компілятор, кк_дії);

        вернути РезультатКомпіляціїТіла {
          помилка = створити_помилку_субʼєкт_не_визначено(
            компілятор,
            Місцезнаходження { контекст.розібраний_текст, стрибок.місцезнаходження.позиція_початкового_слова },
            стрибок.назва.значення
          )
        };
      }

      п += 1;
    }

    ПМ::вказівка_стрибнути(кк_дії.крок_накопичень.пм_крок, перший_крок.пм_крок);

    якщо ПМ::перевірити_чи_крок_закінчується_стрибком(кк_дії.поточний_крок.пм_крок) == ні {
      ПМ::вказівка_стрибнути(кк_дії.поточний_крок.пм_крок, кк_дії.крок_вернути.пм_крок);
    }

    якщо кк_дії.значення_вернути.тип == компілятор.тип_ніщо {
      ПМ::вказівка_вернути(кк_дії.крок_вернути.пм_крок);
    } інакше {
      змінна пм_значення = ПМ::вказівка_прочитати(кк_дії.крок_вернути.пм_крок, кк_дії.значення_вернути.тип.пм_тип, кк_дії.значення_вернути.пм_значення);
      ПМ::вказівка_вернути_значення(кк_дії.крок_вернути.пм_крок, пм_значення);
    }

    звільнити(компілятор, кк_дії);

    вернути РезультатКомпіляціїТіла { помилка = пусто };
  }

  місцева дія перевірити_голови_дії(компілятор: адреса<Компілятор>, контекст: Контекст, існуюча_голова: адреса<ОбʼєктДії>, голова_на_перевірку: адреса<ОбʼєктДії>, місцезнаходження: розбирач::Місцезнаходження): Результат {
    якщо існуюча_голова.видимість != голова_на_перевірку.видимість {
      вернути Результат {
        помилка = створити_помилку_видимість_дії_не_відповідає_задекларованій(
          компілятор,
          Місцезнаходження { контекст.розібраний_текст, місцезнаходження.позиція_початкового_слова },
          існуюча_голова.видимість,
          голова_на_перевірку.видимість
        )
      };
    }

    якщо існуюча_голова.параметри.розмір != голова_на_перевірку.параметри.розмір {
      вернути Результат {
        помилка = створити_помилку_кількість_параметрів_дії_не_відповідає_задекларованій(
          компілятор,
          Місцезнаходження { контекст.розібраний_текст, місцезнаходження.позиція_початкового_слова },
          існуюча_голова.параметри.розмір,
          голова_на_перевірку.параметри.розмір
        )
      };
    }

    змінна п: позитивне = 0;

    поки п < існуюча_голова.параметри.розмір {
      якщо перевірити_тип(компілятор, існуюча_голова.параметри.дані[п].тип, голова_на_перевірку.параметри.дані[п].тип) == ні {
        вернути Результат {
          помилка = створити_помилку_тип_параметра_дії_не_відповідає_задекларованому(
            компілятор,
            голова_на_перевірку.параметри.дані[п].місцезнаходження_типу,
            існуюча_голова.параметри.дані[п].назва.значення,
            існуюча_голова.параметри.дані[п].тип,
            голова_на_перевірку.параметри.дані[п].тип
          )
        };
      }

      п += 1;
    }

    якщо перевірити_тип(компілятор, існуюча_голова.тип_результату, голова_на_перевірку.тип_результату) == ні {
      змінна місцезнаходження_типу = голова_на_перевірку.місцезнаходження_типу_результату;
      якщо місцезнаходження_типу.розібраний_текст == пусто {
        місцезнаходження_типу = голова_на_перевірку.місцезнаходження;
      }

      вернути Результат {
        помилка = створити_помилку_тип_результату_дії_не_відповідає_задекларованому(
          компілятор,
          місцезнаходження_типу,
          існуюча_голова.тип_результату,
          голова_на_перевірку.тип_результату
        )
      };
    }

    вернути Результат { пусто };
  }

  місцева дія скомпілювати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, обʼєкт_дії: адреса<ОбʼєктДії>, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    якщо обʼєкт_дії == пусто {
      змінна результат_голови = скомпілювати_голову_дії(
        компілятор,
        контекст,
        дані_дії,
        місцезнаходження
      );
      якщо результат_голови.помилка != пусто {
        вернути РезультатОбʼєктаДії { помилка = результат_голови.помилка, ... };
      }

      обʼєкт_дії = результат_голови.обʼєкт_дії;

      змінна видимість_інструкції: позитивне = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
      якщо обʼєкт_дії.видимість == ВидимістьВнутрішня {
        видимість_інструкції = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
      } інакше якщо обʼєкт_дії.видимість == ВидимістьМісцева {
        видимість_інструкції = ПМ::ВИДИМІСТЬ_МІСЦЕВА;
      } інакше якщо обʼєкт_дії.видимість == ВидимістьЗовнішня {
        видимість_інструкції = ПМ::ВИДИМІСТЬ_ЗОВНІШНЯ;
      } інакше {
        вернути РезультатОбʼєктаДії {
          ...,
          помилка = створити_помилку(
            компілятор,
            "Неочікувана видимість дії.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          )
        };
      }

      якщо контекст.кк_дії != пусто {
        якщо видимість_інструкції != ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ {
          вернути РезультатОбʼєктаДії {
            ...,
            помилка = створити_помилку(
              компілятор,
              "Неочікувана видимість дії.",
              створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
            )
          };
        }
      }

      змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
      змінна п: позитивне = 0;
      поки п < обʼєкт_дії.параметри.розмір {
        ПМ::покласти_параметр(
          компілятор.пм_модуль,
          пм_параметри::адреса,
          ПМ::Параметр { обʼєкт_дії.параметри.дані[п].тип.пм_тип }
        );
        п += 1;
      }

      обʼєкт_дії.пм_інструкція = ПМ::створити_інструкцію(
        компілятор.пм_модуль,
        видимість_інструкції,
        обʼєкт_дії.повна_назва,
        пм_параметри,
        обʼєкт_дії.тип_результату.пм_тип
      );

      обʼєкт_дії.тип = виділити_обʼєкт_типу(компілятор);
      обʼєкт_дії.тип.вид = ВидОбʼєктаТипуДія;
      обʼєкт_дії.тип.пм_тип = ПМ::отримати_тип_адреса(компілятор.пм_модуль);
      обʼєкт_дії.тип.дані = ДаніОбʼєктаТипуДія {
        параметри = клонувати_параметри(компілятор, обʼєкт_дії.параметри),
        тип_результату = обʼєкт_дії.тип_результату,
        пм_тип_інструкції = ПМ::отримати_тип_інструкції(обʼєкт_дії.пм_інструкція)
      };

      якщо контекст_виконання_шаблону != пусто {
        біб::змінити_в_реєстрі<ГотовіАргументиШаблону, Обʼєкт>(
          контекст_виконання_шаблону.обʼєкт_шаблону.готові,
          клонувати_готові_аргументи_шаблону(компілятор, контекст_виконання_шаблону.готові_аргументи_шаблону),
          Обʼєкт { ВидОбʼєктаДія, обʼєкт_дії }
        );
      }
    } інакше {
      якщо обʼєкт_дії.має_тіло == позитивне(так) {
        змінна місцезнаходження_назви = обʼєкт_дії.місцезнаходження_назви;

        якщо місцезнаходження_назви.розібраний_текст == пусто {
          місцезнаходження_назви = обʼєкт_дії.місцезнаходження;
        }

        вернути РезультатОбʼєктаДії {
          помилка = створити_помилку_субʼєкт_вже_визначено(
            компілятор,
            місцезнаходження_назви,
            обʼєкт_дії.назва.значення
          ),
          ...
        };
      }

      змінна результат_голови_перевірки = скомпілювати_голову_дії(
        компілятор,
        контекст,
        дані_дії,
        місцезнаходження
      );
      якщо результат_голови_перевірки.помилка != пусто {
        вернути РезультатОбʼєктаДії { помилка = результат_голови_перевірки.помилка, ... };
      }

      змінна результат_перевірки = перевірити_голови_дії(
        компілятор,
        контекст,
        обʼєкт_дії,
        результат_голови_перевірки.обʼєкт_дії,
        місцезнаходження
      );

      якщо результат_перевірки.помилка != пусто {
        вернути РезультатОбʼєктаДії { помилка = результат_перевірки.помилка, ... };
      }

      змінна старі_параметри = обʼєкт_дії.параметри;

      обʼєкт_дії.параметри = результат_голови_перевірки.обʼєкт_дії.параметри;

      результат_голови_перевірки.обʼєкт_дії.параметри = старі_параметри;
    }

    якщо дані_дії.тіло.заповнено == позитивне(так) {
      обʼєкт_дії.має_тіло = позитивне(так);

      змінна середовище_тіла_дії = створити_середовище(компілятор, контекст.середовище);

      якщо контекст_виконання_шаблону == пусто {
        якщо обʼєкт_дії.назва.значення.розмір > 0 {
          змінити_в_середовищі(
            середовище_тіла_дії,
            обʼєкт_дії.назва,
            Обʼєкт { ВидОбʼєктаДія, обʼєкт_дії }
          );
        }
      }

      змінна результат_тіла = скомпілювати_тіло_дії(
        компілятор,
        Контекст {
          розібраний_текст = контекст.розібраний_текст,
          середовище = середовище_тіла_дії,
          кк_дії = контекст.кк_дії
        },
        обʼєкт_дії,
        дані_дії.тіло.значення,
        місцезнаходження
      );

      якщо результат_тіла.помилка != пусто {
        вернути РезультатОбʼєктаДії { помилка = результат_тіла.помилка, ... };
      }
    }

    вернути РезультатОбʼєктаДії { обʼєкт_дії, помилка = пусто };
  }

  місцева дія скомпілювати_дію_як_елемент_тіла(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    якщо дані_дії.ідентифікатор_структури.заповнено == позитивне(так) {
      змінна назва_структури_т8 = т8 { 0, пусто };
      
      якщо не розбирач::отримати_значення_слова(
        ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_дії.ідентифікатор_структури.значення.позиція_слова],
        назва_структури_т8::адреса
      ) { 
        вернути РезультатОбʼєктаДії {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось отримати назву структури.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          ),
          ...
        };
      }

      змінна назва_структури = назва_без_копіювання(компілятор, назва_структури_т8);

      змінна обʼєкт_з_середовища: Обʼєкт;
      якщо знайти_в_середовищі(контекст.середовище, назва_структури, обʼєкт_з_середовища::адреса) {
        якщо обʼєкт_з_середовища.вид == ВидОбʼєктаТип {
          змінна обʼєкт_типу = обʼєкт_з_середовища.дані як адреса<ОбʼєктТипу>;

          якщо обʼєкт_типу.вид == ВидОбʼєктаТипуСтруктура {
            змінна дані_структури = обʼєкт_типу.дані як ДаніОбʼєктаТипуСтруктура;

            якщо дані_структури.обʼєкт_секції != пусто {
              контекст.середовище = дані_структури.обʼєкт_секції.середовище;
            } інакше {
              вернути РезультатОбʼєктаДії {
                помилка = створити_помилку(
                  компілятор,
                  "Обʼєкт не є структурою.",
                  створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
                ),
                ...
              };
            }
          } інакше {
            вернути РезультатОбʼєктаДії {
              помилка = створити_помилку(
                компілятор,
                "Обʼєкт не є структурою.",
                створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
              ),
              ...
            };
          }
        } інакше {
          вернути РезультатОбʼєктаДії {
            помилка = створити_помилку(
              компілятор,
              "Обʼєкт не є структурою.",
              створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
            ),
            ...
          };
        }
      } інакше {
        вернути РезультатОбʼєктаДії {
          помилка = створити_помилку_субʼєкт_не_визначено(
            компілятор,
            Місцезнаходження { контекст.розібраний_текст, дані_дії.ідентифікатор_структури.значення.позиція_слова },
            назва_структури_т8
          ),
          ...
        };
      }

    }

    змінна назва_т8 = т8 { 0, пусто };

    якщо дані_дії.ідентифікатор.заповнено == позитивне(так) {
      якщо не розбирач::отримати_значення_слова(
        ю8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_дії.ідентифікатор.значення.позиція_слова],
        назва_т8::адреса
      ) {
        вернути РезультатОбʼєктаДії {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось отримати назву дії.",
            створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
          ),
          ...
        };
      }
    } інакше {
      вернути РезультатОбʼєктаДії {
        помилка = створити_помилку(
          компілятор,
          "Дія в тілі має мати назву.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        ),
        ...
      };
    }

    змінна назва = назва_без_копіювання(компілятор, назва_т8);

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва, обʼєкт_з_середовища::адреса) {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаДія {
        змінна обʼєкт_дії = обʼєкт_з_середовища.дані як адреса<ОбʼєктДії>;

        вернути скомпілювати_дію(
          компілятор,
          контекст,
          пусто,
          обʼєкт_дії,
          дані_дії,
          місцезнаходження
        );
      }

      вернути РезультатОбʼєктаДії {
        помилка = створити_помилку_субʼєкт_вже_визначено(
          компілятор,
          Місцезнаходження { контекст.розібраний_текст, місцезнаходження.позиція_початкового_слова },
          назва_т8
        ),
        ...
      };
    }

    змінна результат = скомпілювати_дію(
      компілятор,
      контекст,
      пусто,
      пусто,
      дані_дії,
      місцезнаходження
    );

    якщо результат.помилка != пусто {
      вернути результат;
    }

    змінити_в_середовищі(
      контекст.середовище,
      назва,
      Обʼєкт { ВидОбʼєктаДія, результат.обʼєкт_дії }
    );

    вернути результат;
  }
}