взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_тіло(компілятор: адреса<Компілятор>, контекст: Контекст, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла {
    змінна п: позитивне = 0;

    поки п < тіло.розмір {
      якщо тіло.дані[п].вид == розбирач::ВидСполукиДія {
        змінна дані_дії = тіло.дані[п].дані як розбирач::ДаніСполукиДія;

        змінна результат = скомпілювати_дію_як_елемент_тіла(
          компілятор,
          контекст,
          дані_дії,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиШаблон {
        змінна дані_шаблону = тіло.дані[п].дані як розбирач::ДаніСполукиШаблон;

        змінна результат = скомпілювати_визначити_шаблон(
          компілятор,
          контекст,
          дані_шаблону,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЦіль {
        змінна дані_цілі = тіло.дані[п].дані як розбирач::ДаніСполукиЦіль;

        змінна результат = скомпілювати_визначити_ціль(
          компілятор,
          контекст,
          дані_цілі,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінна {
        змінна дані_змінної = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінна;

        змінна результат = скомпілювати_визначити_змінну(
          компілятор,
          контекст,
          дані_змінної,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСтала {
        змінна дані_сталої = тіло.дані[п].дані як розбирач::ДаніСполукиСтала;

        змінна результат = скомпілювати_визначити_сталу(
          компілятор,
          контекст,
          дані_сталої,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСтруктура {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиСтруктура;

        змінна результат = скомпілювати_структуру_як_елемент_тіла(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСекція {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиСекція;

        змінна результат = скомпілювати_визначити_секцію(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСинонім {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиСинонім;

        змінна результат = скомпілювати_визначити_синонім(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗаписати {
        змінна дані_записати = тіло.дані[п].дані як розбирач::ДаніСполукиЗаписати;

        змінна результат = скомпілювати_змінити_в_середовищі(
          компілятор,
          контекст,
          дані_записати,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиВластивість {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиВластивість;

        змінна результат = скомпілювати_змінити_властивість(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиСекційнуВластивість {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиСекційнуВластивість;

        змінна результат = скомпілювати_змінити_секційну_властивість(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиЕлемент {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиЕлемент;

        змінна результат = скомпілювати_змінити_елемент(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиВернути {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиВернути;

        змінна результат = скомпілювати_вернути(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиВзяти {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиВзяти;

        змінна результат = скомпілювати_взяти(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиПоки {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиПоки;

        змінна результат = скомпілювати_поки(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЯкщо {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЯкщо;

        змінна результат = скомпілювати_якщо(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиКрок {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиКрок;

        змінна результат = скомпілювати_крок(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСтрибнути {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиСтрибнути;

        змінна результат = скомпілювати_стрибнути(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиВиконатиДію {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиВиконатиДію;

        змінна результат = скомпілювати_виконати_дію(
          компілятор,
          контекст,
          дані,
          тіло.дані[п].місцезнаходження,
          пусто
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше {
        вернути РезультатКомпіляціїТіла {
          створити_помилку(
            компілятор,
            "Неочікувана сполука тіла.",
            створити_місцезнаходження_помилки_зі_сполуки(компілятор, контекст.розібраний_текст, тіло.дані[п])
          )
        };
      }

      п += 1;
    }

    вернути РезультатКомпіляціїТіла { помилка = пусто };
  }
}