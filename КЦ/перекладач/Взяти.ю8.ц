взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_взяти(компілятор: адреса<Компілятор>, контекст: Контекст, дані_взяти: розбирач::ДаніСполукиВзяти, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта {
    змінна накопичувач_шляху_1 = зробити_накопичувач_шляху(компілятор);
    змінна накопичувач_шляху_2 = зробити_накопичувач_шляху(компілятор);
    змінна накопичувач_шляху_3 = зробити_накопичувач_шляху(компілятор);
    змінна накопичувач_шляху_4 = зробити_накопичувач_шляху(компілятор);

    якщо дані_взяти.відносно == позитивне(так) {
      змінна директорія = Шлях { 0, пусто };
      якщо отримати_директорію_шляху_до_файлу(компілятор, контекст.розібраний_текст.текст_коду.шлях, директорія::адреса) == ні {
        // потім: помилка
      }
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_1::адреса, директорія);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_1::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_2::адреса, директорія);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_3::адреса, директорія);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_3::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_4::адреса, директорія);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, "/");
      звільнити_памʼять(компілятор, директорія.дані);
    } інакше {
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_1::адреса, компілятор.кореневий_шлях);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_1::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_2::адреса, компілятор.кореневий_шлях);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_3::адреса, компілятор.кореневий_шлях);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_3::адреса, "/");
      покласти_в_накопичувач_шляху(компілятор, накопичувач_шляху_4::адреса, компілятор.кореневий_шлях);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, "/");
    }

    змінна п: позитивне = 0;

    поки п < дані_взяти.шлях.розмір {
      змінна частина_т8 = розбирач::отримати_значення_слова(
        т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_взяти.шлях.дані[п].позиція_слова]
      );

      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_1::адреса, частина_т8);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, частина_т8);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_3::адреса, частина_т8);
      покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, частина_т8);

      якщо п != дані_взяти.шлях.розмір - 1 {
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_1::адреса, "/");
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, "/");
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_3::адреса, "/");
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, "/");
      }

      якщо п == дані_взяти.шлях.розмір - 1 {
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, "/");
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, частина_т8);
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, "/");
        покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, частина_т8);
      }

      п += 1;
    }

    покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_1::адреса, ".в.ю8.ц");
    покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_2::адреса, ".в.ю8.ц");
    покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_3::адреса, ".ю8.в");
    покласти_т8_в_накопичувач_т8(компілятор, накопичувач_шляху_4::адреса, ".ю8.в");

    змінна шлях_1 = Шлях { накопичувач_шляху_1.значення.розмір, накопичувач_шляху_1.значення.дані };
    змінна шлях_2 = Шлях { накопичувач_шляху_2.значення.розмір, накопичувач_шляху_2.значення.дані };
    змінна шлях_3 = Шлях { накопичувач_шляху_3.значення.розмір, накопичувач_шляху_3.значення.дані };
    змінна шлях_4 = Шлях { накопичувач_шляху_4.значення.розмір, накопичувач_шляху_4.значення.дані };

    змінна помилка: адреса<Помилка> = пусто;

    якщо перевірити_чи_шлях_існує(компілятор, шлях_1) {
      змінна абсолютний_шлях_1 = Шлях { 0, пусто };

      якщо отримати_абсолютний_шлях(компілятор, шлях_1, абсолютний_шлях_1::адреса) == ні {
        // потім: помилка
      }

      якщо взяти_файл_ю8(компілятор, абсолютний_шлях_1, помилка::адреса) == ні {
        вернути РезультатОбʼєкта { ..., помилка = помилка };
      }
    } інакше якщо перевірити_чи_шлях_існує(компілятор, шлях_2) {
      змінна абсолютний_шлях_2 = Шлях { 0, пусто };

      якщо отримати_абсолютний_шлях(компілятор, шлях_2, абсолютний_шлях_2::адреса) == ні {
        // потім: помилка
      }

      якщо взяти_файл_ю8(компілятор, абсолютний_шлях_2, помилка::адреса) == ні {
        вернути РезультатОбʼєкта { ..., помилка = помилка };
      }
    } інакше якщо перевірити_чи_шлях_існує(компілятор, шлях_3) {
      змінна абсолютний_шлях_3 = Шлях { 0, пусто };

      якщо отримати_абсолютний_шлях(компілятор, шлях_3, абсолютний_шлях_3::адреса) == ні {
        // потім: помилка
      }

      якщо взяти_файл_ю8(компілятор, абсолютний_шлях_3, помилка::адреса) == ні {
        вернути РезультатОбʼєкта { ..., помилка = помилка };
      }
    } інакше якщо перевірити_чи_шлях_існує(компілятор, шлях_4) {
      змінна абсолютний_шлях_4 = Шлях { 0, пусто };

      якщо отримати_абсолютний_шлях(компілятор, шлях_4, абсолютний_шлях_4::адреса) == ні {
        // потім: помилка
      }

      якщо взяти_файл_ю8(компілятор, абсолютний_шлях_4, помилка::адреса) == ні {
        вернути РезультатОбʼєкта { ..., помилка = помилка };
      }
    } інакше {
      вернути РезультатОбʼєкта {
        ...,
        помилка = створити_помилку(
          компілятор,
          "Шлях взяття не існує.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    вернути РезультатОбʼєкта { ..., помилка = пусто };
  }
}