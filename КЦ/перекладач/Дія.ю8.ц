взяти визначення КЦ;

секція КЦ {
  зовнішня дія звільнити_параметри(компілятор: адреса<Компілятор>, параметри: Параметри) {
    // потім: звільнити кожен параметр

    звільнити_памʼять(компілятор, параметри.дані);
  }

  зовнішня дія скомпілювати_параметри_дії(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів {
    змінна параметри = Параметри { 0, пусто, 0 };

    змінна п: позитивне = 0;
    поки п < параметри_розбирача.розмір {
      змінна параметр_розбирача = параметри_розбирача.дані[п];

      змінна назва_т8 = розбирач::отримати_значення_слова(
        т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[параметр_розбирача.ідентифікатор.позиція_слова]
      );

      якщо параметр_розбирача.тип == пусто {
        звільнити_параметри(компілятор, параметри);

        вернути РезультатПараметрів {
          ...,
          помилка = створити_помилку(
            компілятор,
            "Параметр дії повинен мати тип.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, параметр_розбирача.ідентифікатор.позиція_слова)
          )
        };
      } інакше {
        змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, параметр_розбирача.тип, так);

        якщо результат_типу.помилка != пусто {
          звільнити_параметри(компілятор, параметри);

          вернути РезультатПараметрів { ..., помилка = результат_типу.помилка };
        }

        покласти_параметр(компілятор, параметри::адреса, Параметр { назва_зовнішня(назва_т8), результат_типу.обʼєкт_типу });
      }

      п += 1;
    }

    вернути РезультатПараметрів {
      параметри,
      помилка = пусто
    };
  }

  дія скомпілювати_голову_дії(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_дії.ідентифікатор.значення.позиція_слова]
    );

    змінна обʼєкт_дії = виділити_обʼєкт_дії(компілятор);
    якщо дані_дії.доступність == розбирач::ДІЯ_ВНУТРІШНЯ {
      обʼєкт_дії.видимість = ВидимістьДіїВнутрішня;
    } інакше якщо дані_дії.доступність == розбирач::ДІЯ_МІСЦЕВА {
      обʼєкт_дії.видимість = ВидимістьДіїМісцева;
    } інакше якщо дані_дії.доступність == розбирач::ДІЯ_ЗОВНІШНЯ {
      обʼєкт_дії.видимість = ВидимістьДіїЗовнішня;
    } інакше {
      вернути РезультатОбʼєктаДії {
        ...,
        помилка = створити_помилку(
          компілятор,
          "Неочікувана видимість дії.",
          створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    обʼєкт_дії.назва = назва_зовнішня(назва_т8);

    змінна результат_параметрів = скомпілювати_параметри_дії(компілятор, контекст, дані_дії.параметри, місцезнаходження);

    якщо результат_параметрів.помилка != пусто {
      вернути РезультатОбʼєктаДії {
        ...,
        помилка = результат_параметрів.помилка
      };
    }

    обʼєкт_дії.параметри = результат_параметрів.параметри;

    якщо дані_дії.тип_результату != пусто {
      змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, дані_дії.тип_результату, так);

      якщо результат_типу.помилка != пусто {
        вернути РезультатОбʼєктаДії {
          ...,
          помилка = результат_типу.помилка
        };
      }

      обʼєкт_дії.тип_результату = результат_типу.обʼєкт_типу;
    }

    вернути РезультатОбʼєктаДії { обʼєкт_дії = обʼєкт_дії, помилка = пусто };
  }

  зовнішня дія скомпілювати_тіло(компілятор: адреса<Компілятор>, контекст: Контекст, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла {
    змінна п: позитивне = 0;

    поки п < тіло.розмір {
      якщо тіло.дані[п].вид == розбирач::ВидСполукиДія {
        змінна дані_дії = тіло.дані[п].дані як розбирач::ДаніСполукиДія;

        змінна результат = скомпілювати_визначити_дію(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані_дії,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиШаблон {
        змінна дані_шаблону = тіло.дані[п].дані як розбирач::ДаніСполукиШаблон;

        змінна результат = скомпілювати_визначити_шаблон(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані_шаблону,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЦіль {
        змінна дані_цілі = тіло.дані[п].дані як розбирач::ДаніСполукиЦіль;

        змінна результат = скомпілювати_визначити_ціль(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані_цілі,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиСтруктура {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиСтруктура;

        змінна результат = скомпілювати_визначити_структуру(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗаписати {
        змінна дані_записати = тіло.дані[п].дані як розбирач::ДаніСполукиЗаписати;

        змінна результат = скомпілювати_змінити_в_середовищі(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані_записати,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиВластивість {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиВластивість;

        змінна результат = скомпілювати_змінити_властивість(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиСекційнуВластивість {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиСекційнуВластивість;

        змінна результат = скомпілювати_змінити_секційну_властивість(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЗмінитиЕлемент {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЗмінитиЕлемент;

        змінна результат = скомпілювати_змінити_елемент(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиВернути {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиВернути;

        змінна результат = скомпілювати_вернути(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиВзяти {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиВзяти;

        змінна результат = скомпілювати_взяти(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиПоки {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиПоки;

        змінна результат = скомпілювати_поки(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше якщо тіло.дані[п].вид == розбирач::ВидСполукиЯкщо {
        змінна дані = тіло.дані[п].дані як розбирач::ДаніСполукиЯкщо;

        змінна результат = скомпілювати_якщо(
          компілятор,
          Контекст {
            розібраний_текст = контекст.розібраний_текст,
            середовище = контекст.середовище,
            обʼєкт_секції = контекст.обʼєкт_секції,
            кк_дії = контекст.кк_дії,
            кк_виконання_шаблону = пусто
          },
          дані,
          тіло.дані[п].місцезнаходження
        );

        якщо результат.помилка != пусто {
          вернути РезультатКомпіляціїТіла { помилка = результат.помилка };
        }
      } інакше {
        вернути РезультатКомпіляціїТіла {
          створити_помилку(
            компілятор,
            "Неочікувана сполука тіла.",
            створити_місцезнаходження_помилки_зі_сполуки(компілятор, контекст.розібраний_текст, тіло.дані[п])
          )
        };
      }

      п += 1;
    }

    вернути РезультатКомпіляціїТіла { помилка = пусто };
  }

  зовнішня дія скомпілювати_тіло_дії(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_дії: адреса<ОбʼєктДії>, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла {
    змінна кк_дії = виділити<КонтекстКомпіляціїДії>(компілятор);
    кк_дії.обʼєкт_дії = обʼєкт_дії;
    кк_дії.крок_накопичень = Крок { назва_зовнішня("накопичення"), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, "накопичення") };
    якщо обʼєкт_дії.тип_результату == компілятор.тип_ніщо {
      кк_дії.значення_вернути = ОбʼєктНезавантаженогоЗначення { компілятор.тип_ніщо, пусто };
    } інакше {
      кк_дії.значення_вернути = ОбʼєктНезавантаженогоЗначення {
        обʼєкт_дії.тип_результату,
        ПМ::вказівка_накопичити(кк_дії.крок_накопичень.пм_крок, обʼєкт_дії.тип_результату.пм_тип)
      };
    }
    кк_дії.крок_вернути = Крок { назва_зовнішня("вихід"), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, "вихід") };
    кк_дії.поточний_крок = Крок { назва_зовнішня("початок"), обʼєкт_дії, ПМ::створити_крок(обʼєкт_дії.пм_інструкція, "початок") };

    змінна перший_крок = кк_дії.поточний_крок;

    змінна зовнішнє_середовище = контекст.середовище;

    якщо обʼєкт_дії.назва.значення.розмір != 0 {
      якщо контекст.кк_виконання_шаблону == пусто {
        зовнішнє_середовище = створити_середовище(компілятор, зовнішнє_середовище);

        змінити_в_середовищі(
          контекст.середовище,
          назва_зовнішня(обʼєкт_дії.назва.значення),
          Обʼєкт { ВидОбʼєктаДія, обʼєкт_дії }
        );
      } інакше {
        біб::змінити_в_реєстрі<ГотовіАргументиШаблону, Обʼєкт>(
          контекст.кк_виконання_шаблону.обʼєкт_шаблону.готові,
          контекст.кк_виконання_шаблону.готові_аргументи_шаблону,
          Обʼєкт { ВидОбʼєктаДія, обʼєкт_дії }
        );
      }
    }

    змінна середовище_дії = створити_середовище(компілятор, зовнішнє_середовище);

    змінна результат_тіла = скомпілювати_тіло(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = середовище_дії,
        обʼєкт_секції = контекст.обʼєкт_секції,
        кк_дії = кк_дії,
        кк_виконання_шаблону = пусто
      },
      тіло,
      місцезнаходження
    );

    якщо результат_тіла.помилка != пусто {
      вернути РезультатКомпіляціїТіла { помилка = результат_тіла.помилка };
    }

    ПМ::вказівка_стрибнути(кк_дії.крок_накопичень.пм_крок, перший_крок.пм_крок);
    ПМ::вказівка_стрибнути(кк_дії.поточний_крок.пм_крок, кк_дії.крок_вернути.пм_крок);

    якщо кк_дії.значення_вернути.тип == компілятор.тип_ніщо {
      ПМ::вказівка_вернути(кк_дії.крок_вернути.пм_крок);
    } інакше {
      змінна пм_значення = ПМ::вказівка_прочитати(кк_дії.крок_вернути.пм_крок, кк_дії.значення_вернути.тип.пм_тип, кк_дії.значення_вернути.пм_значення);
      ПМ::вказівка_вернути_значення(кк_дії.крок_вернути.пм_крок, пм_значення);
    }

    вернути РезультатКомпіляціїТіла { помилка = пусто };
  }

  зовнішня дія скомпілювати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    змінна результат_голови = скомпілювати_голову_дії(
      компілятор,
      контекст,
      дані_дії,
      місцезнаходження
    );

    якщо результат_голови.помилка != пусто {
      вернути РезультатОбʼєктаДії { помилка = результат_голови.помилка, ... };
    }

    змінна обʼєкт_дії = результат_голови.обʼєкт_дії;

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < обʼєкт_дії.параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_аркуш, пм_параметри::адреса, ПМ::Параметр { обʼєкт_дії.параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    змінна видимість_інструкції: позитивне = ПМ::ІНСТРУКЦІЯ_ВНУТРІШНЯ;
    якщо обʼєкт_дії.видимість == ВидимістьДіїВнутрішня {
      видимість_інструкції = ПМ::ІНСТРУКЦІЯ_ВНУТРІШНЯ;
    } інакше якщо обʼєкт_дії.видимість == ВидимістьДіїМісцева {
      видимість_інструкції = ПМ::ІНСТРУКЦІЯ_МІСЦЕВА;
    } інакше якщо обʼєкт_дії.видимість == ВидимістьДіїЗовнішня {
      видимість_інструкції = ПМ::ІНСТРУКЦІЯ_ЗОВНІШНЯ;
    } інакше {
      вернути РезультатОбʼєктаДії {
        ...,
        помилка = створити_помилку(
          компілятор,
          "Неочікувана видимість дії.",
          створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    обʼєкт_дії.пм_інструкція = ПМ::створити_інструкцію(
      компілятор.пм_аркуш,
      видимість_інструкції,
      обʼєкт_дії.назва.значення,
      пм_параметри,
      обʼєкт_дії.тип_результату.пм_тип
    );

    обʼєкт_дії.тип = виділити_обʼєкт_типу(компілятор);
    обʼєкт_дії.тип.вид = ВидОбʼєктаТипуДія;
    обʼєкт_дії.тип.пм_тип = ПМ::отримати_тип_адреса(компілятор.пм_аркуш);
    обʼєкт_дії.тип.дані = ДаніОбʼєктаТипуДія {
      параметри = клонувати_параметри(компілятор, обʼєкт_дії.параметри),
      тип_результату = обʼєкт_дії.тип_результату,
      пм_тип_інструкції = ПМ::отримати_тип_інструкції(обʼєкт_дії.пм_інструкція)
    };

    якщо дані_дії.тіло.заповнено == позитивне(так) {
      обʼєкт_дії.має_тіло = позитивне(так);

      змінна результат_тіла = скомпілювати_тіло_дії(
        компілятор,
        контекст,
        обʼєкт_дії,
        дані_дії.тіло.значення,
        місцезнаходження
      );

      якщо результат_тіла.помилка != пусто {
        вернути РезультатОбʼєктаДії { ..., помилка = результат_тіла.помилка };
      }
    }

    вернути РезультатОбʼєктаДії { обʼєкт_дії, помилка = пусто };
  }

  зовнішня дія перевірити_голови_дії(компілятор: адреса<Компілятор>, контекст: Контекст, існуюча_голова: адреса<ОбʼєктДії>, голова_на_перевірку: адреса<ОбʼєктДії>, місцезнаходження: розбирач::Місцезнаходження): Результат {
    якщо існуюча_голова.видимість != голова_на_перевірку.видимість {
      вернути Результат {
        створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    якщо існуюча_голова.параметри.розмір != голова_на_перевірку.параметри.розмір {
      вернути Результат {
        створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    змінна п: позитивне = 0;

    поки п < існуюча_голова.параметри.розмір {
      якщо існуюча_голова.параметри.дані[п].тип != голова_на_перевірку.параметри.дані[п].тип {
        вернути Результат {
          створити_помилку(
            компілятор,
            "Субʼєкт вже визначено.",
            створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
          )
        };
      }

      якщо перевірити_чи_назви_рівні(існуюча_голова.параметри.дані[п].назва, голова_на_перевірку.параметри.дані[п].назва) == ні {
        вернути Результат {
          створити_помилку(
            компілятор,
            "Субʼєкт вже визначено.",
            створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
          )
        };
      }

      п += 1;
    }

    якщо існуюча_голова.тип_результату != голова_на_перевірку.тип_результату {
      вернути Результат {
        створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    вернути Результат { пусто };
  }

  зовнішня дія скомпілювати_визначити_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_дії.ідентифікатор.значення.позиція_слова]
    );

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), обʼєкт_з_середовища::адреса) {

      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаДія {
        змінна обʼєкт_дії = обʼєкт_з_середовища.дані як адреса<ОбʼєктДії>;

        якщо обʼєкт_дії.має_тіло == позитивне(ні) {
          змінна результат_голови_перевірки = скомпілювати_голову_дії(
            компілятор,
            контекст,
            дані_дії,
            місцезнаходження
          );
          якщо результат_голови_перевірки.помилка != пусто {
            вернути РезультатОбʼєктаДії { помилка = результат_голови_перевірки.помилка, ... };
          }
          змінна обʼєкт_дії_перевірки = результат_голови_перевірки.обʼєкт_дії;

          змінна результат_перевірки = перевірити_голови_дії(компілятор, контекст, обʼєкт_дії, обʼєкт_дії_перевірки, місцезнаходження);
          якщо результат_перевірки.помилка != пусто {
            вернути РезультатОбʼєктаДії { ..., помилка = результат_перевірки.помилка };
          }

          обʼєкт_дії.має_тіло = позитивне(так);

          змінна результат_тіла = скомпілювати_тіло_дії(
            компілятор,
            контекст,
            обʼєкт_дії,
            дані_дії.тіло.значення,
            місцезнаходження
          );

          якщо результат_тіла.помилка != пусто {
            вернути РезультатОбʼєктаДії { ..., помилка = результат_тіла.помилка };
          }

          вернути РезультатОбʼєктаДії { обʼєкт_дії, помилка = пусто };
        }
      }

      вернути РезультатОбʼєктаДії {
        ...,
        помилка = створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_дії.ідентифікатор.значення.позиція_слова)
        )
      };
    }

    змінна результат = скомпілювати_дію(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = контекст.середовище,
        обʼєкт_секції = контекст.обʼєкт_секції,
        кк_дії = пусто,
        кк_виконання_шаблону = пусто
      },
      дані_дії,
      місцезнаходження
    );

    якщо результат.помилка != пусто {
      вернути результат;
    }

    змінити_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), Обʼєкт { ВидОбʼєктаДія, результат.обʼєкт_дії });

    вернути результат;
  }
}