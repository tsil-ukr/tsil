взяти визначення КЦ;

секція КЦ {
  місцева дія скомпілювати_визначити_змінну(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінної: розбирач::ДаніСполукиЗмінна, місцезнаходження: розбирач::Місцезнаходження): Результат {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_змінної.ідентифікатор.позиція_слова]
    );

    змінна пм_видимість: позитивне = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
    якщо дані_змінної.видимість == розбирач::ВИДИМІСТЬ_ВНУТРІШНЯ {
      пм_видимість = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
    } інакше якщо дані_змінної.видимість == розбирач::ВИДИМІСТЬ_МІСЦЕВА {
      пм_видимість = ПМ::ВИДИМІСТЬ_МІСЦЕВА;
    } інакше якщо дані_змінної.видимість == розбирач::ВИДИМІСТЬ_ЗОВНІШНЯ {
      пм_видимість = ПМ::ВИДИМІСТЬ_ЗОВНІШНЯ;
    } інакше {
      вернути Результат {
        помилка = створити_помилку(
          компілятор,
          "Неочікувана видимість.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), обʼєкт_з_середовища::адреса) {
      вернути Результат {
        помилка = створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_змінної.ідентифікатор.позиція_слова)
        )
      };
    }

    змінна обʼєкт: Обʼєкт;
    змінна обʼєкт_типу: адреса<ОбʼєктТипу> = пусто;

    якщо дані_змінної.тип != пусто {
      змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, дані_змінної.тип, так);
      якщо результат_типу.помилка != пусто {
        вернути Результат { помилка = результат_типу.помилка };
      }
      обʼєкт_типу = результат_типу.обʼєкт_типу;
    }

    якщо контекст.кк_дії == пусто {
      якщо дані_змінної.значення != пусто {
        вернути Результат {
          помилка = створити_помилку(
            компілятор,
            "Глобальні змінні не можуть мати мати значення.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_змінної.ідентифікатор.позиція_слова)
          )
        };
      } інакше якщо обʼєкт_типу == пусто {
        вернути Результат {
          помилка = створити_помилку(
            компілятор,
            "Глобальні змінні мають мати вказаний тип.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_змінної.ідентифікатор.позиція_слова)
          )
        };
      } інакше {
        змінна повна_назва = назва_зовнішня(назва_т8);
        змінна повну_назву_треба_звільнити = ні;

        якщо назва_т8.розмір > 0 {
          повна_назва = назва_копія(отримати_повну_назву_в_контексті(компілятор, контекст, назва_т8));
          повну_назву_треба_звільнити = так;
        }

        змінна пм_значення = ПМ::створити_глобальну(
          компілятор.пм_модуль,
          повна_назва.значення,
          пм_видимість,
          обʼєкт_типу.пм_тип
        );

        якщо повну_назву_треба_звільнити {
          звільнити_памʼять(компілятор, повна_назва.значення.дані);
        }

        обʼєкт = Обʼєкт {
          ВидОбʼєктаНезавантаженеЗначення,
          ОбʼєктНезавантаженогоЗначення {
            обʼєкт_типу,
            пм_значення
          }
        };
      }
    } інакше {
      якщо пм_видимість != ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ {
        вернути Результат {
          помилка = створити_помилку(
            компілятор,
            "Змінна в дії може мати лише внутрішню видимість.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_змінної.ідентифікатор.позиція_слова)
          )
        };
      }

      якщо дані_змінної.значення != пусто {
        змінна результат_значення = скомпілювати_значення_як_значення(компілятор, контекст, дані_змінної.значення, обʼєкт_типу);
        якщо результат_значення.помилка != пусто {
          вернути Результат { помилка = результат_значення.помилка, ... };
        }

        якщо обʼєкт_типу == пусто {
          обʼєкт_типу = результат_значення.обʼєкт_значення.тип;
        } інакше {
          якщо перевірити_тип_на_запис_і_конвертувати_якщо_треба(компілятор, обʼєкт_типу, результат_значення.обʼєкт_значення::адреса) == ні {
            вернути Результат {
              помилка = створити_помилку_невірний_тип_значення(
                компілятор,
                Місцезнаходження { контекст.розібраний_текст, дані_змінної.значення.місцезнаходження.позиція_початкового_слова },
                обʼєкт_типу,
                результат_значення.обʼєкт_значення.тип
              )
            };
          }
        }

        змінна пм_значення = ПМ::вказівка_накопичити(контекст.кк_дії.крок_накопичень.пм_крок, обʼєкт_типу.пм_тип);
        обʼєкт = Обʼєкт {
          ВидОбʼєктаНезавантаженеЗначення,
          ОбʼєктНезавантаженогоЗначення {
            обʼєкт_типу,
            пм_значення
          }
        };

        ПМ::вказівка_записати(
          контекст.кк_дії.поточний_крок.пм_крок,
          результат_значення.обʼєкт_значення.пм_значення,
          пм_значення
        );
      } інакше якщо обʼєкт_типу == пусто {
        вернути Результат {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось скомпілювати змінну.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_змінної.ідентифікатор.позиція_слова)
          )
        };
      } інакше {
        змінна пм_значення = ПМ::вказівка_накопичити(контекст.кк_дії.крок_накопичень.пм_крок, обʼєкт_типу.пм_тип);
        обʼєкт = Обʼєкт {
          ВидОбʼєктаНезавантаженеЗначення,
          ОбʼєктНезавантаженогоЗначення {
            обʼєкт_типу,
            пм_значення
          }
        };
      }
    }

    змінити_в_середовищі(
      контекст.середовище,
      назва_зовнішня(назва_т8),
      обʼєкт
    );

    вернути Результат { помилка = пусто };
  }
}