взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_параметри_шаблону(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів {
    змінна параметри = Параметри { 0, пусто, 0 };

    змінна п: позитивне = 0;

    поки п < параметри_розбирача.розмір {
      змінна параметр_розбирача = параметри_розбирача.дані[п];

      змінна назва_т8 = розбирач::отримати_значення_слова(
        т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[параметр_розбирача.ідентифікатор.позиція_слова]
      );

      якщо параметр_розбирача.тип == пусто {
        покласти_параметр(
          компілятор,
          параметри::адреса,
          Параметр {
            назва_зовнішня(назва_т8),
            пусто,
            Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.ідентифікатор.позиція_слова },
            Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.ідентифікатор.позиція_слова }
          }
        );
      } інакше {
        змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, параметр_розбирача.тип, так);
        якщо результат_типу.помилка != пусто {
          звільнити_параметри(компілятор, параметри);

          вернути РезультатПараметрів { ..., помилка = результат_типу.помилка };
        }

        покласти_параметр(
          компілятор,
          параметри::адреса,
          Параметр {
            назва_зовнішня(назва_т8),
            результат_типу.обʼєкт_типу,
            Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.ідентифікатор.позиція_слова },
            Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.тип.місцезнаходження.позиція_початкового_слова }
          }
        );
      }

      п += 1;
    }

    вернути РезультатПараметрів {
      параметри,
      помилка = пусто
    };
  }

  зовнішня дія скомпілювати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаШаблону {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_шаблону.ідентифікатор.значення.позиція_слова]
    );

    змінна результат_параметрів = скомпілювати_параметри_шаблону(компілятор, контекст, дані_шаблону.параметри, місцезнаходження);
    якщо результат_параметрів.помилка != пусто {
      вернути РезультатОбʼєктаШаблону {
        ...,
        помилка = результат_параметрів.помилка
      };
    }

    змінна обʼєкт_шаблону = виділити_обʼєкт_шаблону(компілятор);

    обʼєкт_шаблону.назва = назва_зовнішня(назва_т8);
    обʼєкт_шаблону.параметри = результат_параметрів.параметри;
    обʼєкт_шаблону.сполука = дані_шаблону.значення;
    обʼєкт_шаблону.контекст_компіляції = контекст;

    вернути РезультатОбʼєктаШаблону {
      обʼєкт_шаблону,
      помилка = пусто
    };
  }

  зовнішня дія перевірити_параметри_задекларованого_шаблону(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_задекларованого_шаблону: адреса<ОбʼєктШаблону>, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): Результат {
    якщо обʼєкт_задекларованого_шаблону.параметри.розмір != дані_шаблону.параметри.розмір {
      вернути Результат {
        помилка = створити_помилку(
          компілятор,
          "Невірна кількість параметрів шаблону.",
          створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_шаблону.ідентифікатор.значення.позиція_слова)
        )
      };
    }

    вернути Результат { пусто };
  }

  дія дія_перебору_реєстру_готових_дії(реєстр: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>, ключ: ГотовіАргументиШаблону, значення: Обʼєкт) {
    біб::надрукувати_ю8(ю8"привіт");
  }
  
  зовнішня дія дозаповнити_задекларований_шаблон_дії(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_задекларованого_шаблону: адреса<ОбʼєктШаблону>, сполука: адреса<розбирач::Сполука>): Результат {
    змінна дані_задекларованої_дії = обʼєкт_задекларованого_шаблону.сполука.дані як розбирач::ДаніСполукиДія;
    змінна місцезнаходження_задекларованої_дії = обʼєкт_задекларованого_шаблону.сполука.місцезнаходження;

    // потім: перевірити декларації дії

    обʼєкт_задекларованого_шаблону.сполука = сполука;

    біб::перебрати_реєстр<ГотовіАргументиШаблону, Обʼєкт>(обʼєкт_задекларованого_шаблону.готові, дія_перебору_реєстру_готових_дії);

    вернути Результат { пусто };
  }

  зовнішня дія дозаповнити_задекларований_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_задекларованого_шаблону: адреса<ОбʼєктШаблону>, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): Результат {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_шаблону.ідентифікатор.значення.позиція_слова]
    );

    змінна результат_перевірки_параметрів = перевірити_параметри_задекларованого_шаблону(
      компілятор,
      контекст,
      обʼєкт_задекларованого_шаблону,
      дані_шаблону,
      місцезнаходження
    );

    якщо результат_перевірки_параметрів.помилка != пусто {
      вернути результат_перевірки_параметрів;
    }

    якщо обʼєкт_задекларованого_шаблону.сполука.вид == розбирач::ВидСполукиДія {
      якщо дані_шаблону.значення.вид == розбирач::ВидСполукиДія {
        вернути дозаповнити_задекларований_шаблон_дії(
          компілятор,
          контекст,
          обʼєкт_задекларованого_шаблону,
          дані_шаблону.значення
        );
      }
    }

    вернути Результат {
      помилка = створити_помилку_субʼєкт_вже_визначено(
        компілятор,
        Місцезнаходження { контекст.розібраний_текст, дані_шаблону.ідентифікатор.значення.позиція_слова },
        назва_т8
      )
    };
  }

  зовнішня дія скомпілювати_визначити_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаШаблону {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_шаблону.ідентифікатор.значення.позиція_слова]
    );

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), обʼєкт_з_середовища::адреса) {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаШаблон {
        змінна обʼєкт_шаблону = обʼєкт_з_середовища.дані як адреса<ОбʼєктШаблону>;
        
        змінна результат_дозаповнення = дозаповнити_задекларований_шаблон(
          компілятор,
          контекст,
          обʼєкт_шаблону,
          дані_шаблону,
          місцезнаходження
        );
        
        якщо результат_дозаповнення.помилка != пусто {
          вернути РезультатОбʼєктаШаблону { ..., помилка = результат_дозаповнення.помилка };
        }

        вернути РезультатОбʼєктаШаблону { обʼєкт_шаблону, помилка = пусто };
      }

      вернути РезультатОбʼєктаШаблону {
        ...,
        помилка = створити_помилку_субʼєкт_вже_визначено(
          компілятор,
          Місцезнаходження { контекст.розібраний_текст, дані_шаблону.ідентифікатор.значення.позиція_слова },
          назва_т8
        )
      };
    }

    змінна результат_шаблону = скомпілювати_шаблон(
      компілятор,
      контекст,
      дані_шаблону,
      місцезнаходження
    );

    якщо результат_шаблону.помилка != пусто {
      вернути РезультатОбʼєктаШаблону { ..., помилка = результат_шаблону.помилка };
    }

    змінити_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), Обʼєкт { ВидОбʼєктаШаблон, результат_шаблону.обʼєкт_шаблону });

    вернути РезультатОбʼєктаШаблону {
      результат_шаблону.обʼєкт_шаблону,
      помилка = пусто
    };
  }
}