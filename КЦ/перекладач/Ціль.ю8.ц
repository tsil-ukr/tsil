взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_визначити_ціль(компілятор: адреса<Компілятор>, контекст: Контекст, дані_цілі: розбирач::ДаніСполукиЦіль, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаНезавантаженогоЗначення {
    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_цілі.ідентифікатор.позиція_слова]
    );

    змінна пм_видимість_глобальної: позитивне = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
    якщо дані_цілі.видимість == розбирач::ВИДИМІСТЬ_ВНУТРІШНЯ {
      пм_видимість_глобальної = ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ;
    } інакше якщо дані_цілі.видимість == розбирач::ВИДИМІСТЬ_МІСЦЕВА {
      пм_видимість_глобальної = ПМ::ВИДИМІСТЬ_МІСЦЕВА;
    } інакше якщо дані_цілі.видимість == розбирач::ВИДИМІСТЬ_ЗОВНІШНЯ {
      пм_видимість_глобальної = ПМ::ВИДИМІСТЬ_ЗОВНІШНЯ;
    } інакше {
      вернути РезультатОбʼєктаНезавантаженогоЗначення {
        помилка = створити_помилку(
          компілятор,
          "Неочікувана видимість.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        ),
        ...
      };
    }

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), обʼєкт_з_середовища::адреса) {
      вернути РезультатОбʼєктаНезавантаженогоЗначення {
        помилка = створити_помилку(
          компілятор,
          "Субʼєкт вже визначено.",
          створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_цілі.ідентифікатор.позиція_слова)
        ),
        ...
      };
    }

    змінна обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
    змінна обʼєкт_типу: адреса<ОбʼєктТипу> = пусто;

    якщо дані_цілі.тип != пусто {
      змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, дані_цілі.тип, так);
      якщо результат_типу.помилка != пусто {
        вернути РезультатОбʼєктаНезавантаженогоЗначення { помилка = результат_типу.помилка, ... };
      }
      обʼєкт_типу = результат_типу.обʼєкт_типу;
    }

    якщо контекст.кк_дії == пусто {
      якщо дані_цілі.значення != пусто {
        вернути РезультатОбʼєктаНезавантаженогоЗначення {
          помилка = створити_помилку(
            компілятор,
            "Глобальні змінні не можуть мати мати значення.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_цілі.ідентифікатор.позиція_слова)
          ),
          ...
        };
      }

      якщо обʼєкт_типу == пусто {
        вернути РезультатОбʼєктаНезавантаженогоЗначення {
          помилка = створити_помилку(
            компілятор,
            "Глобальні змінні мають мати вказаний тип.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_цілі.ідентифікатор.позиція_слова)
          ),
          ...
        };
      }

      змінна повна_назва = назва_зовнішня(назва_т8);
      змінна повну_назву_треба_звільнити = ні;

      якщо назва_т8.розмір > 0 {
        повна_назва = назва_копія(отримати_повну_назву_в_контексті(компілятор, контекст, назва_т8));
        повну_назву_треба_звільнити = так;
      }

      змінна пм_значення = ПМ::створити_глобальну(
        компілятор.пм_модуль,
        повна_назва.значення,
        пм_видимість_глобальної,
        обʼєкт_типу.пм_тип
      );

      якщо повну_назву_треба_звільнити {
        звільнити_памʼять(компілятор, повна_назва.значення.дані);
      }

      обʼєкт_незавантаженого_значення = ОбʼєктНезавантаженогоЗначення {
        обʼєкт_типу,
        пм_значення
      };
    } інакше {
      якщо пм_видимість_глобальної != ПМ::ВИДИМІСТЬ_ВНУТРІШНЯ {
        вернути РезультатОбʼєктаНезавантаженогоЗначення {
          помилка = створити_помилку(
            компілятор,
            "Неочікувана видимість.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_цілі.ідентифікатор.позиція_слова)
          ),
          ...
        };
      }

      якщо дані_цілі.значення != пусто {
        змінна результат_значення = скомпілювати_значення_як_значення(компілятор, контекст, дані_цілі.значення, обʼєкт_типу);
        якщо результат_значення.помилка != пусто {
          вернути РезультатОбʼєктаНезавантаженогоЗначення { помилка = результат_значення.помилка, ... };
        }

        якщо обʼєкт_типу == пусто {
          обʼєкт_типу = результат_значення.обʼєкт_значення.тип;
        } інакше {
          якщо перевірити_тип_на_запис_і_конвертувати_якщо_треба(компілятор, обʼєкт_типу, результат_значення.обʼєкт_значення::адреса) == ні {
            вернути РезультатОбʼєктаНезавантаженогоЗначення {
              ...,
              помилка = створити_помилку_невірний_тип_значення(
                компілятор,
                Місцезнаходження { контекст.розібраний_текст, дані_цілі.значення.місцезнаходження.позиція_початкового_слова },
                обʼєкт_типу,
                результат_значення.обʼєкт_значення.тип
              )
            };
          }
        }

        змінна пм_значення = ПМ::вказівка_накопичити(контекст.кк_дії.крок_накопичень.пм_крок, обʼєкт_типу.пм_тип);
        обʼєкт_незавантаженого_значення = ОбʼєктНезавантаженогоЗначення {
          обʼєкт_типу,
          пм_значення
        };

        ПМ::вказівка_записати(контекст.кк_дії.поточний_крок.пм_крок, результат_значення.обʼєкт_значення.пм_значення, пм_значення);
      } інакше якщо обʼєкт_типу == пусто {
        вернути РезультатОбʼєктаНезавантаженогоЗначення {
          помилка = створити_помилку(
            компілятор,
            "Не вдалось скомпілювати ціль.",
            створити_місцезнаходження_помилки_з_позиції_слова(компілятор, контекст.розібраний_текст, дані_цілі.ідентифікатор.позиція_слова)
          ),
          ...
        };
      } інакше {
        змінна пм_значення = ПМ::вказівка_накопичити(контекст.кк_дії.крок_накопичень.пм_крок, обʼєкт_типу.пм_тип);
        обʼєкт_незавантаженого_значення = ОбʼєктНезавантаженогоЗначення {
          обʼєкт_типу,
          пм_значення
        };
      }
    }

    змінити_в_середовищі(
      контекст.середовище,
      назва_зовнішня(назва_т8),
      Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, обʼєкт_незавантаженого_значення }
    );

    вернути РезультатОбʼєктаНезавантаженогоЗначення { обʼєкт_незавантаженого_значення, помилка = пусто };
  }
}