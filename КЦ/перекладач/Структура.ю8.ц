взяти визначення КЦ;

секція КЦ {
  зовнішня дія скомпілювати_параметри_структури(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів {
    змінна параметри = Параметри { 0, пусто, 0 };

    змінна п: позитивне = 0;
    поки п < параметри_розбирача.розмір {
      змінна параметр_розбирача = параметри_розбирача.дані[п];

      змінна назва_т8 = т8 { 0, пусто };
      змінна позиція_слова_назви: позитивне = 0;

      якщо параметр_розбирача.ідентифікатор.заповнено == позитивне(так) {
        назва_т8 = розбирач::отримати_значення_слова(
          т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
          контекст.розібраний_текст.слова.дані[параметр_розбирача.ідентифікатор.значення.позиція_слова]
        );
        позиція_слова_назви = параметр_розбирача.ідентифікатор.значення.позиція_слова;
      }

      змінна результат_типу = скомпілювати_значення_як_тип(компілятор, контекст, параметр_розбирача.тип, так);

      якщо результат_типу.помилка != пусто {
        звільнити_параметри(компілятор, параметри);

        вернути РезультатПараметрів { ..., помилка = результат_типу.помилка };
      }

      покласти_параметр(
        компілятор,
        параметри::адреса,
        Параметр {
          назва_зовнішня(назва_т8),
          результат_типу.обʼєкт_типу,
          Місцезнаходження { контекст.розібраний_текст, позиція_слова_назви },
          Місцезнаходження { контекст.розібраний_текст, параметр_розбирача.тип.місцезнаходження.позиція_початкового_слова }
        }
      );

      п += 1;
    }

    вернути РезультатПараметрів {
      параметри,
      помилка = пусто
    };
  }

  зовнішня дія доповнити_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_типу_структура: адреса<ОбʼєктТипу>, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): Результат {
    якщо дані_структури.параметри.розмір == 0 {
      вернути Результат { пусто };
    }

    змінна дані_обʼєкта_типу_структура = обʼєкт_типу_структура.дані як ДаніОбʼєктаТипуСтруктура;

    якщо дані_обʼєкта_типу_структура.параметри.розмір != 0 {
      вернути Результат {
        помилка = створити_помилку(
          компілятор,
          "Структуру вже визначено.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    змінна результат_параметрів = скомпілювати_параметри_структури(компілятор, контекст, дані_структури.параметри, місцезнаходження);

    якщо результат_параметрів.помилка != пусто {
      вернути Результат {
        помилка = результат_параметрів.помилка
      };
    }

    дані_обʼєкта_типу_структура.параметри = результат_параметрів.параметри;

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < дані_обʼєкта_типу_структура.параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_модуль, пм_параметри::адреса, ПМ::Параметр { дані_обʼєкта_типу_структура.параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = дані_обʼєкта_типу_структура;

    ПМ::заповнити_параметри_структури(
      обʼєкт_типу_структура.пм_тип,
      пм_параметри
    );

    обʼєкт_типу_структура.дані = дані_обʼєкта_типу_структура;

    вернути Результат { помилка = пусто };
  }

  зовнішня дія скомпілювати_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу {
    змінна назва_т8 = т8 { 0, пусто };

    якщо дані_структури.ідентифікатор.заповнено == позитивне(так) {
      розбирач::отримати_значення_слова(
        т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
        контекст.розібраний_текст.слова.дані[дані_структури.ідентифікатор.значення.позиція_слова]
      );
    }

    змінна повна_назва = назва_зовнішня(т8 { 0, пусто });

    якщо назва_т8.розмір != 0 {
      повна_назва = назва_копія(отримати_повну_назву_в_контексті(компілятор, контекст, назва_т8));
    }

    змінна обʼєкт_типу_структура = виділити_обʼєкт_типу(компілятор);

    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = ДаніОбʼєктаТипуСтруктура {
      назва = назва_зовнішня(назва_т8),
      параметри = Параметри { 0, пусто, 0 },
      повна_назва = повна_назва
    };

    обʼєкт_типу_структура.пм_тип = ПМ::створити_структуру(
      компілятор.пм_модуль,
      повна_назва.значення,
      ПМ::Параметри { 0, пусто, 0 }
    );

    змінна середовище_компіляції_структури = створити_середовище(компілятор, контекст.середовище);

    якщо контекст_виконання_шаблону == пусто {
      якщо назва_т8.розмір != 0 {
        змінити_в_середовищі(
          середовище_компіляції_структури,
          назва_зовнішня(назва_т8),
          Обʼєкт { ВидОбʼєктаТип, обʼєкт_типу_структура }
        );
      }
    } інакше {
      біб::змінити_в_реєстрі<ГотовіАргументиШаблону, Обʼєкт>(
        контекст_виконання_шаблону.обʼєкт_шаблону.готові,
        контекст_виконання_шаблону.готові_аргументи_шаблону,
        Обʼєкт { ВидОбʼєктаТип, обʼєкт_типу_структура }
      );
    }

    змінна результат_доповнення = доповнити_структуру(
      компілятор,
      Контекст {
        розібраний_текст = контекст.розібраний_текст,
        середовище = середовище_компіляції_структури,
        кк_дії = контекст.кк_дії
      },
      обʼєкт_типу_структура,
      дані_структури,
      місцезнаходження
    );

    якщо результат_доповнення.помилка != пусто {
      вернути РезультатОбʼєктаТипу { пусто, помилка = результат_доповнення.помилка };
    }

    вернути РезультатОбʼєктаТипу { обʼєкт_типу_структура, помилка = пусто };
  }

  зовнішня дія скомпілювати_визначити_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу {
    якщо дані_структури.ідентифікатор.заповнено == позитивне(ні) {
      вернути РезультатОбʼєктаТипу {
        ...,
        помилка = створити_помилку(
          компілятор,
          "Неможливо декларувати структуру без назви.",
          створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, контекст.розібраний_текст, місцезнаходження)
        )
      };
    }

    змінна назва_т8 = розбирач::отримати_значення_слова(
      т8 { контекст.розібраний_текст.текст_коду.значення.розмір, контекст.розібраний_текст.текст_коду.значення.дані },
      контекст.розібраний_текст.слова.дані[дані_структури.ідентифікатор.значення.позиція_слова]
    );

    змінна обʼєкт_з_середовища: Обʼєкт;
    якщо знайти_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), обʼєкт_з_середовища::адреса) {
      якщо обʼєкт_з_середовища.вид == ВидОбʼєктаТип {
        змінна обʼєкт_типу = обʼєкт_з_середовища.дані як адреса<ОбʼєктТипу>;

        якщо обʼєкт_типу.вид == ВидОбʼєктаТипуСтруктура {
          змінна дані_обʼєкта_типу_структура = обʼєкт_типу.дані як ДаніОбʼєктаТипуСтруктура;

          змінна результат_доповнення = доповнити_структуру(
            компілятор,
            контекст,
            обʼєкт_типу,
            дані_структури,
            місцезнаходження
          );

          якщо результат_доповнення.помилка != пусто {
            вернути РезультатОбʼєктаТипу { пусто, помилка = результат_доповнення.помилка };
          }

          вернути РезультатОбʼєктаТипу { обʼєкт_типу, помилка = пусто };
        }
      }

      вернути РезультатОбʼєктаТипу {
        ...,
        помилка = створити_помилку_субʼєкт_вже_визначено(
          компілятор,
          Місцезнаходження { контекст.розібраний_текст, дані_структури.ідентифікатор.значення.позиція_слова },
          назва_т8
        )
      };
    }

    змінна результат = скомпілювати_структуру(
      компілятор,
      контекст,
      пусто,
      дані_структури,
      місцезнаходження
    );

    якщо результат.помилка != пусто {
      вернути результат;
    }

    змінити_в_середовищі(контекст.середовище, назва_зовнішня(назва_т8), Обʼєкт { ВидОбʼєктаТип, результат.обʼєкт_типу });

    вернути результат;
  }
}