взяти визначення біб/Виділяч;
взяти визначення біб/Реєстр;
взяти визначення біб/Друк;
взяти визначення ПМ;
взяти визначення КД;
взяти визначення ./розбирач;

секція КЦ {
  структура Компілятор;
  структура Середовище;
  структура Обʼєкт;
  структура ОбʼєктТипу;
  структура ОбʼєктДії;
  структура ОбʼєктСекції;
  структура ОбʼєктШаблону;
  структура ОбʼєктНезавантаженогоЗначення;
  структура ОбʼєктЗначення;
  структура ОбʼєктСирогоЗначення;
  структура Назва;

  синонім ВидОбʼєктаТип = 1;
  синонім ВидОбʼєктаДія = 2;
  синонім ВидОбʼєктаСекція = 3;
  синонім ВидОбʼєктаШаблон = 4;
  синонім ВидОбʼєктаНезавантаженеЗначення = 5;
  синонім ВидОбʼєктаЗначення = 6;
  синонім ВидОбʼєктаСиреЗначення = 7;

  синонім ВидСирогоОбʼєктаЧисло = 1;

  синонім ВидОбʼєктаТипуПростий = 1;
  синонім ВидОбʼєктаТипуСтруктура = 2;
  синонім ВидОбʼєктаТипуДія = 3;
  синонім ВидОбʼєктаТипуАдреса = 4;
  синонім ВидОбʼєктаТипуПамʼять = 5;
  синонім ВидОбʼєктаТипуМасив = 6;
  синонім ВидОбʼєктаТипуВаріація = 7;

  синонім ВидНазвиЗовнішня = 1; // означає, що назва керується поза обʼєктом
  синонім ВидНазвиКопія = 2; // означає, що назва належить обʼєкту і разом з ним помре

  синонім ВидимістьДіїВнутрішня = 1;
  синонім ВидимістьДіїМісцева = 2;
  синонім ВидимістьДіїЗовнішня = 3;

  структура Шлях {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  структура Байти {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  структура Назва {
    вид: позитивне;
    значення: т8;
  }

  дія назва_зовнішня(значення: т8): Назва {
    вернути Назва {
      вид = ВидНазвиЗовнішня,
      значення = значення
    };
  }

  дія назва_копія(значення: т8): Назва {
    вернути Назва {
      вид = ВидНазвиКопія,
      значення = значення
    };
  }

  структура ОбʼєктНезавантаженогоЗначення {
    тип: адреса<ОбʼєктТипу>;
    пм_значення: адреса<ПМ::Значення>;
  }

  структура ОбʼєктЗначення {
    тип: адреса<ОбʼєктТипу>;
    пм_значення: адреса<ПМ::Значення>;
  }

  структура ОбʼєктСирогоЗначення {
    вид: позитивне;
    дані: т8; // звільнити коли обʼєкт не потрібен
  }

  структура Обʼєкт {
    вид: позитивне;
    дані: адреса<ОбʼєктТипу>
        | адреса<ОбʼєктДії>
        | адреса<ОбʼєктСекції>
        | адреса<ОбʼєктШаблону>
        | ОбʼєктНезавантаженогоЗначення
        | ОбʼєктЗначення
        | ОбʼєктСирогоЗначення;
  }

  структура Параметр {
    назва: Назва;
    тип: адреса<ОбʼєктТипу>;
  }

  структура Параметри {
    розмір: позитивне;
    дані: памʼять<Параметр>;
    вмісткість: позитивне;
  }

  структура ДаніОбʼєктаТипуПростий {
    назва: Назва;
  }

  структура ДаніОбʼєктаТипуСтруктура {
    назва: Назва;
    параметри: Параметри;
  }

  структура ДаніОбʼєктаТипуДія {
    параметри: Параметри;
    тип_результату: адреса<ОбʼєктТипу>;
    пм_тип_інструкції: адреса<ПМ::Тип>;
  }

  структура ДаніОбʼєктаТипуАдреса {
    тип_даних: адреса<ОбʼєктТипу>;
  }

  структура ДаніОбʼєктаТипуПамʼять {
    тип_даних: адреса<ОбʼєктТипу>;
  }

  структура ДаніОбʼєктаТипуМасив {
    тип_даних: адреса<ОбʼєктТипу>;
    розмір_масиву: позитивне;
  }

  структура ДаніОбʼєктаТипуВаріація {
    кількість_типів: позитивне;
    типи: памʼять<адреса<ОбʼєктТипу>>;
  }

  структура ОбʼєктТипу {
    наступний: адреса<ОбʼєктТипу>;
    вид: позитивне;
    пм_тип: адреса<ПМ::Тип>;
    дані: ДаніОбʼєктаТипуПростий
        | ДаніОбʼєктаТипуСтруктура
        | ДаніОбʼєктаТипуДія
        | ДаніОбʼєктаТипуАдреса
        | ДаніОбʼєктаТипуПамʼять
        | ДаніОбʼєктаТипуМасив
        | ДаніОбʼєктаТипуВаріація;
  }

  структура Крок {
    назва: Назва;
    обʼєкт_дії: адреса<ОбʼєктДії>;
    пм_крок: адреса<ПМ::Крок>;
  }

  структура Кроки {
    розмір: позитивне;
    дані: памʼять<Крок>;
    вмісткість: позитивне;
  }

  структура Стрибок {
    назва: Назва;
    обʼєкт_дії: адреса<ОбʼєктДії>;
    пм_стрибок: адреса<ПМ::Стрибок>;
    місцезнаходження: розбирач::Місцезнаходження;
  }

  структура Стрибки {
    розмір: позитивне;
    дані: памʼять<Стрибок>;
    вмісткість: позитивне;
  }

  структура ОбʼєктДії {
    наступний: адреса<ОбʼєктДії>;
    видимість: позитивне;
    назва: Назва;
    параметри: Параметри;
    тип_результату: адреса<ОбʼєктТипу>;
    тип: адреса<ОбʼєктТипу>;
    пм_інструкція: адреса<ПМ::Інструкція>;
    має_тіло: позитивне;
    кроки: Кроки;
    стрибки: Стрибки;
  }

  структура ОбʼєктСекції {
    наступний: адреса<ОбʼєктСекції>;
    назва: Назва;
    середовище: адреса<Середовище>;
  }

  синонім ВидАргументаГотовихШаблонуОбʼєктТипу = 1;
  синонім ВидАргументаГотовихШаблонуОбʼєктСирогоЗначення = 2;

  структура ГотовийАргументШаблону {
    вид: позитивне;
    значення: адреса<ОбʼєктТипу> | ОбʼєктСирогоЗначення;
  }

  структура ГотовіАргументиШаблону {
    розмір: позитивне;
    дані: памʼять<ГотовийАргументШаблону>;
  }

  структура КонтекстКомпіляціїДії {
    обʼєкт_дії: адреса<ОбʼєктДії>;
    крок_накопичень: Крок;
    значення_вернути: ОбʼєктНезавантаженогоЗначення;
    крок_вернути: Крок;
    поточний_крок: Крок;
  }

  структура КонтекстКомпіляціїВиконанняШаблону {
    обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    готові_аргументи_шаблону: ГотовіАргументиШаблону;
  }

  синонім КодуванняТ8 = 1;
  синонім КодуванняЮ8 = 2;

  структура ТекстКоду {
    шлях: Шлях;
    значення: т8;
    кодування_оригінального_значення: позитивне;
    оригінальне_значення: Байти;
    місцезнаходження_оригінального_значення: КД::Місцезнаходження;
  }

  структура РозібранийТекст {
    текст_коду: адреса<ТекстКоду>;
    слова: КЦ::розбирач::Слова;
    сполуки: КЦ::розбирач::Сполуки;
  }

  структура Контекст {
    розібраний_текст: адреса<РозібранийТекст>;
    середовище: адреса<Середовище>;
    обʼєкт_секції: адреса<ОбʼєктСекції>;
    кк_дії: адреса<КонтекстКомпіляціїДії>;
    кк_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>;
  }

  структура ОбʼєктШаблону {
    наступний: адреса<ОбʼєктШаблону>;
    назва: Назва;
    параметри: Параметри;
    сполука: адреса<розбирач::Сполука>;
    готові: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>;
    контекст_компіляції: Контекст;
  }

  структура Середовище {
    компілятор: адреса<Компілятор>;
    зовнішнє: адреса<Середовище>;
    субʼєкти: адреса<біб::Реєстр<Назва, Обʼєкт>>;
    обʼєкт_секції: адреса<ОбʼєктСекції>;
    обʼєкт_дії: адреса<ОбʼєктДії>;
  }

  зовнішня дія створити_середовище(компілятор: адреса<Компілятор>, зовнішнє: адреса<Середовище>): адреса<Середовище>;

  структура Компілятор {
    виділяч: адреса<біб::Виділяч>;
    пм_аркуш: адреса<ПМ::Аркуш>;
    глобальне_середовище: адреса<Середовище>;
    тип_ніщо: адреса<ОбʼєктТипу>;
    тип_логічне: адреса<ОбʼєктТипу>;
    тип_ц8: адреса<ОбʼєктТипу>;
    тип_ц16: адреса<ОбʼєктТипу>;
    тип_ц32: адреса<ОбʼєктТипу>;
    тип_ц64: адреса<ОбʼєктТипу>;
    тип_ціле: адреса<ОбʼєктТипу>;
    тип_п8: адреса<ОбʼєктТипу>;
    тип_п16: адреса<ОбʼєктТипу>;
    тип_п32: адреса<ОбʼєктТипу>;
    тип_п64: адреса<ОбʼєктТипу>;
    тип_позитивне: адреса<ОбʼєктТипу>;
    тип_д32: адреса<ОбʼєктТипу>;
    тип_д64: адреса<ОбʼєктТипу>;
    тип_адреса: адреса<ОбʼєктТипу>;
    тип_памʼять: адреса<ОбʼєктТипу>;
    тип_текст: адреса<ОбʼєктТипу>;
    тип_т8: адреса<ОбʼєктТипу>;
    тип_т16: адреса<ОбʼєктТипу>;
    тип_т32: адреса<ОбʼєктТипу>;
    тип_ю8: адреса<ОбʼєктТипу>;
    тип_ю16: адреса<ОбʼєктТипу>;
    тип_ю32: адреса<ОбʼєктТипу>;
    обʼєкт_значення_так: ОбʼєктЗначення;
    обʼєкт_значення_ні: ОбʼєктЗначення;
    обʼєкт_значення_пусто: ОбʼєктЗначення;
    перший_обʼєкт_дії: адреса<ОбʼєктДії>;
    останній_обʼєкт_дії: адреса<ОбʼєктДії>;
    перший_обʼєкт_типу: адреса<ОбʼєктТипу>;
    останній_обʼєкт_типу: адреса<ОбʼєктТипу>;
    перший_обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    останній_обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    перший_обʼєкт_секції: адреса<ОбʼєктСекції>;
    останній_обʼєкт_секції: адреса<ОбʼєктСекції>;
  }

  дія виділити<Т>(компілятор: адреса<Компілятор>): адреса<Т> {
    вернути біб::виділити<Т>(компілятор.виділяч);
  }

  дія перевиділити<Т>(компілятор: адреса<Компілятор>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
    вернути біб::перевиділити<Т>(компілятор.виділяч, значення, кількість);
  }

  дія звільнити(компілятор: адреса<Компілятор>, значення: невідома_адреса) {
    біб::звільнити(компілятор.виділяч, значення);
  }

  дія виділити_памʼять<Т>(компілятор: адреса<Компілятор>, кількість: позитивне): памʼять<Т> {
    вернути біб::виділити_памʼять<Т>(компілятор.виділяч, кількість);
  }

  дія перевиділити_памʼять<Т>(компілятор: адреса<Компілятор>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути біб::перевиділити_памʼять<Т>(компілятор.виділяч, значення, кількість);
  }

  дія звільнити_памʼять(компілятор: адреса<Компілятор>, значення: невідома_памʼять) {
    біб::звільнити_памʼять(компілятор.виділяч, значення);
  }

  зовнішня дія створити_тип_адреси(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  зовнішня дія створити_тип_памʼяті(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  зовнішня дія створити_тип_дії(компілятор: адреса<Компілятор>, параметри: Параметри, тип_результату: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  зовнішня дія створити_варіативний_тип(компілятор: адреса<Компілятор>, кількість_типів: позитивне, типи: памʼять<адреса<ОбʼєктТипу>>): адреса<ОбʼєктТипу>;

  зовнішня дія створити_компілятор(виділяч: адреса<біб::Виділяч>): адреса<Компілятор>;
  зовнішня дія знищити_компілятор(компілятор: адреса<Компілятор>);

  дія виділити_копію_шляху(компілятор: адреса<Компілятор>, шлях: Шлях): Шлях {
    змінна копія = Шлях {
      шлях.розмір,
      виділити_памʼять<п8>(компілятор, шлях.розмір)
    };
    змінна п: позитивне = 0;
    поки п < шлях.розмір {
      копія.дані[п] = шлях.дані[п];
      п += 1;
    }
    вернути копія;
  }

  структура МісцезнаходженняПомилки {
    текст_коду: адреса<ТекстКоду>; // текст коду в помилці має бути знищено тим хто обробляє помилку;
                                   // знищенню підлягає як шлях, так і значення
    позиція_в_тексті: позитивне;
    рядок: позитивне;
    стовпець: позитивне;
  }

  дія створити_місцезнаходження_помилки(компілятор: адреса<Компілятор>, текст_коду: адреса<ТекстКоду>, позиція_в_тексті: позитивне, рядок: позитивне, стовпець: позитивне): адреса<МісцезнаходженняПомилки> {
    змінна місцезнаходження_помилки = виділити<МісцезнаходженняПомилки>(компілятор);
    місцезнаходження_помилки.текст_коду = текст_коду;
    місцезнаходження_помилки.позиція_в_тексті = позиція_в_тексті;
    місцезнаходження_помилки.рядок = рядок;
    місцезнаходження_помилки.стовпець = стовпець;
    вернути місцезнаходження_помилки;
  }

  дія знищити_місцезнаходження_помилки(компілятор: адреса<Компілятор>, місцезнаходження_помилки: адреса<МісцезнаходженняПомилки>) {
    звільнити_памʼять(компілятор, місцезнаходження_помилки.текст_коду.шлях.дані);
    звільнити_памʼять(компілятор, місцезнаходження_помилки.текст_коду.значення.дані);
    звільнити(компілятор, місцезнаходження_помилки.текст_коду);
    звільнити(компілятор, місцезнаходження_помилки);
  }

  структура Помилка {
    повідомлення: т8;
    місцезнаходження: адреса<МісцезнаходженняПомилки>;
  }

  дія створити_помилку(компілятор: адреса<Компілятор>, повідомлення: т8, місцезнаходження: адреса<МісцезнаходженняПомилки>): адреса<Помилка> {
    змінна помилка = виділити<Помилка>(компілятор);
    помилка.повідомлення = повідомлення;
    помилка.місцезнаходження = місцезнаходження;
    вернути помилка;
  }

  дія знищити_помилку(компілятор: адреса<Компілятор>, помилка: адреса<Помилка>) {
    якщо помилка.місцезнаходження != пусто {
      знищити_місцезнаходження_помилки(компілятор, помилка.місцезнаходження);
    }
    звільнити(компілятор, помилка);
  }

  структура Результат {
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєкта {
    обʼєкт: Обʼєкт;
    помилка: адреса<Помилка>;
  }

  структура РезультатЗначення {
    обʼєкт_значення: ОбʼєктЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатАбоПомилка {
    помилка: адреса<Помилка>;
  }

  дія створити_місцезнаходження_помилки_з_місцезнаходження(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, місцезнаходження: розбирач::Місцезнаходження): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[місцезнаходження.позиці_початкового_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія створити_місцезнаходження_помилки_зі_сполуки(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, сполука: адреса<розбирач::Сполука>): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[сполука.місцезнаходження.позиці_початкового_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія створити_місцезнаходження_помилки_з_позиції_слова(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, позиція_слова: позитивне): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[позиція_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія результат_помилка(компілятор: адреса<Компілятор>, повідомлення: т8): Результат {
    змінна помилка = створити_помилку(компілятор, повідомлення, пусто);

    вернути Результат {
      помилка = помилка
    };
  }

  дія результат_обʼєкта_помилка(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, місцезнаходження: розбирач::Місцезнаходження, повідомлення: т8): РезультатОбʼєкта {
    змінна помилка = створити_помилку(компілятор, повідомлення, створити_місцезнаходження_помилки_з_місцезнаходження(компілятор, розібраний_текст, місцезнаходження));

    вернути РезультатОбʼєкта {
      Обʼєкт { ... },
      помилка = помилка
    };
  }

  дія шлях_з_ю8(значення: ю8): Шлях {
    вернути Шлях { значення.розмір, значення.дані };
  }

  структура РезультатОбʼєктаДії {
    обʼєкт_дії: адреса<ОбʼєктДії>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаТипу {
    обʼєкт_типу: адреса<ОбʼєктТипу>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаШаблону {
    обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаСекції {
    обʼєкт_секції: адреса<ОбʼєктСекції>;
    помилка: адреса<Помилка>;
  }

  структура РезультатПараметрів {
    параметри: Параметри;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаЗначення {
    обʼєкт_значення: ОбʼєктЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаНезавантаженогоЗначення {
    обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатКомпіляціїТіла {
    помилка: адреса<Помилка>;
  }

  зовнішня дія скомпілювати_тіло(компілятор: адреса<Компілятор>, контекст: Контекст, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла;
  зовнішня дія скомпілювати_параметри_дії(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів;

  зовнішня дія скомпілювати_значення(компілятор: адреса<Компілятор>, контекст: Контекст, сполука: адреса<розбирач::Сполука>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_значення_як_значення(компілятор: адреса<Компілятор>, контекст: Контекст, сполука: адреса<розбирач::Сполука>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;
  зовнішня дія скомпілювати_значення_як_тип(компілятор: адреса<Компілятор>, контекст: Контекст, сполука: адреса<розбирач::Сполука>, перевірка_на_повність: логічне): РезультатОбʼєктаТипу;
  зовнішня дія отримати_як_тип(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, перевірка_на_повність: логічне): РезультатОбʼєктаТипу;
  зовнішня дія отримати_як_значення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;

  зовнішня дія розібрати_число(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, значення: т8, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;

  зовнішня дія скомпілювати_число(компілятор: адреса<Компілятор>, контекст: Контекст, дані_числа: розбирач::ДаніСполукиЧисло, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії;
  зовнішня дія скомпілювати_отримати_з_середовища(компілятор: адреса<Компілятор>, контекст: Контекст, дані_прочитати: розбирач::ДаніСполукиПрочитати, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_властивість: розбирач::ДаніСполукиОтриматиВластивість, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_отримати_елемент(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_елемент: розбирач::ДаніСполукиОтриматиЕлемент, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_отримати_секційну_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_секційну_властивість: розбирач::ДаніСполукиОтриматиСекційнуВластивість, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_властивість: розбирач::ДаніСполукиЗмінитиВластивість, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_змінити_секційну_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_секційну_властивість: розбирач::ДаніСполукиЗмінитиСекційнуВластивість, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_змінити_елемент(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_елемент: розбирач::ДаніСполукиЗмінитиЕлемент, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_виконати_шаблон: розбирач::ДаніСполукиВиконатиШаблон, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_виконати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_виконати_дію: розбирач::ДаніСполукиВиконатиДію, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_параметри_шаблону(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів;
  зовнішня дія скомпілювати_операцію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_операції: розбирач::ДаніСполукиОперація, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_взяти(компілятор: адреса<Компілятор>, контекст: Контекст, дані_взяти: розбирач::ДаніСполукиВзяти, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_обʼєкт(компілятор: адреса<Компілятор>, контекст: Контекст, дані_обʼєкта: розбирач::ДаніСполукиОбʼєкт, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія скомпілювати_однооперацію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_однооперації: розбирач::ДаніСполукиОднооперація, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_секцію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_секції: розбирач::ДаніСполукиСекція, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаСекції;
  зовнішня дія скомпілювати_синонім(компілятор: адреса<Компілятор>, контекст: Контекст, дані_синоніма: розбирач::ДаніСполукиСинонім, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_текст(компілятор: адреса<Компілятор>, контекст: Контекст, дані_тексту: розбирач::ДаніСполукиТекст, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  зовнішня дія скомпілювати_тип_дії(компілятор: адреса<Компілятор>, контекст: Контекст, дані_типу_дії: розбирач::ДаніСполукиТипДії, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  зовнішня дія скомпілювати_варіативний_тип(компілятор: адреса<Компілятор>, контекст: Контекст, дані_варіативного_типу: розбирач::ДаніСполукиВаріативнийТип, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;

  зовнішня дія скомпілювати_якщо(компілятор: адреса<Компілятор>, контекст: Контекст, дані_якщо: розбирач::ДаніСполукиЯкщо, місцезнаходження: розбирач::Місцезнаходження): Результат;
  зовнішня дія скомпілювати_поки(компілятор: адреса<Компілятор>, контекст: Контекст, дані_поки: розбирач::ДаніСполукиПоки, місцезнаходження: розбирач::Місцезнаходження): Результат;
  зовнішня дія скомпілювати_вернути(компілятор: адреса<Компілятор>, контекст: Контекст, дані_вернути: розбирач::ДаніСполукиВернути, місцезнаходження: розбирач::Місцезнаходження): Результат;
  зовнішня дія скомпілювати_змінити_в_середовищі(компілятор: адреса<Компілятор>, контекст: Контекст, дані_записати: розбирач::ДаніСполукиЗаписати, місцезнаходження: розбирач::Місцезнаходження): РезультатАбоПомилка;
  зовнішня дія скомпілювати_визначити_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії;
  зовнішня дія скомпілювати_визначити_ціль(компілятор: адреса<Компілятор>, контекст: Контекст, дані_цілі: розбирач::ДаніСполукиЦіль, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаНезавантаженогоЗначення;
  зовнішня дія скомпілювати_визначити_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаШаблону;
  зовнішня дія скомпілювати_визначити_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  зовнішня дія скомпілювати_визначити_секцію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_секції: розбирач::ДаніСполукиСекція, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаСекції;
  зовнішня дія скомпілювати_визначити_синонім(компілятор: адреса<Компілятор>, контекст: Контекст, дані_синоніма: розбирач::ДаніСполукиСинонім, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  зовнішня дія скомпілювати_крок(компілятор: адреса<Компілятор>, контекст: Контекст, дані_кроку: розбирач::ДаніСполукиКрок, місцезнаходження: розбирач::Місцезнаходження): Результат;
  зовнішня дія скомпілювати_стрибнути(компілятор: адреса<Компілятор>, контекст: Контекст, дані_стрибнути: розбирач::ДаніСполукиСтрибнути, місцезнаходження: розбирач::Місцезнаходження): Результат;

  зовнішня дія прочитати_файл(компілятор: адреса<Компілятор>, шлях: Шлях, вихід: адреса<Байти>): логічне;

  // шлях буде скопійовано
  зовнішня дія взяти_файл_ю8(компілятор: адреса<Компілятор>, шлях: Шлях, вихід_помилки: адреса<адреса<Помилка>>): логічне;
  зовнішня дія скомпілювати_текст_коду(компілятор: адреса<Компілятор>, текст_коду: адреса<ТекстКоду>, вихід_помилки: адреса<адреса<Помилка>>): логічне;

  зовнішня дія отримати_лл(компілятор: адреса<Компілятор>, вихід: адреса<ю8>, вихід_помилки: адреса<адреса<Помилка>>): логічне;

  зовнішня дія перекодувати_т8_в_ю8_з_місцезнаходженнями(компілятор: адреса<Компілятор>, значення: ю8, вихід: адреса<т8>, вихід_місцезнаходжень: адреса<КД::Місцезнаходження>): логічне;
  зовнішня дія отримати_т8_з_ю8(компілятор: адреса<Компілятор>, значення: ю8): т8;
  зовнішня дія отримати_ю8_з_т8(компілятор: адреса<Компілятор>, значення: т8): ю8;

  зовнішня дія змінити_в_середовищі(середовище: адреса<Середовище>, назва: Назва, обʼєкт: Обʼєкт);
  зовнішня дія знайти_в_середовищі(середовище: адреса<Середовище>, назва: Назва, вихід: адреса<Обʼєкт>): логічне;
  зовнішня дія знайти_в_середовищі_рекурсивно(середовище: адреса<Середовище>, назва: Назва, вихід: адреса<Обʼєкт>): логічне;

  зовнішня дія спробувати_розібрати_ціле_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<ц64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;
  зовнішня дія спробувати_розібрати_позитивне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<п64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;
  зовнішня дія спробувати_розібрати_дійсне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<д64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;

  зовнішня дія звільнити_параметри(компілятор: адреса<Компілятор>, параметри: Параметри);
}

секція КЦ {
  структура Аргумент {
    обʼєкт: Обʼєкт;
    місцезнаходження: розбирач::Місцезнаходження;
  }

  зовнішня дія обʼєкт_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт): РезультатОбʼєкта;

  зовнішня дія обʼєкт_типу_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_типу_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>): РезультатОбʼєкта;

  зовнішня дія обʼєкт_дії_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_дії_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>): РезультатОбʼєкта;

  зовнішня дія обʼєкт_секції_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_секції_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>): РезультатОбʼєкта;

  зовнішня дія обʼєкт_шаблону_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_шаблону_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>):РезультатОбʼєкта;

  зовнішня дія обʼєкт_сирого_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_сирого_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: ОбʼєктСирогоЗначення): РезультатОбʼєкта;

  зовнішня дія обʼєкт_незавантаженого_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_незавантаженого_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення): РезультатОбʼєкта;

  зовнішня дія обʼєкт_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  зовнішня дія обʼєкт_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта;

  зовнішня дія створити_помилку_невірний_тип_вернути(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): адреса<Помилка>;
}

секція КЦ {
  дія виділити_обʼєкт_дії(компілятор: адреса<Компілятор>): адреса<ОбʼєктДії> {
    змінна обʼєкт_дії = виділити<ОбʼєктДії>(компілятор);
    обʼєкт_дії.наступний = пусто;
    обʼєкт_дії.видимість = ВидимістьДіїВнутрішня;
    обʼєкт_дії.назва = назва_зовнішня(т8 { 0, пусто });
    обʼєкт_дії.параметри = Параметри { 0, пусто, 0 };
    обʼєкт_дії.тип_результату = компілятор.тип_ніщо;
    обʼєкт_дії.тип = пусто;
    обʼєкт_дії.пм_інструкція = пусто;
    обʼєкт_дії.має_тіло = позитивне(ні);
    обʼєкт_дії.кроки = Кроки { 0, пусто, 0 };
    обʼєкт_дії.стрибки = Стрибки { 0, пусто, 0 };
    якщо компілятор.перший_обʼєкт_дії == пусто {
      компілятор.перший_обʼєкт_дії = обʼєкт_дії;
    }
    якщо компілятор.останній_обʼєкт_дії == пусто {
      компілятор.останній_обʼєкт_дії = обʼєкт_дії;
    } інакше {
      компілятор.останній_обʼєкт_дії.наступний = обʼєкт_дії;
      компілятор.останній_обʼєкт_дії = обʼєкт_дії;
    }
    вернути обʼєкт_дії;
  }

  дія звільнити_обʼєкт_дії(компілятор: адреса<Компілятор>, обʼєкт_дії: адреса<ОбʼєктДії>) {
    якщо обʼєкт_дії.назва.вид == ВидНазвиКопія {
      звільнити_памʼять(компілятор, обʼєкт_дії.назва.значення.дані);
    }
    звільнити(компілятор, обʼєкт_дії);
  }

  дія виділити_обʼєкт_секції(компілятор: адреса<Компілятор>): адреса<ОбʼєктСекції> {
    змінна обʼєкт_секції = виділити<ОбʼєктСекції>(компілятор);
    обʼєкт_секції.наступний = пусто;
    обʼєкт_секції.назва = назва_зовнішня(т8 { 0, пусто });
    обʼєкт_секції.середовище = пусто;
    якщо компілятор.перший_обʼєкт_секції == пусто {
      компілятор.перший_обʼєкт_секції = обʼєкт_секції;
    }
    якщо компілятор.останній_обʼєкт_секції == пусто {
      компілятор.останній_обʼєкт_секції = обʼєкт_секції;
    } інакше {
      компілятор.останній_обʼєкт_секції.наступний = обʼєкт_секції;
      компілятор.останній_обʼєкт_секції = обʼєкт_секції;
    }
    вернути обʼєкт_секції;
  }

  дія звільнити_обʼєкт_секції(компілятор: адреса<Компілятор>, обʼєкт_секції: адреса<ОбʼєктСекції>) {
    якщо обʼєкт_секції.назва.вид == ВидНазвиКопія {
      звільнити_памʼять(компілятор, обʼєкт_секції.назва.значення.дані);
    }
    звільнити(компілятор, обʼєкт_секції);
  }

  дія виділити_обʼєкт_типу(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу> {
    змінна обʼєкт_типу = виділити<ОбʼєктТипу>(компілятор);
    обʼєкт_типу.наступний = пусто;
    обʼєкт_типу.вид = 0;
    обʼєкт_типу.пм_тип = пусто;
    якщо компілятор.перший_обʼєкт_типу == пусто {
      компілятор.перший_обʼєкт_типу = обʼєкт_типу;
    }
    якщо компілятор.останній_обʼєкт_типу == пусто {
      компілятор.останній_обʼєкт_типу = обʼєкт_типу;
    } інакше {
      компілятор.останній_обʼєкт_типу.наступний = обʼєкт_типу;
      компілятор.останній_обʼєкт_типу = обʼєкт_типу;
    }
    вернути обʼєкт_типу;
  }

  дія звільнити_обʼєкт_типу(компілятор: адреса<Компілятор>, обʼєкт_типу: адреса<ОбʼєктТипу>) {
    звільнити(компілятор, обʼєкт_типу);
  }
}

секція КЦ {
  дія змішати_готові_аргументи_шаблону(готовий_аргумент_шаблону: ГотовіАргументиШаблону, аргумент: невідома_адреса): позитивне {
    вернути готовий_аргумент_шаблону.розмір;
  }

  дія перевірити_готові_аргументи_шаблону(а: ГотовіАргументиШаблону, б: ГотовіАргументиШаблону, аргумент: невідома_адреса): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п].вид != б.дані[п].вид {
        вернути ні;
      }

      якщо а.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктТипу {
        ціль ад = а.дані[п].значення як адреса<ОбʼєктТипу>;
        ціль бд = б.дані[п].значення як адреса<ОбʼєктТипу>;

        якщо ад != бд {
          вернути ні;
        }
      }
      якщо а.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктСирогоЗначення {
        ціль ад = а.дані[п].значення як ОбʼєктСирогоЗначення;
        ціль бд = б.дані[п].значення як ОбʼєктСирогоЗначення;

        якщо ад.вид != бд.вид {
          вернути ні;
        }

        якщо ад.дані.розмір != бд.дані.розмір {
          вернути ні;
        }

        змінна пп: позитивне = 0;

        поки пп < ад.дані.розмір {
          якщо ад.дані.дані[пп] != бд.дані.дані[пп] {
            вернути ні;
          }

          пп += 1;
        }
      }

      п += 1;
    }

    вернути так;
  }

  дія виділити_обʼєкт_шаблону(компілятор: адреса<Компілятор>): адреса<ОбʼєктШаблону> {
    змінна обʼєкт_шаблону = виділити<ОбʼєктШаблону>(компілятор);
    обʼєкт_шаблону.наступний = пусто;
    обʼєкт_шаблону.назва = назва_зовнішня(т8 { 0, пусто });
    обʼєкт_шаблону.параметри = Параметри { 0, пусто, 0 };
    обʼєкт_шаблону.сполука = пусто;
    обʼєкт_шаблону.готові = біб::виділити_реєстр<ГотовіАргументиШаблону, Обʼєкт>(
      компілятор.виділяч,
      0,
      компілятор,
      змішати_готові_аргументи_шаблону,
      перевірити_готові_аргументи_шаблону,
      пусто,
      пусто
    );
    якщо компілятор.перший_обʼєкт_шаблону == пусто {
      компілятор.перший_обʼєкт_шаблону = обʼєкт_шаблону;
    }
    якщо компілятор.останній_обʼєкт_шаблону == пусто {
      компілятор.останній_обʼєкт_шаблону = обʼєкт_шаблону;
    } інакше {
      компілятор.останній_обʼєкт_шаблону.наступний = обʼєкт_шаблону;
      компілятор.останній_обʼєкт_шаблону = обʼєкт_шаблону;
    }
    вернути обʼєкт_шаблону;
  }
}

секція КЦ {
  структура НакопичувачТ8 {
    значення: т8;
  }

  дія зробити_накопичувач_т8(компілятор: адреса<Компілятор>): НакопичувачТ8 {
    вернути НакопичувачТ8 {
      значення = т8 { 0, пусто }
    };
  }

  дія покласти_в_накопичувач_т8(компілятор: адреса<Компілятор>, накопичувач_т8: адреса<НакопичувачТ8>, значення: т8) {
    накопичувач_т8.значення.дані = перевиділити_памʼять<п8>(компілятор, накопичувач_т8.значення.дані, накопичувач_т8.значення.розмір + значення.розмір);

    змінна п: позитивне = 0;

    поки п < значення.розмір {
      накопичувач_т8.значення.дані[накопичувач_т8.значення.розмір + п] = значення.дані[п];

      п += 1;
    }

    накопичувач_т8.значення.розмір += значення.розмір;
  }
}

секція КЦ {
  дія покласти_крок(компілятор: адреса<Компілятор>, кроки: адреса<Кроки>, крок: Крок) {
    якщо кроки.розмір == кроки.вмісткість {
      кроки.вмісткість += 1;
      кроки.дані = перевиділити_памʼять<Крок>(компілятор, кроки.дані, кроки.вмісткість);
    }
    кроки.дані[кроки.розмір] = крок;
    кроки.розмір += 1;
  }

  дія покласти_стрибок(компілятор: адреса<Компілятор>, стрибки: адреса<Стрибки>, стрибок: Стрибок) {
    якщо стрибки.розмір == стрибки.вмісткість {
      стрибки.вмісткість += 1;
      стрибки.дані = перевиділити_памʼять<Стрибок>(компілятор, стрибки.дані, стрибки.вмісткість);
    }
    стрибки.дані[стрибки.розмір] = стрибок;
    стрибки.розмір += 1;
  }

  дія покласти_параметр(компілятор: адреса<Компілятор>, параметри: адреса<Параметри>, параметр: Параметр) {
    якщо параметри.розмір == параметри.вмісткість {
      параметри.вмісткість += 1;
      параметри.дані = перевиділити_памʼять<Параметр>(компілятор, параметри.дані, параметри.вмісткість);
    }
    параметри.дані[параметри.розмір] = параметр;
    параметри.розмір += 1;
  }

  дія перевірити_тип(компілятор: адреса<Компілятор>, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): логічне {
    вернути очікуваний_тип == тип;
  }

  дія перевірити_тип_на_запис_і_конвертувати_якщо_треба(компілятор: адреса<Компілятор>, очікуваний_тип: адреса<ОбʼєктТипу>, обʼєкт_значення: адреса<ОбʼєктЗначення>): логічне {
    вернути очікуваний_тип == обʼєкт_значення.тип;
  }

  дія клонувати_назву(компілятор: адреса<Компілятор>, назва: Назва): Назва {
    змінна значення_копії = т8 { назва.значення.розмір, виділити_памʼять<п8>(компілятор, назва.значення.розмір) };

    змінна п: позитивне = 0;
    поки п < назва.значення.розмір {
      значення_копії.дані[п] = назва.значення.дані[п];

      п += 1;
    }

    вернути назва_копія(значення_копії);
  }

  дія клонувати_параметри(компілятор: адреса<Компілятор>, параметри: Параметри): Параметри {
    змінна клон = Параметри { параметри.розмір, виділити_памʼять<Параметр>(компілятор, параметри.розмір), параметри.розмір };

    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      клон.дані[п] = параметри.дані[п];
      якщо параметри.дані[п].назва.вид == ВидНазвиКопія {
        клон.дані[п].назва = клонувати_назву(компілятор, параметри.дані[п].назва);
      }

      п += 1;
    }

    вернути параметри;
  }

  дія перевірити_чи_назви_рівні(а: Назва, б: Назва): логічне {
    якщо а.значення.розмір != б.значення.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;
    поки п < а.значення.розмір {
      якщо а.значення.дані[п] != б.значення.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_назви(а: Назва, б: Назва, аргумент: невідома_адреса): логічне {
    якщо а.значення.розмір != б.значення.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.значення.розмір {
      якщо а.значення.дані[п] != б.значення.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_чи_тип_повний(компілятор: адреса<Компілятор>, тип: адреса<ОбʼєктТипу>): логічне {
    якщо тип.вид == ВидОбʼєктаТипуСтруктура {
      змінна дані_структури = тип.дані як ДаніОбʼєктаТипуСтруктура;

      вернути дані_структури.параметри.розмір > 0;
    }

    вернути так;
  }

  дія дізнатись_розмір_типу(компілятор: адреса<Компілятор>, тип: адреса<ОбʼєктТипу>): позитивне {
    вернути 0;
  }

  зовнішня дія перетворити_позитивне_на_т8(компілятор: адреса<Компілятор>, значення: позитивне, вихід: адреса<т8>): логічне;

  // шлях буде скопійовано
  дія створити_текст_коду(компілятор: адреса<Компілятор>, шлях: Шлях, значення: т8): адреса<ТекстКоду> {
    змінна текст_коду = виділити<ТекстКоду>(компілятор);
    текст_коду.шлях = виділити_копію_шляху(компілятор, шлях);
    текст_коду.значення = значення;
    текст_коду.кодування_оригінального_значення = КодуванняТ8;
    текст_коду.оригінальне_значення = Байти { значення.розмір, значення.дані };
    текст_коду.місцезнаходження_оригінального_значення = КД::Місцезнаходження { 0, пусто, 0 };
    вернути текст_коду;
  }

  // шлях буде скопійовано, значення буде перекодовано і збережено оригінальне
  дія створити_текст_коду_з_ю8(компілятор: адреса<Компілятор>, шлях: Шлях, значення: ю8): адреса<ТекстКоду> {
    змінна текст_коду = виділити<ТекстКоду>(компілятор);
    текст_коду.шлях = виділити_копію_шляху(компілятор, шлях);
    текст_коду.значення = т8 { 0, пусто };
    текст_коду.кодування_оригінального_значення = КодуванняЮ8;
    текст_коду.оригінальне_значення = Байти { значення.розмір, значення.дані };
    текст_коду.місцезнаходження_оригінального_значення = КД::Місцезнаходження { 0, пусто, 0 };
    якщо перекодувати_т8_в_ю8_з_місцезнаходженнями(компілятор, значення, текст_коду.значення::адреса, текст_коду.місцезнаходження_оригінального_значення::адреса) == ні {
      // потім: помилка
      вернути пусто;
    }
    вернути текст_коду;
  }

  дія виділити_копію_т8(компілятор: адреса<Компілятор>, значення: т8): т8 {
    якщо значення.розмір == 0 {
      вернути т8 { 0, пусто };
    }

    змінна дані_копії = виділити_памʼять<п8>(компілятор, значення.розмір);

    змінна п: позитивне = 0;

    поки п < значення.розмір {
      дані_копії[п] = значення.дані[п];

      п += 1;
    }

    вернути т8 { значення.розмір, дані_копії };
  }

  дія отримати_повну_назву_типу(компілятор: адреса<Компілятор>, обʼєкт_типу: адреса<ОбʼєктТипу>): т8 {
    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуПростий {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуПростий;

      вернути виділити_копію_т8(компілятор, дані.назва.значення);
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуСтруктура {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуСтруктура;

      вернути виділити_копію_т8(компілятор, дані.назва.значення);
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуДія {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуДія;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "(");

      змінна п: позитивне = 0;

      поки п < дані.параметри.розмір {
        змінна повна_назва_типу_параметра = отримати_повну_назву_типу(компілятор, дані.параметри.дані[п].тип);
        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_параметра);
        звільнити_памʼять(компілятор, повна_назва_типу_параметра.дані);

        якщо п != дані.параметри.розмір - 1 {
          покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ", ");
        }

        п += 1;
      }

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ") -> ");

      змінна повна_назва_типу_результату = отримати_повну_назву_типу(компілятор, дані.тип_результату);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_результату);
      звільнити_памʼять(компілятор, повна_назва_типу_результату.дані);

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуАдреса {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуАдреса;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "адреса<");

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ">");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуПамʼять {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуПамʼять;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "памʼять<");

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ">");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуМасив {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуМасив;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "[]");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуВаріація {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуВаріація;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      змінна п: позитивне = 0;

      поки п < дані.кількість_типів {
        змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.типи[п]);
        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
        звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

        якщо п != дані.кількість_типів - 1 {
          покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, " | ");
        }

        п += 1;
      }

      вернути накопичувач_т8.значення;
    }

    вернути виділити_копію_т8(компілятор, т8 { 0, пусто });
  }
}