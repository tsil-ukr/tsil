взяти визначення ./КЦ;

секція КЦ {
  дія створити_тип_т8(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу> {
    змінна параметри = Параметри { 2, виділити_памʼять<Параметр>(компілятор, 2), 2 };

    параметри.дані[0] = Параметр {
      назва = назва_зовнішня("розмір"),
      тип = компілятор.тип_н64,
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };
    параметри.дані[1] = Параметр {
      назва = назва_зовнішня("дані"),
      тип = створити_тип_памʼяті(компілятор, компілятор.тип_н8),
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };

    змінна обʼєкт_типу_структура = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = ДаніОбʼєктаТипуСтруктура {
      назва = назва_зовнішня("т8"),
      параметри = параметри,
      повна_назва = назва_зовнішня("т8"),
      готові_аргументи_шаблону = ГотовіАргументиШаблону { 0, пусто },
      обʼєкт_секції = пусто
    };

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_модуль, пм_параметри::адреса, ПМ::Параметр { параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    обʼєкт_типу_структура.пм_тип = ПМ::створити_структуру(
      компілятор.пм_модуль,
      "т8",
      пм_параметри
    );

    вернути обʼєкт_типу_структура;
  }

  дія створити_тип_т32(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу> {
    змінна параметри = Параметри { 2, виділити_памʼять<Параметр>(компілятор, 2), 2 };

    параметри.дані[0] = Параметр {
      назва = назва_зовнішня("розмір"),
      тип = компілятор.тип_н64,
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };
    параметри.дані[1] = Параметр {
      назва = назва_зовнішня("дані"),
      тип = створити_тип_памʼяті(компілятор, компілятор.тип_н8),
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };

    змінна обʼєкт_типу_структура = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = ДаніОбʼєктаТипуСтруктура {
      назва = назва_зовнішня("т32"),
      параметри = параметри,
      повна_назва = назва_зовнішня("т32"),
      готові_аргументи_шаблону = ГотовіАргументиШаблону { 0, пусто },
      обʼєкт_секції = пусто
    };

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_модуль, пм_параметри::адреса, ПМ::Параметр { параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    обʼєкт_типу_структура.пм_тип = ПМ::створити_структуру(
      компілятор.пм_модуль,
      "т32",
      пм_параметри
    );

    вернути обʼєкт_типу_структура;
  }

  дія створити_тип_ю8(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу> {
    змінна параметри = Параметри { 2, виділити_памʼять<Параметр>(компілятор, 2), 2 };

    параметри.дані[0] = Параметр {
      назва = назва_зовнішня("розмір"),
      тип = компілятор.тип_н64,
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };
    параметри.дані[1] = Параметр {
      назва = назва_зовнішня("дані"),
      тип = створити_тип_памʼяті(компілятор, компілятор.тип_н8),
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };

    змінна обʼєкт_типу_структура = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = ДаніОбʼєктаТипуСтруктура {
      назва = назва_зовнішня("ю8"),
      параметри = параметри,
      повна_назва = назва_зовнішня("ю8"),
      готові_аргументи_шаблону = ГотовіАргументиШаблону { 0, пусто },
      обʼєкт_секції = пусто
    };

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_модуль, пм_параметри::адреса, ПМ::Параметр { параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    обʼєкт_типу_структура.пм_тип = ПМ::створити_структуру(
      компілятор.пм_модуль,
      "ю8",
      пм_параметри
    );

    вернути обʼєкт_типу_структура;
  }

  дія створити_тип_ю32(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу> {
    змінна параметри = Параметри { 2, виділити_памʼять<Параметр>(компілятор, 2), 2 };

    параметри.дані[0] = Параметр {
      назва = назва_зовнішня("розмір"),
      тип = компілятор.тип_н64,
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };
    параметри.дані[1] = Параметр {
      назва = назва_зовнішня("дані"),
      тип = створити_тип_памʼяті(компілятор, компілятор.тип_н32),
      Місцезнаходження { пусто, 0 },
      Місцезнаходження { пусто, 0 }
    };

    змінна обʼєкт_типу_структура = виділити_обʼєкт_типу(компілятор);
    обʼєкт_типу_структура.вид = ВидОбʼєктаТипуСтруктура;
    обʼєкт_типу_структура.дані = ДаніОбʼєктаТипуСтруктура {
      назва = назва_зовнішня("ю32"),
      параметри = параметри,
      повна_назва = назва_зовнішня("ю32"),
      готові_аргументи_шаблону = ГотовіАргументиШаблону { 0, пусто },
      обʼєкт_секції = пусто
    };

    змінна пм_параметри = ПМ::Параметри { 0, пусто, 0 };
    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      ПМ::покласти_параметр(компілятор.пм_модуль, пм_параметри::адреса, ПМ::Параметр { параметри.дані[п].тип.пм_тип });
      п += 1;
    }

    обʼєкт_типу_структура.пм_тип = ПМ::створити_структуру(
      компілятор.пм_модуль,
      "ю32",
      пм_параметри
    );

    вернути обʼєкт_типу_структура;
  }

  зовнішня дія створити_компілятор(виділяч: адреса<біб::Виділяч>, пм_модуль: адреса<ПМ::Модуль>): адреса<Компілятор> {
    змінна компілятор = біб::виділити<Компілятор>(виділяч);

    компілятор.виділяч = виділяч;
    компілятор.пм_модуль = пм_модуль;

    компілятор.кореневий_шлях = Шлях { 0, пусто };
    компілятор.взяті_файли = створити_взяті_файли(компілятор);

    компілятор.перше_середовище = пусто;
    компілятор.останнє_середовище = пусто;
    компілятор.перший_обʼєкт_дії = пусто;
    компілятор.останній_обʼєкт_дії = пусто;
    компілятор.перший_обʼєкт_типу = пусто;
    компілятор.останній_обʼєкт_типу = пусто;
    компілятор.перший_обʼєкт_секції = пусто;
    компілятор.останній_обʼєкт_секції = пусто;
    компілятор.перший_обʼєкт_шаблону = пусто;
    компілятор.останній_обʼєкт_шаблону = пусто;
    компілятор.перший_обʼєкт_сирого_значення = пусто;
    компілятор.останній_обʼєкт_сирого_значення = пусто;
    компілятор.перший_розібраний_текст = пусто;
    компілятор.останній_розібраний_текст = пусто;
    компілятор.перший_текст_коду = пусто;
    компілятор.останній_текст_коду = пусто;

    компілятор.глобальне_середовище = створити_середовище(компілятор, пусто);

    компілятор.тип_ніщо = створити_простий_тип(компілятор, назва_зовнішня("ніщо"), ПМ::отримати_тип_ніщо(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ніщо"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ніщо });

    компілятор.тип_адреса = виділити_обʼєкт_типу(компілятор);
    компілятор.тип_адреса.вид = ВидОбʼєктаТипуАдреса;
    компілятор.тип_адреса.пм_тип = ПМ::отримати_тип_адреса(компілятор.пм_модуль);
    компілятор.тип_адреса.дані = ДаніОбʼєктаТипуАдреса {
      тип_даних = компілятор.тип_ніщо
    };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("адреса"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_адреса });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("невідома_адреса"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_адреса });

    компілятор.тип_памʼять = виділити_обʼєкт_типу(компілятор);
    компілятор.тип_памʼять.вид = ВидОбʼєктаТипуПамʼять;
    компілятор.тип_памʼять.пм_тип = ПМ::отримати_тип_адреса(компілятор.пм_модуль);
    компілятор.тип_памʼять.дані = ДаніОбʼєктаТипуПамʼять {
      тип_даних = компілятор.тип_ніщо
    };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("памʼять"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_памʼять });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("невідома_памʼять"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_памʼять });

    компілятор.тип_логічне = створити_простий_тип(компілятор, назва_зовнішня("логічне"), ПМ::отримати_тип_б1(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("логічне"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_логічне });

    компілятор.тип_ц8 = створити_простий_тип(компілятор, назва_зовнішня("ц8"), ПМ::отримати_тип_б8(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц8 });

    компілятор.тип_ц16 = створити_простий_тип(компілятор, назва_зовнішня("ц16"), ПМ::отримати_тип_б16(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц16"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц16 });

    компілятор.тип_ц32 = створити_простий_тип(компілятор, назва_зовнішня("ц32"), ПМ::отримати_тип_б32(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц32 });

    компілятор.тип_ц64 = створити_простий_тип(компілятор, назва_зовнішня("ц64"), ПМ::отримати_тип_б64(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ц64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц64 });

    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ціле"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ц64 });

    компілятор.тип_н8 = створити_простий_тип(компілятор, назва_зовнішня("н8"), ПМ::отримати_тип_б8(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("н8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н8 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н8 });

    компілятор.тип_н16 = створити_простий_тип(компілятор, назва_зовнішня("н16"), ПМ::отримати_тип_б16(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("н16"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н16 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п16"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н16 });

    компілятор.тип_н32 = створити_простий_тип(компілятор, назва_зовнішня("н32"), ПМ::отримати_тип_б32(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("н32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н32 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н32 });

    компілятор.тип_н64 = створити_простий_тип(компілятор, назва_зовнішня("н64"), ПМ::отримати_тип_б64(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("н64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н64 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("п64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н64 });

    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("натуральне"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н64 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("позитивне"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_н64 });

    компілятор.тип_р32 = створити_простий_тип(компілятор, назва_зовнішня("р32"), ПМ::отримати_тип_р32(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("р32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_р32 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("д32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_р32 });

    компілятор.тип_р64 = створити_простий_тип(компілятор, назва_зовнішня("р64"), ПМ::отримати_тип_р64(компілятор.пм_модуль));
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("р64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_р64 });
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("д64"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_р64 });

    компілятор.обʼєкт_значення_так = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, так) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("так"), Обʼєкт { ВидОбʼєктаЗначення, компілятор.обʼєкт_значення_так });

    компілятор.обʼєкт_значення_ні = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ні"), Обʼєкт { ВидОбʼєктаЗначення, компілятор.обʼєкт_значення_ні });

    компілятор.обʼєкт_значення_пусто = ОбʼєктЗначення { компілятор.тип_адреса, ПМ::отримати_значення_пусто(компілятор.пм_модуль) };
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("пусто"), Обʼєкт { ВидОбʼєктаЗначення, компілятор.обʼєкт_значення_пусто });

    компілятор.тип_т8 = створити_тип_т8(компілятор);
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("т8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_т8 });

    компілятор.тип_т32 = створити_тип_т32(компілятор);
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("т32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_т32 });

    компілятор.тип_ю8 = створити_тип_ю8(компілятор);
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ю8"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ю8 });

    компілятор.тип_ю32 = створити_тип_ю32(компілятор);
    змінити_в_середовищі(компілятор.глобальне_середовище, назва_зовнішня("ю32"), Обʼєкт { ВидОбʼєктаТип, компілятор.тип_ю32 });

    вернути компілятор;
  }

  зовнішня дія знищити_компілятор(компілятор: адреса<Компілятор>) {
    знищити_шлях(компілятор, компілятор.кореневий_шлях);

    знищити_взяті_файли(компілятор.взяті_файли);

    змінна поточне_середовище = компілятор.перше_середовище;
    поки поточне_середовище != пусто {
      змінна наступне = поточне_середовище.наступне;
      знищити_середовище(поточне_середовище);
      поточне_середовище = наступне;
    }

    змінна поточний_обʼєкт_дії = компілятор.перший_обʼєкт_дії;
    поки поточний_обʼєкт_дії != пусто {
      змінна наступний = поточний_обʼєкт_дії.наступний;
      знищити_обʼєкт_дії(компілятор, поточний_обʼєкт_дії);
      поточний_обʼєкт_дії = наступний;
    }

    змінна поточний_обʼєкт_секції = компілятор.перший_обʼєкт_секції;
    поки поточний_обʼєкт_секції != пусто {
      змінна наступний = поточний_обʼєкт_секції.наступний;
      знищити_обʼєкт_секції(компілятор, поточний_обʼєкт_секції);
      поточний_обʼєкт_секції = наступний;
    }

    змінна поточний_обʼєкт_типу = компілятор.перший_обʼєкт_типу;
    поки поточний_обʼєкт_типу != пусто {
      змінна наступний = поточний_обʼєкт_типу.наступний;
      знищити_обʼєкт_типу(компілятор, поточний_обʼєкт_типу);
      поточний_обʼєкт_типу = наступний;
    }

    змінна поточний_обʼєкт_шаблону = компілятор.перший_обʼєкт_шаблону;
    поки поточний_обʼєкт_шаблону != пусто {
      змінна наступний = поточний_обʼєкт_шаблону.наступний;
      знищити_обʼєкт_шаблону(компілятор, поточний_обʼєкт_шаблону);
      поточний_обʼєкт_шаблону = наступний;
    }

    змінна поточний_обʼєкт_сирого_значення = компілятор.перший_обʼєкт_сирого_значення;
    поки поточний_обʼєкт_сирого_значення != пусто {
      змінна наступний = поточний_обʼєкт_сирого_значення.наступний;
      знищити_обʼєкт_сирого_значення(компілятор, поточний_обʼєкт_сирого_значення);
      поточний_обʼєкт_сирого_значення = наступний;
    }

    змінна поточний_розібраний_текст = компілятор.перший_розібраний_текст;
    поки поточний_розібраний_текст != пусто {
      змінна наступний = поточний_розібраний_текст.наступний;
      знищити_розібраний_текст(поточний_розібраний_текст);
      поточний_розібраний_текст = наступний;
    }

    змінна поточний_текст_коду = компілятор.перший_текст_коду;
    поки поточний_текст_коду != пусто {
      змінна наступний = поточний_текст_коду.наступний;
      знищити_текст_коду(поточний_текст_коду);
      поточний_текст_коду = наступний;
    }

    // потім: знищити всі реєстри, накопичувачі, обʼєкти і тд
    біб::звільнити(компілятор.виділяч, компілятор);
  }
}