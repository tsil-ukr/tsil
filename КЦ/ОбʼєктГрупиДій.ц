взяти визначення Ц;

секція ц {
  місцева дія обʼєкт_групи_дій_додати(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_відняти(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось відняти");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_помножити(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось помножити");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_поділити(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_поділити_за_модулем(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось поділити_за_модулем");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_більше(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_менше(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_більше_рівно(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось більше_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_менше_рівно(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось менше_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_рівно(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_не_рівно(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось не_рівно");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_зсунути_вліво(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вліво");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_зсунути_вправо(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вправо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_зсунути_вправо_знаковий(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось зсунути_вправо_знаковий");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_ді(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось ді");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_дабо(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось дабо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_вабо(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось вабо");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_як(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось як");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_отримати_властивість(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_отримати_властивість_секції(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість_секції");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_отримати_за_позицією(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_за_позицією");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  структура ОбʼєктТипуАбоОбʼєктСирогоЗначення {
    вид: позитивне;
    дані: адреса<ОбʼєктТипу> | ОбʼєктСирогоЗначення;
  }

  місцева дія обʼєкт_групи_дій_виконати(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    ціль скомпільовані_типи_аргументів = виділити_накопичувач<ОбʼєктТипуАбоОбʼєктСирогоЗначення>();
//    відкласти звільнити_накопичувач(скомпільовані_типи_аргументів);
    змінна ціль ах: позитивне = 0;
    поки ах < кількість_аргументів {
      ціль аргумент = аргументи[ах];
      якщо аргумент.обʼєкт.вид == ВидОбʼєктаСиреЗначення {
        покласти_в_накопичувач<ОбʼєктТипуАбоОбʼєктСирогоЗначення>(скомпільовані_типи_аргументів, ОбʼєктТипуАбоОбʼєктСирогоЗначення { ВидОбʼєктаСиреЗначення, аргумент.обʼєкт.дані як ОбʼєктСирогоЗначення });
      } інакше {
        ціль результат_значення_аргумента = отримати_як_значення(К, інформація_середовища, місцезнаходження, аргумент.обʼєкт, пусто);
        якщо результат_значення_аргумента.помилка != пусто {
          вернути результат_помилка(результат_значення_аргумента.помилка);
        }
        ціль обʼєкт_значення_аргумента = результат_значення_аргумента.обʼєкт_значення;
        аргумент.обʼєкт = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_аргумента };
        покласти_в_накопичувач<ОбʼєктТипуАбоОбʼєктСирогоЗначення>(скомпільовані_типи_аргументів, ОбʼєктТипуАбоОбʼєктСирогоЗначення { ВидОбʼєктаТип, обʼєкт_значення_аргумента.тип });
      }
      ах = ах + 1;
    }
    змінна ціль знайдений_обʼєкт_дії: адреса<ОбʼєктДії> = пусто;
    змінна ціль дх: позитивне = 0;
    поки дх < обʼєкт_групи_дій.обʼєкти_дій.розмір {
      ціль обʼєкти_дій = обʼєкт_групи_дій.обʼєкти_дій;
      ціль обʼєкти_дій_дані = обʼєкти_дій.дані;
      ціль обʼєкт_дії = обʼєкти_дій_дані[дх];
      якщо обʼєкт_дії.параметри.розмір == кількість_аргументів {
        змінна ціль пх: позитивне = 0;
        змінна ціль кількість_норм_аргументів: позитивне = 0;
        поки пх < обʼєкт_дії.параметри.розмір {
          ціль скомпільований_тип_аргумента = скомпільовані_типи_аргументів.дані[пх];
          ціль тип_параметра = обʼєкт_дії.параметри.дані[пх].тип;
          якщо скомпільований_тип_аргумента.вид == ВидОбʼєктаТип {
            якщо перевірити_тип(скомпільований_тип_аргумента.дані як адреса<ОбʼєктТипу>, тип_параметра) == так {
              кількість_норм_аргументів += 1;
            }
          } інакше якщо скомпільований_тип_аргумента.вид == ВидОбʼєктаСиреЗначення {
            ціль обʼєкт_сирого_значення = скомпільований_тип_аргумента.дані як ОбʼєктСирогоЗначення;
            якщо обʼєкт_сирого_значення є ОбʼєктСирогоЗначення::ЧислоЮ8 {
              ціль обʼєкт_сирого_значення_число_Ю8 = обʼєкт_сирого_значення як ОбʼєктСирогоЗначення::ЧислоЮ8;
              змінна ціль очікуваний_тип: адреса<ОбʼєктТипу> = пусто;
              якщо тип_параметра == К.тип_логічне {
                очікуваний_тип = К.тип_логічне;
              } інакше якщо тип_параметра == К.тип_ц8 {
                очікуваний_тип = К.тип_логічне;
              } інакше якщо тип_параметра == К.тип_ц16 {
                очікуваний_тип = К.тип_ц16;
              } інакше якщо тип_параметра == К.тип_ц32 {
                очікуваний_тип = К.тип_ц32;
              } інакше якщо тип_параметра == К.тип_ц64 {
                очікуваний_тип = К.тип_ц64;
              } інакше якщо тип_параметра == К.тип_п8 {
                очікуваний_тип = К.тип_п8;
              } інакше якщо тип_параметра == К.тип_п16 {
                очікуваний_тип = К.тип_п16;
              } інакше якщо тип_параметра == К.тип_п32 {
                очікуваний_тип = К.тип_п32;
              } інакше якщо тип_параметра == К.тип_п64 {
                очікуваний_тип = К.тип_п64;
              } інакше якщо тип_параметра == К.тип_д32 {
                очікуваний_тип = К.тип_д32;
              } інакше якщо тип_параметра == К.тип_д64 {
                очікуваний_тип = К.тип_д64;
              } інакше {
                ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Вітаємо ви виявили помилку компілятора!");
                вернути результат_помилка(помилка_компіляції);
              }
              ціль результат_розбору_числа = розібрати_число(К, обʼєкт_сирого_значення_число_Ю8.значення, аргументи[пх].місцезнаходження, очікуваний_тип);
              якщо результат_розбору_числа.помилка != пусто {
                вернути результат_помилка(результат_розбору_числа.помилка);
              }
              аргументи[пх].обʼєкт = результат_розбору_числа.обʼєкт;
              кількість_норм_аргументів = кількість_норм_аргументів + 1;
            } інакше {
              ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Вітаємо ви виявили помилку компілятора!");
              вернути результат_помилка(помилка_компіляції);
            }
          } інакше {
            ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Вітаємо ви виявили помилку компілятора!");
            вернути результат_помилка(помилка_компіляції);
          }
          пх = пх + 1;
        }
        якщо кількість_норм_аргументів == обʼєкт_дії.параметри.розмір {
          знайдений_обʼєкт_дії = обʼєкт_дії;
        }
      }
      дх = дх + 1;
    }
    якщо знайдений_обʼєкт_дії == пусто {
      ціль помилка_компіляції = виділити_помилку_компіляції_не_вдалось_знайти_відповідну_дію(місцезнаходження);
      вернути результат_помилка(помилка_компіляції);
    }
    вернути обʼєкт_дії_виконати(знайдений_обʼєкт_дії, К, інформація_середовища, місцезнаходження, кількість_аргументів, аргументи);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_виконати_шаблон(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати_шаблон");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_змінити_властивість(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_властивість");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_змінити_в_секції(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, назва: адреса<Назва>, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_в_секції");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_змінити_за_позицією(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>, позиція: Аргумент, аргумент: Аргумент): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось змінити_за_позицією");
    вернути результат_помилка(помилка_компіляції);
  }
}

секція ц {
  місцева дія обʼєкт_групи_дій_унарний_мінус(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>, К: адреса<Компілятор>, інформація_середовища: ІнформаціяСередовища, місцезнаходження: адреса<Місцезнаходження>): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось унарний_мінус");
    вернути результат_помилка(помилка_компіляції);
  }
}