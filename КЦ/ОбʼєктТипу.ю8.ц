взяти визначення КЦ;

секція КЦ {
  зовнішня дія обʼєкт_типу_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
//    якщо перевірити_чи_тип_повний(К, обʼєкт_типу) == ні {
//      ціль помилка_компіляції = виділити_помилку_компіляції_виявлено_неповний_тип(місцезнаходження, Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу });
//      вернути результат_помилка(помилка_компіляції);
//    }
//    якщо назва == К.БН.розмір {
//      ціль розмір_типу = дізнатись_розмір_типу(К, обʼєкт_типу);
////      біб::друк_позитивне(розмір_типу);
//      ціль розмір_типу_як_ю8 = різне::числа::перетворити_позитивне_на_ю8(розмір_типу);
////      біб::друк_ю8(розмір_типу_як_ю8);
//      ціль обʼєкт_сирого_значення = ОбʼєктСирогоЗначення::ЧислоЮ8 { розмір_типу_як_ю8 };
//      вернути Результат { Обʼєкт { ВидОбʼєктаСиреЗначення, дані = обʼєкт_сирого_значення як ОбʼєктСирогоЗначення }, помилка = пусто };
//    }
//    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість");
//    вернути результат_помилка(помилка_компіляції);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
//    якщо обʼєкт_типу.вид == ВидТипуПерелік {
//      змінна пе: позитивне = 0;
//      поки пе < обʼєкт_типу.елементи_переліку.розмір {
//        ціль обʼєкт_типу_елемента_переліку = обʼєкт_типу.елементи_переліку.дані[пе];
//        якщо обʼєкт_типу_елемента_переліку.назва != пусто {
//          якщо назва == обʼєкт_типу_елемента_переліку.назва {
//            вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_елемента_переліку }, помилка = пусто };
//          }
//        }
//        пе += 1;
//      }
//    }
//    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось отримати_властивість_секції");
//    вернути результат_помилка(помилка_компіляції);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
//    якщо кількість_аргументів == 1 {
//      ціль перший_аргумент = аргументи[0];
//      ціль результат_як_значення = отримати_як_значення(К, інформація_середовища, місцезнаходження, перший_аргумент.обʼєкт, обʼєкт_типу);
//      якщо результат_як_значення.помилка != пусто {
//        вернути результат_помилка(результат_як_значення.помилка);
//      }
//      ціль обʼєкт_значення = результат_як_значення.обʼєкт_значення;
//      якщо обʼєкт_значення.тип == обʼєкт_типу {
//        вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//      }
//      якщо обʼєкт_типу == К.тип_логічне {
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_ц8 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_ц16 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_ц32 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_ц64 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptosi(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_п8 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_п16 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_п32 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::trunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_п64 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::zext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptoui(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_д32 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fptrunc(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//      якщо обʼєкт_типу == К.тип_д64 {
//        якщо обʼєкт_значення.тип == К.тип_логічне {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_ц64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::sitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п8 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п16 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_п64 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип == К.тип_д32 {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::fpext(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//        якщо обʼєкт_значення.тип.вид == ВидТипуАдреса {
//          обʼєкт_значення.тип = обʼєкт_типу;
//          обʼєкт_значення.llvm_value = LLVM::ptrtoint(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          обʼєкт_значення.llvm_value = LLVM::uitofp(К.L, інформація_середовища.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_типу.llvm_type);
//          вернути Результат { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
//        }
//      }
//    }
//    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати");
//    вернути результат_помилка(помилка_компіляції);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
//    якщо обʼєкт_типу == К.тип_адреса {
//      якщо кількість_аргументів != 1 {
//        ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, кількість_аргументів);
//        вернути результат_помилка(помилка_компіляції);
//      }
//      ціль результат_компіляції_значення_аргумента = отримати_як_тип(К, інформація_середовища, аргументи[0].місцезнаходження, аргументи[0].обʼєкт, ні);
//      якщо результат_компіляції_значення_аргумента.помилка != пусто {
//        вернути результат_помилка(результат_компіляції_значення_аргумента.помилка);
//      }
//      ціль обʼєкт_типу_комірки = виділити_тип_адреси(К, результат_компіляції_значення_аргумента.обʼєкт_типу);
//      вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_комірки }, помилка = пусто };
//    }
//    якщо обʼєкт_типу == К.тип_памʼять {
//      якщо кількість_аргументів != 1 {
//        ціль помилка_компіляції = виділити_помилку_компіляції_невірна_кількість_аргументів_шаблону(місцезнаходження, 1, кількість_аргументів);
//        вернути результат_помилка(помилка_компіляції);
//      }
//      ціль результат_компіляції_значення_аргумента = отримати_як_тип(К, інформація_середовища, аргументи[0].місцезнаходження, аргументи[0].обʼєкт, ні);
//      якщо результат_компіляції_значення_аргумента.помилка != пусто {
//        вернути результат_помилка(результат_компіляції_значення_аргумента.помилка);
//      }
//      ціль обʼєкт_типу_комірки = виділити_тип_памʼяті(К, результат_компіляції_значення_аргумента.обʼєкт_типу);
//      вернути Результат { Обʼєкт { ВидОбʼєктаТип, дані = обʼєкт_типу_комірки }, помилка = пусто };
//    }
//    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось виконати_шаблон");
//    вернути результат_помилка(помилка_компіляції);
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_типу_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження,"Не вдалось скомпілювати");
  }
}