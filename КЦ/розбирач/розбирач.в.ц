взяти біб Виділяч;
взяти біб Друк;
взяти біб Кодування;

секція КЦ {
  секція розбирач {
    структура можливо<Т> {
      заповнено: природне;
      значення: Т;
    }

    структура Розбирач {
      виділяч: адреса<біб::Виділяч>;
    }

    дія виділити<Т>(розбирач: адреса<Розбирач>): адреса<Т> {
      вернути біб::виділити<Т>(розбирач.виділяч);
    }

    дія перевиділити<Т>(розбирач: адреса<Розбирач>, значення: адреса<Т>, кількість: природне): памʼять<Т> {
      вернути біб::перевиділити<Т>(розбирач.виділяч, значення, кількість);
    }

    дія звільнити(розбирач: адреса<Розбирач>, значення: невідома_адреса) {
       біб::звільнити(розбирач.виділяч, значення);
    }

    дія виділити_памʼять<Т>(розбирач: адреса<Розбирач>, кількість: природне): памʼять<Т> {
      вернути біб::виділити_памʼять<Т>(розбирач.виділяч, кількість);
    }

    дія перевиділити_памʼять<Т>(розбирач: адреса<Розбирач>, значення: памʼять<Т>, кількість: природне): памʼять<Т> {
      вернути біб::перевиділити_памʼять<Т>(розбирач.виділяч, значення, кількість);
    }

    дія звільнити_памʼять(розбирач: адреса<Розбирач>, значення: невідома_памʼять) {
       біб::звільнити_памʼять(розбирач.виділяч, значення);
    }

    місцева дія визначити_розмір_символа(перший_байт: п8): п8;

    місцева дія створити(виділяч: адреса<біб::Виділяч>): адреса<Розбирач>;
    місцева дія знищити(розбирач: адреса<Розбирач>);

    стала КІНЕЦЬ_СЛІВ = 0;

    стала ВидСловаВзяти = 2;
    стала ВидСловаВизначення = 3;
    стала ВидСловаВластивість = 7;
    стала ВидСловаВернути = 8;
    стала ВидСловаДія = 9;
    стала ВидСловаЄ = 11;
    стала ВидСловаЗовнішня = 12;
    стала ВидСловаМісцева = 13;
    стала ВидСловаВнутрішня = 14;
    стала ВидСловаІнакше = 15;
    стала ВидСловаСекція = 18;
    стала ВидСловаНе = 22;
    стала ВидСловаПоки = 23;
    стала ВидСловаПерелік = 24;
    стала ВидСловаСтруктура = 28;
    стала ВидСловаЯк = 35;
    стала ВидСловаЯкщо = 36;

    стала ВидСловаЗнакРівно = 37;
    стала ВидСловаЗнакБільше = 38;
    стала ВидСловаЗнакМенше = 39;
    стала ВидСловаЗнакКрапка = 40;
    стала ВидСловаЗнакПлюс = 41;
    стала ВидСловаЗнакМінус = 42;
    стала ВидСловаЗнакПомножити = 43;
    стала ВидСловаЗнакПоділити = 44;
    стала ВидСловаЗнакВідсоток = 45;
    стала ВидСловаЗнакАмперсанд = 47;
    стала ВидСловаЗнакПряма = 48;
    стала ВидСловаЗнакВідкритаДужка = 49;
    стала ВидСловаЗнакЗакритаДужка = 50;
    стала ВидСловаЗнакВідкритаКвадратнаДужка = 51;
    стала ВидСловаЗнакЗакритаКвадратнаДужка = 52;
    стала ВидСловаЗнакПитання = 53;
    стала ВидСловаЗнакДвокрапка = 54;
    стала ВидСловаЗнакТильда = 55;
    стала ВидСловаЗнакОднолапка = 56;
    стала ВидСловаЗнакДволапка = 57;
    стала ВидСловаЗнакОклик = 58;
    стала ВидСловаЗнакКома = 59;
    стала ВидСловаЗнакМіжряд = 60;

    стала ВидСловаЧисло = 61;
    стала ВидСловаСимвол = 63;
    стала ВидСловаТекст = 64;
    стала ВидСловаКоментар = 66;
    стала ВидСловаБагаторядковийКоментар = 67;
    стала ВидСловаІдентифікатор = 68;

    стала ВидСловаЗмінна = 69;
    стала ВидСловаЦіль = 70;
    стала ВидСловаЗнакКрапкакома = 71;
    стала ВидСловаВідкритаФігурнаДужка = 72;
    стала ВидСловаЗакритаФігурнаДужка = 73;
    стала ВидСловаСинонім = 74;
    стала ВидСловаСтрибнути = 75;
    стала ВидСловаСтала = 76;
    стала ВидСловаЗнакГачок = 78;
    стала ВидСловаЗнакВище = 79;
    стала ВидСловаЗнакНижче = 80;
    стала ВидСловаІ = 81;
    стала ВидСловаАбо = 82;
    стала ВидСловаВабо = 83;

    структура ПозиціяСлова {
      позиція_в_тексті: природне;
      рядок: природне;
      стовпець: природне;
    }

    структура Слово {
      вид: природне;
      позиція_початку: ПозиціяСлова;
      позиція_кінця: ПозиціяСлова;
    }

    структура Слова {
      розмір: природне;
      дані: памʼять<Слово>;
      вмісткість: природне;
    }

    дія покласти_в_слова(розбирач: адреса<Розбирач>, слова: адреса<Слова>, слово: Слово) {
      якщо слова.розмір == слова.вмісткість {
        слова.вмісткість += 1;
        слова.дані = перевиділити_памʼять<Слово>(розбирач, слова.дані, слова.вмісткість);
      }
      слова.дані[слова.розмір] = слово;
      слова.розмір += 1;
    }

    структура ПомилкаРозборуНаСлова {
      позиція: ПозиціяСлова;
    }

    місцева дія розібрати_на_слова(розбирач: адреса<Розбирач>, значення: ю8, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне;
    місцева дія надрукувати_слова(розбирач: адреса<Розбирач>, значення: ю8, слова: Слова);
    місцева дія знищити_слова(розбирач: адреса<Розбирач>, слова: Слова);

    дія отримати_значення_слова(значення: ю8, слово: Слово, вихід: адреса<т8>) -> логічне {
      змінна значення_ю8 = ю8 {
        розмір = (слово.позиція_кінця.позиція_в_тексті - слово.позиція_початку.позиція_в_тексті) + 1,
        дані = значення.дані[слово.позиція_початку.позиція_в_тексті]::адреса як памʼять<п8>
      };

      вернути біб::перекодувати_ю8_в_т8(
        біб::отримати_системний_виділяч(), 
        значення_ю8, 
        так, 
        ні, 
        вихід, 
        пусто, 
        пусто
      );
    }

    дія отримати_значення_слова_ю8(значення: ю8, слово: Слово, вихід: адреса<ю8>) -> логічне {
      вихід::вміст = ю8 {
        розмір = (слово.позиція_кінця.позиція_в_тексті - слово.позиція_початку.позиція_в_тексті) + 1,
        дані = значення.дані[слово.позиція_початку.позиція_в_тексті]::адреса як памʼять<п8>
      };
      
      вернути так;
    }

    дія отримати_значення_тексту(значення: ю8, слово: Слово, вихід: адреса<т8>) -> логічне {
      змінна значення_слова = т8 { 0, пусто }; 

      якщо не отримати_значення_слова(значення, слово, значення_слова::адреса) {
        вернути ні;
      }

      змінна розмір_нового_значення = значення_слова.розмір - 2;
      змінна дані_нового_значення = біб::виділити_памʼять<п8>(біб::отримати_системний_виділяч(), розмір_нового_значення);

      змінна п: природне = 0;
      поки п < розмір_нового_значення {
        дані_нового_значення[п] = значення_слова.дані[п + 1];

        п += 1;
      }

      вихід::вміст = т8 { 
        розмір_нового_значення, 
        дані_нового_значення 
      };

      біб::звільнити_памʼять(біб::отримати_системний_виділяч(), значення_слова.дані);

      вернути так;
    }

    стала КІНЕЦЬ_СПОЛУК = 0;

    стала ВидСполукиЦіль = 1;
    стала ВидСполукиДія = 2;
    стала ВидСполукиСтруктура = 3;
    стала ВидСполукиЗаписати = 5;
    стала ВидСполукиПрочитати = 6;
    стала ВидСполукиОтриматиВластивість = 7;
    стала ВидСполукиЗмінитиВластивість = 8;
    стала ВидСполукиСинонім = 9;
    стала ВидСполукиВернути = 10;
    стала ВидСполукиЯкщо = 11;
    стала ВидСполукиПоки = 12;
    стала ВидСполукиСекція = 13;
    стала ВидСполукиКрок = 14;
    стала ВидСполукиСтрибнути = 15;
    стала ВидСполукиВзяти = 16;
    стала ВидСполукиОтриматиСекційнуВластивість = 17;
    стала ВидСполукиОтриматиЕлемент = 18;
    стала ВидСполукиВиконатиШаблон = 19;
    стала ВидСполукиВиконатиДію = 20;
    стала ВидСполукиОднооперація = 21;
    стала ВидСполукиОперація = 22;
    стала ВидСполукиЧисло = 23;
    стала ВидСполукиТекст = 24;
    стала ВидСполукиОбʼєкт = 25;
    стала ВидСполукиПерелік = 26;
    стала ВидСполукиЗмінитиЕлемент = 27;
    стала ВидСполукиЗмінитиСекційнуВластивість = 28;
    стала ВидСполукиВаріативнийТип = 29;
    стала ВидСполукиШаблон = 30;
    стала ВидСполукиТипДії = 31;
    стала ВидСполукиЗмінна = 32;
    стала ВидСполукиСтала = 33;

    стала ВИДИМІСТЬ_ВНУТРІШНЯ = 1;
    стала ВИДИМІСТЬ_МІСЦЕВА = 2;
    стала ВИДИМІСТЬ_ЗОВНІШНЯ = 3;

    структура Сполука;

    структура Місцезнаходження {
      позиція_початкового_слова: природне;
      позиція_кінцевого_слова: природне;
    }

    структура Ідентифікатор {
      позиція_слова: природне;
    }

    структура ЕлементВзяти {
      позиція_слова: природне;
    }

    дія отримати_значення_ідентифікатора(значення: ю8, слова: Слова, ідентифікатор: Ідентифікатор, вихід: адреса<т8>) -> логічне {
      вернути отримати_значення_слова(значення, слова.дані[ідентифікатор.позиція_слова], вихід);
    }

    структура Сполуки {
      розмір: природне;
      дані: памʼять<адреса<Сполука>>;
      вмісткість: природне;
    }

    структура Параметр {
      ідентифікатор: можливо<Ідентифікатор>;
      тип: адреса<Сполука>;
    }

    структура Параметри {
      розмір: природне;
      дані: памʼять<Параметр>;
      вмісткість: природне;
    }

    структура ПараметрШаблону {
      ідентифікатор: Ідентифікатор;
      тип: адреса<Сполука>;
    }

    структура ПараметриШаблону {
      розмір: природне;
      дані: памʼять<ПараметрШаблону>;
      вмісткість: природне;
    }

    структура Аргумент {
      ідентифікатор: можливо<Ідентифікатор>;
      значення: адреса<Сполука>;
    }

    структура Аргументи {
      розмір: природне;
      дані: памʼять<Аргумент>;
      вмісткість: природне;
      автозаповнити: природне;
    }

    структура ЕлементПереліка {
      ідентифікатор: Ідентифікатор;
      параметри: Параметри;
      значення: адреса<Сполука>;
    }

    структура ЕлементиПереліка {
      розмір: природне;
      дані: памʼять<ЕлементПереліка>;
      вмісткість: природне;
    }

    структура Ідентифікатори {
      розмір: природне;
      дані: памʼять<Ідентифікатор>;
      вмісткість: природне;
    }

    структура ЕлементиВзяти {
      розмір: природне;
      дані: памʼять<ЕлементВзяти>;
      вмісткість: природне;
    }

    структура ДаніСполукиЦіль {
      видимість: природне;
      ідентифікатор: Ідентифікатор;
      тип: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗмінна {
      видимість: природне;
      ідентифікатор: Ідентифікатор;
      тип: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиСтала {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиСинонім {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВернути {
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЯкщо {
      умова: адреса<Сполука>;
      тіло: Сполуки;
      тіло_інакше: Сполуки;
    }

    структура ДаніСполукиПоки {
      умова: адреса<Сполука>;
      тіло: Сполуки;
    }

    структура ДаніСполукиСекція {
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Сполуки;
    }

    структура ДаніСполукиКрок {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиСтрибнути {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиПрочитати {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗаписати {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиДія {
      видимість: природне;
      ідентифікатор_структури: можливо<Ідентифікатор>;
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: Параметри;
      тип_результату: адреса<Сполука>;
      тіло: можливо<Сполуки>;
    }

    структура ДаніСполукиТипДії {
      параметри: Параметри;
      тип_результату: адреса<Сполука>;
    }

    структура ДаніСполукиСтруктура {
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: Параметри;
    }

    структура ДаніСполукиВзяти {
      відносно: природне;
      звідки: Ідентифікатор;
      шлях: ЕлементиВзяти;
    }

    структура ДаніСполукиОтриматиВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗмінитиВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗмінитиЕлемент {
      ліво: адреса<Сполука>;
      ключ: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиОтриматиСекційнуВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗмінитиСекційнуВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВаріативнийТип {
      типи: Сполуки;
    }

    структура ДаніСполукиОтриматиЕлемент {
      ліво: адреса<Сполука>;
      ключ: адреса<Сполука>;
    }

    структура ДаніСполукиВиконатиШаблон {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиВиконатиДію {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиОбʼєкт {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиПерелік {
      ідентифікатор: можливо<Ідентифікатор>;
      елементи: ЕлементиПереліка;
    }

    структура ДаніСполукиШаблон {
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: ПараметриШаблону;
      значення: адреса<Сполука>;
    }

    стала ВидОдноопераціїЗаперечення = 1;
    стала ВидОдноопераціїПлюс = 2;
    стала ВидОдноопераціїМінус = 3;
    стала ВидОдноопераціїДвійковеЗаперечення = 4;

    структура ДаніСполукиОднооперація {
      вид: природне;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЧисло {
      позиція_слова: природне;
    }

    структура ДаніСполукиТекст {
      префікс: можливо<Ідентифікатор>;
      позиція_слова: природне;
    }

    стала ВидОпераціїМноження = 1;
    стала ВидОпераціїДілення = 2;
    стала ВидОпераціїМодуль = 3;
    стала ВидОпераціїДодавання = 4;
    стала ВидОпераціїВіднімання = 5;
    стала ВидОпераціїЗсувВліво = 6;
    стала ВидОпераціїЗсувВправо = 7;
    стала ВидОпераціїМенше = 9;
    стала ВидОпераціїБільше = 10;
    стала ВидОпераціїМеншеРівне = 11;
    стала ВидОпераціїБільшеРівне = 12;
    стала ВидОпераціїРівне = 13;
    стала ВидОпераціїНерівне = 14;
    стала ВидОпераціїДІ = 15;
    стала ВидОпераціїВАБО = 16;
    стала ВидОпераціїДАБО = 17;
    стала ВидОпераціїІ = 18;
    стала ВидОпераціїАБО = 19;
    стала ВидОпераціїЯк = 26;

    структура ДаніСполукиОперація {
      вид: природне;
      ліво: адреса<Сполука>;
      право: адреса<Сполука>;
    }

    структура Сполука {
      вид: природне;
      дані: ДаніСполукиЦіль
          | ДаніСполукиЗмінна
          | ДаніСполукиСтала
          | ДаніСполукиДія
          | ДаніСполукиТипДії
          | ДаніСполукиПрочитати
          | ДаніСполукиЗаписати
          | ДаніСполукиСтруктура
          | ДаніСполукиСинонім
          | ДаніСполукиВернути
          | ДаніСполукиЯкщо
          | ДаніСполукиПоки
          | ДаніСполукиСекція
          | ДаніСполукиКрок
          | ДаніСполукиСтрибнути
          | ДаніСполукиВзяти
          | ДаніСполукиОтриматиВластивість
          | ДаніСполукиЗмінитиВластивість
          | ДаніСполукиОтриматиСекційнуВластивість
          | ДаніСполукиЗмінитиСекційнуВластивість
          | ДаніСполукиВаріативнийТип
          | ДаніСполукиОтриматиЕлемент
          | ДаніСполукиЗмінитиЕлемент
          | ДаніСполукиВиконатиШаблон
          | ДаніСполукиВиконатиДію
          | ДаніСполукиОднооперація
          | ДаніСполукиОперація
          | ДаніСполукиЧисло
          | ДаніСполукиТекст
          | ДаніСполукиОбʼєкт
          | ДаніСполукиПерелік
          | ДаніСполукиШаблон;
      місцезнаходження: Місцезнаходження;
    }

    дія покласти_в_сполуки(розбирач: адреса<Розбирач>, сполуки: адреса<Сполуки>, сполука: адреса<Сполука>) {
      якщо сполуки.розмір == сполуки.вмісткість {
        сполуки.вмісткість += 1;
        сполуки.дані = перевиділити_памʼять<адреса<Сполука>>(розбирач, сполуки.дані, сполуки.вмісткість);
      }
      сполуки.дані[сполуки.розмір] = сполука;
      сполуки.розмір += 1;
    }

    дія покласти_в_параметри(розбирач: адреса<Розбирач>, параметри: адреса<Параметри>, параметр: Параметр) {
      якщо параметри.розмір == параметри.вмісткість {
        параметри.вмісткість += 1;
        параметри.дані = перевиділити_памʼять<Параметр>(розбирач, параметри.дані, параметри.вмісткість);
      }
      параметри.дані[параметри.розмір] = параметр;
      параметри.розмір += 1;
    }

    дія покласти_в_параметри_шаблону(розбирач: адреса<Розбирач>, параметри_шаблону: адреса<ПараметриШаблону>, параметр_шаблону: ПараметрШаблону) {
      якщо параметри_шаблону.розмір == параметри_шаблону.вмісткість {
        параметри_шаблону.вмісткість += 1;
        параметри_шаблону.дані = перевиділити_памʼять<ПараметрШаблону>(розбирач, параметри_шаблону.дані, параметри_шаблону.вмісткість);
      }
      параметри_шаблону.дані[параметри_шаблону.розмір] = параметр_шаблону;
      параметри_шаблону.розмір += 1;
    }

    дія покласти_в_аргументи(розбирач: адреса<Розбирач>, аргументи: адреса<Аргументи>, аргумент: Аргумент) {
      якщо аргументи.розмір == аргументи.вмісткість {
        аргументи.вмісткість += 1;
        аргументи.дані = перевиділити_памʼять<Аргумент>(розбирач, аргументи.дані, аргументи.вмісткість);
      }
      аргументи.дані[аргументи.розмір] = аргумент;
      аргументи.розмір += 1;
    }

    дія покласти_в_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: адреса<ЕлементиПереліка>, елемент_переліка: ЕлементПереліка) {
      якщо елементи_переліка.розмір == елементи_переліка.вмісткість {
        елементи_переліка.вмісткість += 1;
        елементи_переліка.дані = перевиділити_памʼять<ЕлементПереліка>(розбирач, елементи_переліка.дані, елементи_переліка.вмісткість);
      }
      елементи_переліка.дані[елементи_переліка.розмір] = елемент_переліка;
      елементи_переліка.розмір += 1;
    }

    дія покласти_в_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: адреса<Ідентифікатори>, ідентифікатор: Ідентифікатор) {
      якщо ідентифікатори.розмір == ідентифікатори.вмісткість {
        ідентифікатори.вмісткість += 1;
        ідентифікатори.дані = перевиділити_памʼять<Ідентифікатор>(розбирач, ідентифікатори.дані, ідентифікатори.вмісткість);
      }
      ідентифікатори.дані[ідентифікатори.розмір] = ідентифікатор;
      ідентифікатори.розмір += 1;
    }

    дія покласти_в_елементи_взяти(розбирач: адреса<Розбирач>, елементи_взяти: адреса<ЕлементиВзяти>, елемент_взяти: ЕлементВзяти) {
      якщо елементи_взяти.розмір == елементи_взяти.вмісткість {
        елементи_взяти.вмісткість += 1;
        елементи_взяти.дані = перевиділити_памʼять<ЕлементВзяти>(розбирач, елементи_взяти.дані, елементи_взяти.вмісткість);
      }
      елементи_взяти.дані[елементи_взяти.розмір] = елемент_взяти;
      елементи_взяти.розмір += 1;
    }

    місцева дія звільнити_сполуку(розбирач: адреса<Розбирач>, сполука: адреса<Сполука>);
    місцева дія клонувати_сполуку(розбирач: адреса<Розбирач>, сполука: адреса<Сполука>): адреса<Сполука>;
    місцева дія клонувати_сполуки(розбирач: адреса<Розбирач>, сполуки: Сполуки): Сполуки;
    місцева дія клонувати_параметр(розбирач: адреса<Розбирач>, параметр: Параметр): Параметр;
    місцева дія клонувати_параметри(розбирач: адреса<Розбирач>, параметри: Параметри): Параметри;
    місцева дія клонувати_параметр_шаблону(розбирач: адреса<Розбирач>, параметр_шаблону: ПараметрШаблону): ПараметрШаблону;
    місцева дія клонувати_параметри_шаблону(розбирач: адреса<Розбирач>, параметри_шаблону: ПараметриШаблону): ПараметриШаблону;
    місцева дія клонувати_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: Ідентифікатори): Ідентифікатори;
    місцева дія клонувати_аргумент(розбирач: адреса<Розбирач>, аргумент: Аргумент): Аргумент;
    місцева дія клонувати_аргументи(розбирач: адреса<Розбирач>, аргументи: Аргументи): Аргументи;
    місцева дія клонувати_елемент_переліка(розбирач: адреса<Розбирач>, елемент_переліка: ЕлементПереліка): ЕлементПереліка;
    місцева дія клонувати_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: ЕлементиПереліка): ЕлементиПереліка;
    місцева дія клонувати_елемент_взяти(розбирач: адреса<Розбирач>, елемент_взяти: ЕлементВзяти): ЕлементВзяти;
    місцева дія клонувати_елементи_взяти(розбирач: адреса<Розбирач>, елементи_взяти: ЕлементиВзяти): ЕлементиВзяти;

    дія звільнити_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: Ідентифікатори) {
      звільнити_памʼять(розбирач, ідентифікатори.дані);
    }

    дія звільнити_елементи_взяти(розбирач: адреса<Розбирач>, елементи_взяти: ЕлементиВзяти) {
      звільнити_памʼять(розбирач, елементи_взяти.дані);
    }

    дія звільнити_параметри(розбирач: адреса<Розбирач>, параметри: Параметри) {
      змінна п: природне = 0;
      поки п < параметри.розмір {
        звільнити_сполуку(розбирач, параметри.дані[п].тип);
        п += 1;
      }
      звільнити_памʼять(розбирач, параметри.дані);
    }

    дія звільнити_параметри_шаблону(розбирач: адреса<Розбирач>, параметри_шаблону: ПараметриШаблону) {
      змінна п: природне = 0;
      поки п < параметри_шаблону.розмір {
        звільнити_сполуку(розбирач, параметри_шаблону.дані[п].тип);
        п += 1;
      }
      звільнити_памʼять(розбирач, параметри_шаблону.дані);
    }

    дія звільнити_сполуки(розбирач: адреса<Розбирач>, сполуки: Сполуки) {
      змінна п: природне = 0;
      поки п < сполуки.розмір {
        звільнити_сполуку(розбирач, сполуки.дані[п]);
        п += 1;
      }
      звільнити_памʼять(розбирач, сполуки.дані);
    }

    дія звільнити_аргументи(розбирач: адреса<Розбирач>, аргументи: Аргументи) {
      змінна п: природне = 0;
      поки п < аргументи.розмір {
        звільнити_сполуку(розбирач, аргументи.дані[п].значення);
        п += 1;
      }
      звільнити_памʼять(розбирач, аргументи.дані);
    }

    дія звільнити_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: ЕлементиПереліка) {
      змінна п: природне = 0;
      поки п < елементи_переліка.розмір {
        звільнити_сполуку(розбирач, елементи_переліка.дані[п].значення);
        п += 1;
      }
      звільнити_памʼять(розбирач, елементи_переліка.дані);
    }

    структура ПомилкаРозборуНаСполуки {
      позиція_слова: природне;
    }

    місцева дія розібрати_слова_на_сполуки(розбирач: адреса<Розбирач>, слова: Слова, вихід: адреса<Сполуки>, вихід_помилки: адреса<ПомилкаРозборуНаСполуки>): логічне;
    місцева дія надрукувати_сполуки(розбирач: адреса<Розбирач>, значення: ю8, слова: Слова, сполуки: Сполуки, глибина: природне);
    місцева дія знищити_сполуки(розбирач: адреса<Розбирач>, сполуки: Сполуки);

    структура ВитнутеЗначенняЗіСловом {
      витнуте_значення: ю8;
      початок_підкреслення: природне;
    }

    структура ВитнутеЗначенняЗіСловомЮ8 {
      витнуте_значення: ю8;
      початок_підкреслення: природне;
    }

    місцева дія витнути_значення_ю8(значення: ю8, позиція_помилки: природне, максимальна_довжина: природне): ВитнутеЗначенняЗіСловомЮ8;
  }
}