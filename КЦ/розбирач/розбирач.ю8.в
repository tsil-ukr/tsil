взяти визначення біб/Виділяч;

зовнішня дія __біб__вивести_позитивне(значення: позитивне);
зовнішня дія __біб__надрукувати_позитивне(значення: позитивне);

секція біб {
  дія вивести_позитивне(значення: позитивне) {
    __біб__вивести_позитивне(значення);
  }

  дія надрукувати_позитивне(значення: позитивне) {
    __біб__надрукувати_позитивне(значення);
  }
}

секція КЦ {
  секція розбирач {
    структура можливо<Т> {
      заповнено: позитивне;
      значення: Т;
    }

    структура Розбирач {
      виділяч: адреса<біб::Виділяч>;
    }

    дія виділити<Т>(розбирач: адреса<Розбирач>): адреса<Т> {
      вернути біб::виділити<Т>(розбирач.виділяч);
    }

    дія перевиділити<Т>(розбирач: адреса<Розбирач>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
      вернути біб::перевиділити<Т>(розбирач.виділяч, значення, кількість);
    }

    дія звільнити(розбирач: адреса<Розбирач>, значення: невідома_адреса) {
       біб::звільнити(розбирач.виділяч, значення);
    }

    дія виділити_памʼять<Т>(розбирач: адреса<Розбирач>, кількість: позитивне): памʼять<Т> {
      вернути біб::виділити_памʼять<Т>(розбирач.виділяч, кількість);
    }

    дія перевиділити_памʼять<Т>(розбирач: адреса<Розбирач>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
      вернути біб::перевиділити_памʼять<Т>(розбирач.виділяч, значення, кількість);
    }

    дія звільнити_памʼять(розбирач: адреса<Розбирач>, значення: невідома_памʼять) {
       біб::звільнити_памʼять(розбирач.виділяч, значення);
    }

    зовнішня дія створити(виділяч: адреса<біб::Виділяч>): адреса<Розбирач>;

    синонім КІНЕЦЬ_СЛІВ = 0;

    синонім ВидСловаВзяти = 2;
    синонім ВидСловаВизначення = 3;
    синонім ВидСловаВластивість = 7;
    синонім ВидСловаВернути = 8;
    синонім ВидСловаДія = 9;
    синонім ВидСловаЄ = 11;
    синонім ВидСловаЗовнішня = 12;
    синонім ВидСловаМісцева = 13;
    синонім ВидСловаІнакше = 15;
    синонім ВидСловаСекція = 18;
    синонім ВидСловаНе = 22;
    синонім ВидСловаПоки = 23;
    синонім ВидСловаПерелік = 24;
    синонім ВидСловаСтруктура = 28;
    синонім ВидСловаЯк = 35;
    синонім ВидСловаЯкщо = 36;

    синонім ВидСловаЗнакРівно = 37;
    синонім ВидСловаЗнакБільше = 38;
    синонім ВидСловаЗнакМенше = 39;
    синонім ВидСловаЗнакКрапка = 40;
    синонім ВидСловаЗнакПлюс = 41;
    синонім ВидСловаЗнакМінус = 42;
    синонім ВидСловаЗнакПомножити = 43;
    синонім ВидСловаЗнакПоділити = 44;
    синонім ВидСловаЗнакВідсоток = 45;
    синонім ВидСловаЗнакПірамідка = 46;
    синонім ВидСловаЗнакАмперсанд = 47;
    синонім ВидСловаЗнакПряма = 48;
    синонім ВидСловаЗнакВідкритаДужка = 49;
    синонім ВидСловаЗнакЗакритаДужка = 50;
    синонім ВидСловаЗнакВідкритаКвадратнаДужка = 51;
    синонім ВидСловаЗнакЗакритаКвадратнаДужка = 52;
    синонім ВидСловаЗнакПитання = 53;
    синонім ВидСловаЗнакДвокрапка = 54;
    синонім ВидСловаЗнакТильда = 55;
    синонім ВидСловаЗнакОднолапка = 56;
    синонім ВидСловаЗнакДволапка = 57;
    синонім ВидСловаЗнакОклик = 58;
    синонім ВидСловаЗнакКома = 59;
    синонім ВидСловаЗнакМіжряд = 60;

    синонім ВидСловаЧисло = 61;
    синонім ВидСловаСимвол = 63;
    синонім ВидСловаТекст = 64;
    синонім ВидСловаКоментар = 66;
    синонім ВидСловаБагаторядковийКоментар = 67;
    синонім ВидСловаІдентифікатор = 68;

    синонім ВидСловаЗмінна = 69;
    синонім ВидСловаЦіль = 70;
    синонім ВидСловаЗнакКрапкакома = 71;
    синонім ВидСловаВідкритаФігурнаДужка = 72;
    синонім ВидСловаЗакритаФігурнаДужка = 73;
    синонім ВидСловаСинонім = 74;
    синонім ВидСловаСтрибнути = 75;

    структура ПозиціяСлова {
      позиція_в_тексті: позитивне;
      рядок: позитивне;
      стовпець: позитивне;
    }

    структура Слово {
      вид: позитивне;
      позиція_початку: ПозиціяСлова;
      позиція_кінця: ПозиціяСлова;
    }

    структура Слова {
      розмір: позитивне;
      дані: памʼять<Слово>;
      вмісткість: позитивне;
    }

    дія покласти_в_слова(розбирач: адреса<Розбирач>, слова: адреса<Слова>, слово: Слово) {
      якщо слова.розмір == слова.вмісткість {
        слова.вмісткість += 1;
        слова.дані = перевиділити_памʼять<Слово>(розбирач, слова.дані, слова.вмісткість);
      }
      слова.дані[слова.розмір] = слово;
      слова.розмір += 1;
    }

    структура ПомилкаРозборуНаСлова {
      позиція: ПозиціяСлова;
    }

    зовнішня дія розібрати_ю8_на_слова(розбирач: адреса<Розбирач>, значення: ю8, вихід: адреса<Слова>, вихід_помилки: адреса<ПомилкаРозборуНаСлова>): логічне;
    зовнішня дія надрукувати_слова(розбирач: адреса<Розбирач>, значення: ю8, слова: Слова);

    дія отримати_значення_слова(значення: ю8, слово: Слово): ю8 {
      вернути ю8 {
        розмір = (слово.позиція_кінця.позиція_в_тексті - слово.позиція_початку.позиція_в_тексті) + 1,
        дані = значення.дані[слово.позиція_початку.позиція_в_тексті]::адреса як памʼять<п8>
      };
    }

    дія отримати_значення_тексту(значення: ю8, слово: Слово): ю8 {
      ціль значення_слова = отримати_значення_слова(значення, слово);
      вернути ю8 { значення_слова.розмір - 2, значення_слова.дані[1]::адреса як памʼять<п8> };
    }

    синонім КІНЕЦЬ_СПОЛУК = 0;

    синонім ВидСполукиЦіль = 1;
    синонім ВидСполукиДія = 2;
    синонім ВидСполукиСтруктура = 3;
    синонім ВидСполукиЗаписати = 5;
    синонім ВидСполукиПрочитати = 6;
    синонім ВидСполукиОтриматиВластивість = 7;
    синонім ВидСполукиЗмінитиВластивість = 8;
    синонім ВидСполукиСинонім = 9;
    синонім ВидСполукиВернути = 10;
    синонім ВидСполукиЯкщо = 11;
    синонім ВидСполукиПоки = 12;
    синонім ВидСполукиСекція = 13;
    синонім ВидСполукиКрок = 14;
    синонім ВидСполукиСтрибнути = 15;
    синонім ВидСполукиВзяти = 16;
    синонім ВидСполукиОтриматиСекційнуВластивість = 17;
    синонім ВидСполукиОтриматиЕлемент = 18;
    синонім ВидСполукиВиконатиШаблон = 19;
    синонім ВидСполукиВиконатиДію = 20;
    синонім ВидСполукиОднооперація = 21;
    синонім ВидСполукиОперація = 22;
    синонім ВидСполукиЧисло = 23;
    синонім ВидСполукиТекст = 24;
    синонім ВидСполукиОбʼєкт = 25;
    синонім ВидСполукиПерелік = 26;
    синонім ВидСполукиЗмінитиЕлемент = 27;
    синонім ВидСполукиЗмінитиСекційнуВластивість = 28;
    синонім ВидСполукиВаріативнийТип = 29;
    синонім ВидСполукиШаблон = 30;
    синонім ВидСполукиТипДії = 31;

    синонім ДІЯ_ВНУТРІШНЯ = 1;
    синонім ДІЯ_МІСЦЕВА = 2;
    синонім ДІЯ_ЗОВНІШНЯ = 3;

    структура Сполука;

    структура Місцезнаходження {
      позиці_початкового_слова: позитивне;
      позиці_кінцевого_слова: позитивне;
    }

    структура Ідентифікатор {
      позиція_слова: позитивне;
    }

    дія отримати_значення_ідентифікатора(значення: ю8, слова: Слова, ідентифікатор: Ідентифікатор): ю8 {
      вернути отримати_значення_слова(значення, слова.дані[ідентифікатор.позиція_слова]);
    }

    структура Сполуки {
      розмір: позитивне;
      дані: памʼять<адреса<Сполука>>;
      вмісткість: позитивне;
    }

    структура Параметр {
      ідентифікатор: Ідентифікатор;
      тип: адреса<Сполука>;
    }

    структура Параметри {
      розмір: позитивне;
      дані: памʼять<Параметр>;
      вмісткість: позитивне;
    }

    структура Аргумент {
      ідентифікатор: можливо<Ідентифікатор>;
      значення: адреса<Сполука>;
    }

    структура Аргументи {
      розмір: позитивне;
      дані: памʼять<Аргумент>;
      вмісткість: позитивне;
      автозаповнити: позитивне;
    }

    структура ЕлементПереліка {
      ідентифікатор: Ідентифікатор;
      параметри: Параметри;
      значення: адреса<Сполука>;
    }

    структура ЕлементиПереліка {
      розмір: позитивне;
      дані: памʼять<ЕлементПереліка>;
      вмісткість: позитивне;
    }

    структура Ідентифікатори {
      розмір: позитивне;
      дані: памʼять<Ідентифікатор>;
      вмісткість: позитивне;
    }

    структура ДаніСполукиЦіль {
      змінна_: позитивне;
      ідентифікатор: Ідентифікатор;
      тип: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиСинонім {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВернути {
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЯкщо {
      умова: адреса<Сполука>;
      тіло: Сполуки;
      тіло_інакше: Сполуки;
    }

    структура ДаніСполукиПоки {
      умова: адреса<Сполука>;
      тіло: Сполуки;
    }

    структура ДаніСполукиСекція {
      ідентифікатор: можливо<Ідентифікатор>;
      тіло: Сполуки;
    }

    структура ДаніСполукиКрок {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиСтрибнути {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиПрочитати {
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗаписати {
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиДія {
      доступність: позитивне;
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: Параметри;
      тип_результату: адреса<Сполука>;
      тіло: можливо<Сполуки>;
    }

    структура ДаніСполукиТипДії {
      параметри: Параметри;
      тип_результату: адреса<Сполука>;
    }

    структура ДаніСполукиСтруктура {
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: Параметри;
    }

    структура ДаніСполукиВзяти {
      відносно: позитивне;
      звідки: Ідентифікатор;
      шлях: Ідентифікатори;
    }

    структура ДаніСполукиОтриматиВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗмінитиВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЗмінитиЕлемент {
      ліво: адреса<Сполука>;
      ключ: адреса<Сполука>;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиОтриматиСекційнуВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
    }

    структура ДаніСполукиЗмінитиСекційнуВластивість {
      ліво: адреса<Сполука>;
      ідентифікатор: Ідентифікатор;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиВаріативнийТип {
      типи: Сполуки;
    }

    структура ДаніСполукиОтриматиЕлемент {
      ліво: адреса<Сполука>;
      ключ: адреса<Сполука>;
    }

    структура ДаніСполукиВиконатиШаблон {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиВиконатиДію {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиОбʼєкт {
      ліво: адреса<Сполука>;
      аргументи: Аргументи;
    }

    структура ДаніСполукиПерелік {
      ідентифікатор: можливо<Ідентифікатор>;
      елементи: ЕлементиПереліка;
    }

    структура ДаніСполукиШаблон {
      ідентифікатор: можливо<Ідентифікатор>;
      параметри: Параметри;
      значення: адреса<Сполука>;
    }

    синонім ВидОдноопераціїЗаперечення = 1;
    синонім ВидОдноопераціїПлюс = 2;
    синонім ВидОдноопераціїМінус = 3;
    синонім ВидОдноопераціїДвійковеЗаперечення = 4;

    структура ДаніСполукиОднооперація {
      вид: позитивне;
      значення: адреса<Сполука>;
    }

    структура ДаніСполукиЧисло {
      позиція_слова: позитивне;
    }

    структура ДаніСполукиТекст {
      префікс: можливо<Ідентифікатор>;
      позиція_слова: позитивне;
    }

    синонім ВидОпераціїМноження = 1;
    синонім ВидОпераціїДілення = 2;
    синонім ВидОпераціїМодуль = 3;
    синонім ВидОпераціїДодавання = 4;
    синонім ВидОпераціїВіднімання = 5;
    синонім ВидОпераціїЗсувВліво = 6;
    синонім ВидОпераціїЗсувВправо = 7;
    синонім ВидОпераціїЗсувВправоЗнаковий = 8;
    синонім ВидОпераціїМенше = 9;
    синонім ВидОпераціїБільше = 10;
    синонім ВидОпераціїМеншеРівне = 11;
    синонім ВидОпераціїБільшеРівне = 12;
    синонім ВидОпераціїРівне = 13;
    синонім ВидОпераціїНерівне = 14;
    синонім ВидОпераціїДІ = 15;
    синонім ВидОпераціїВАБО = 16;
    синонім ВидОпераціїДАБО = 17;
    синонім ВидОпераціїІ = 18;
    синонім ВидОпераціїАБО = 19;
    синонім ВидОпераціїДіленняНаціло = 20;
    синонім ВидОпераціїПіднесенняДоСтепеня = 21;
    синонім ВидОпераціїМістить = 22;
    синонім ВидОпераціїНеМістить = 23;
    синонім ВидОпераціїЄ = 24;
    синонім ВидОпераціїНеЄ = 25;
    синонім ВидОпераціїЯк = 26;

    структура ДаніСполукиОперація {
      вид: позитивне;
      ліво: адреса<Сполука>;
      право: адреса<Сполука>;
    }

    структура Сполука {
      вид: позитивне;
      дані: ДаніСполукиЦіль
          | ДаніСполукиДія
          | ДаніСполукиТипДії
          | ДаніСполукиПрочитати
          | ДаніСполукиЗаписати
          | ДаніСполукиСтруктура
          | ДаніСполукиСинонім
          | ДаніСполукиВернути
          | ДаніСполукиЯкщо
          | ДаніСполукиПоки
          | ДаніСполукиСекція
          | ДаніСполукиКрок
          | ДаніСполукиСтрибнути
          | ДаніСполукиВзяти
          | ДаніСполукиОтриматиВластивість
          | ДаніСполукиЗмінитиВластивість
          | ДаніСполукиОтриматиСекційнуВластивість
          | ДаніСполукиЗмінитиСекційнуВластивість
          | ДаніСполукиВаріативнийТип
          | ДаніСполукиОтриматиЕлемент
          | ДаніСполукиЗмінитиЕлемент
          | ДаніСполукиВиконатиШаблон
          | ДаніСполукиВиконатиДію
          | ДаніСполукиОднооперація
          | ДаніСполукиОперація
          | ДаніСполукиЧисло
          | ДаніСполукиТекст
          | ДаніСполукиОбʼєкт
          | ДаніСполукиПерелік
          | ДаніСполукиШаблон;
      місцезнаходження: Місцезнаходження;
    }

    дія покласти_в_сполуки(розбирач: адреса<Розбирач>, сполуки: адреса<Сполуки>, сполука: адреса<Сполука>) {
      якщо сполуки.розмір == сполуки.вмісткість {
        сполуки.вмісткість += 1;
        сполуки.дані = перевиділити_памʼять<адреса<Сполука>>(розбирач, сполуки.дані, сполуки.вмісткість);
      }
      сполуки.дані[сполуки.розмір] = сполука;
      сполуки.розмір += 1;
    }

    дія покласти_в_параметри(розбирач: адреса<Розбирач>, параметри: адреса<Параметри>, параметр: Параметр) {
      якщо параметри.розмір == параметри.вмісткість {
        параметри.вмісткість += 1;
        параметри.дані = перевиділити_памʼять<Параметр>(розбирач, параметри.дані, параметри.вмісткість);
      }
      параметри.дані[параметри.розмір] = параметр;
      параметри.розмір += 1;
    }

    дія покласти_в_аргументи(розбирач: адреса<Розбирач>, аргументи: адреса<Аргументи>, аргумент: Аргумент) {
      якщо аргументи.розмір == аргументи.вмісткість {
        аргументи.вмісткість += 1;
        аргументи.дані = перевиділити_памʼять<Аргумент>(розбирач, аргументи.дані, аргументи.вмісткість);
      }
      аргументи.дані[аргументи.розмір] = аргумент;
      аргументи.розмір += 1;
    }

    дія покласти_в_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: адреса<ЕлементиПереліка>, елемент_переліка: ЕлементПереліка) {
      якщо елементи_переліка.розмір == елементи_переліка.вмісткість {
        елементи_переліка.вмісткість += 1;
        елементи_переліка.дані = перевиділити_памʼять<ЕлементПереліка>(розбирач, елементи_переліка.дані, елементи_переліка.вмісткість);
      }
      елементи_переліка.дані[елементи_переліка.розмір] = елемент_переліка;
      елементи_переліка.розмір += 1;
    }

    дія покласти_в_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: адреса<Ідентифікатори>, ідентифікатор: Ідентифікатор) {
      якщо ідентифікатори.розмір == ідентифікатори.вмісткість {
        ідентифікатори.вмісткість += 1;
        ідентифікатори.дані = перевиділити_памʼять<Ідентифікатор>(розбирач, ідентифікатори.дані, ідентифікатори.вмісткість);
      }
      ідентифікатори.дані[ідентифікатори.розмір] = ідентифікатор;
      ідентифікатори.розмір += 1;
    }

    зовнішня дія звільнити_сполуку(розбирач: адреса<Розбирач>, сполука: адреса<Сполука>);
    зовнішня дія клонувати_сполуку(розбирач: адреса<Розбирач>, сполука: адреса<Сполука>): адреса<Сполука>;
    зовнішня дія клонувати_сполуки(розбирач: адреса<Розбирач>, сполуки: Сполуки): Сполуки;
    зовнішня дія клонувати_параметр(розбирач: адреса<Розбирач>, параметр: Параметр): Параметр;
    зовнішня дія клонувати_параметри(розбирач: адреса<Розбирач>, параметри: Параметри): Параметри;
    зовнішня дія клонувати_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: Ідентифікатори): Ідентифікатори;
    зовнішня дія клонувати_аргумент(розбирач: адреса<Розбирач>, аргумент: Аргумент): Аргумент;
    зовнішня дія клонувати_аргументи(розбирач: адреса<Розбирач>, аргументи: Аргументи): Аргументи;
    зовнішня дія клонувати_елемент_переліка(розбирач: адреса<Розбирач>, елемент_переліка: ЕлементПереліка): ЕлементПереліка;
    зовнішня дія клонувати_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: ЕлементиПереліка): ЕлементиПереліка;

    дія звільнити_ідентифікатори(розбирач: адреса<Розбирач>, ідентифікатори: Ідентифікатори) {
      звільнити_памʼять(розбирач, ідентифікатори.дані);
    }

    дія звільнити_параметри(розбирач: адреса<Розбирач>, параметри: Параметри) {
      змінна п: позитивне = 0;
      поки п < параметри.розмір {
        звільнити_сполуку(розбирач, параметри.дані[п].тип);
        п += 1;
      }
      звільнити_памʼять(розбирач, параметри.дані);
    }

    дія звільнити_сполуки(розбирач: адреса<Розбирач>, сполуки: Сполуки) {
      змінна п: позитивне = 0;
      поки п < сполуки.розмір {
        звільнити_сполуку(розбирач, сполуки.дані[п]);
        п += 1;
      }
      звільнити_памʼять(розбирач, сполуки.дані);
    }

    дія звільнити_аргументи(розбирач: адреса<Розбирач>, аргументи: Аргументи) {
      змінна п: позитивне = 0;
      поки п < аргументи.розмір {
        звільнити_сполуку(розбирач, аргументи.дані[п].значення);
        п += 1;
      }
      звільнити_памʼять(розбирач, аргументи.дані);
    }

    дія звільнити_елементи_переліка(розбирач: адреса<Розбирач>, елементи_переліка: ЕлементиПереліка) {
      змінна п: позитивне = 0;
      поки п < елементи_переліка.розмір {
        звільнити_сполуку(розбирач, елементи_переліка.дані[п].значення);
        п += 1;
      }
      звільнити_памʼять(розбирач, елементи_переліка.дані);
    }

    структура ПомилкаРозборуНаСполуки {
      позиція_слова: позитивне;
    }

    зовнішня дія розібрати_слова_на_сполуки(розбирач: адреса<Розбирач>, слова: Слова, вихід: адреса<Сполуки>, вихід_помилки: адреса<ПомилкаРозборуНаСполуки>): логічне;
    зовнішня дія надрукувати_сполуки(розбирач: адреса<Розбирач>, значення: ю8, слова: Слова, сполуки: Сполуки, глибина: позитивне);

    структура ВитнутеЗначенняЗіСловом {
      витнуте_значення: ю8;
      початок_підкреслення: позитивне;
    }

    зовнішня дія витнути_значення(значення: ю8, позиція_помилки: позитивне, максимальна_довжина: позитивне): ВитнутеЗначенняЗіСловом;
  }
}