взяти визначення КЦ;

секція КЦ {
  дія обʼєкт_значення_арифметична_операція(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, д: (крок: адреса<ПМ::Крок>, ліво: адреса<ПМ::Значення>, право: адреса<ПМ::Значення>) -> адреса<ПМ::Значення>, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    змінна обʼєкт_значення_аргумента: ОбʼєктЗначення;

    якщо аргумент.обʼєкт.вид == ВидОбʼєктаЗначення {
      обʼєкт_значення_аргумента = аргумент.обʼєкт.дані як ОбʼєктЗначення;
    } інакше якщо аргумент.обʼєкт.вид == ВидОбʼєктаНезавантаженеЗначення {
      змінна обʼєкт_незавантаженого_значення_для_аргумента = аргумент.обʼєкт.дані як ОбʼєктНезавантаженогоЗначення;
      обʼєкт_значення_аргумента.тип = обʼєкт_незавантаженого_значення_для_аргумента.тип;
      обʼєкт_значення_аргумента.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення_для_аргумента.тип.пм_тип, обʼєкт_незавантаженого_значення_для_аргумента.пм_значення);
    } інакше якщо аргумент.обʼєкт.вид == ВидОбʼєктаСиреЗначення {
      змінна оз = отримати_як_значення(
        компілятор,
        контекст,
        місцезнаходження,
        аргумент.обʼєкт,
        обʼєкт_значення.тип
      );

      якщо оз.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = оз.помилка };
      }

      обʼєкт_значення_аргумента = оз.обʼєкт_значення;
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }

    якщо обʼєкт_значення_аргумента.тип == обʼєкт_значення.тип {
      змінна пм_значення = д(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення, обʼєкт_значення_аргумента.пм_значення);

      змінна обʼєкт_для_результату = Обʼєкт {
        ВидОбʼєктаЗначення,
        ОбʼєктЗначення { обʼєкт_значення.тип, пм_значення }
      };

      вернути РезультатОбʼєкта { обʼєкт_для_результату, помилка = пусто };
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      змінна новий_обʼєкт_значення: ОбʼєктЗначення;
      новий_обʼєкт_значення.тип = компілятор.тип_н64;
      новий_обʼєкт_значення.пм_значення = ПМ::перетворити_адресу_на_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);

      змінна результат_додавання_адреси = обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_додати_п64, новий_обʼєкт_значення, аргумент);
      якщо результат_додавання_адреси.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_додавання_адреси.помилка };
      }

      якщо результат_додавання_адреси.обʼєкт.вид == ВидОбʼєктаЗначення {
        змінна доданий_обʼєкт_значення = результат_додавання_адреси.обʼєкт.дані як ОбʼєктЗначення;

        якщо доданий_обʼєкт_значення.тип == компілятор.тип_н64 {
          новий_обʼєкт_значення.тип = обʼєкт_значення.тип;
          новий_обʼєкт_значення.пм_значення = ПМ::перетворити_п64_на_адресу(контекст.кк_дії.поточний_крок.пм_крок, доданий_обʼєкт_значення.пм_значення);

          вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = новий_обʼєкт_значення }, помилка = пусто };
        }
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      змінна новий_обʼєкт_значення: ОбʼєктЗначення;
      новий_обʼєкт_значення.тип = компілятор.тип_н64;
      новий_обʼєкт_значення.пм_значення = ПМ::перетворити_адресу_на_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);

      змінна результат_додавання_адреси = обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_відняти_п64, новий_обʼєкт_значення, аргумент);
      якщо результат_додавання_адреси.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_додавання_адреси.помилка };
      }

      якщо результат_додавання_адреси.обʼєкт.вид == ВидОбʼєктаЗначення {
        змінна доданий_обʼєкт_значення = результат_додавання_адреси.обʼєкт.дані як ОбʼєктЗначення;

        якщо доданий_обʼєкт_значення.тип == компілятор.тип_н64 {
          новий_обʼєкт_значення.тип = обʼєкт_значення.тип;
          новий_обʼєкт_значення.пм_значення = ПМ::перетворити_п64_на_адресу(контекст.кк_дії.поточний_крок.пм_крок, доданий_обʼєкт_значення.пм_значення);

          вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = новий_обʼєкт_значення }, помилка = пусто };
        }
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      змінна новий_обʼєкт_значення: ОбʼєктЗначення;
      новий_обʼєкт_значення.тип = компілятор.тип_н64;
      новий_обʼєкт_значення.пм_значення = ПМ::перетворити_адресу_на_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);

      змінна результат_додавання_адреси = обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_помножити_п64, новий_обʼєкт_значення, аргумент);
      якщо результат_додавання_адреси.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_додавання_адреси.помилка };
      }

      якщо результат_додавання_адреси.обʼєкт.вид == ВидОбʼєктаЗначення {
        змінна доданий_обʼєкт_значення = результат_додавання_адреси.обʼєкт.дані як ОбʼєктЗначення;

        якщо доданий_обʼєкт_значення.тип == компілятор.тип_н64 {
          новий_обʼєкт_значення.тип = обʼєкт_значення.тип;
          новий_обʼєкт_значення.пм_значення = ПМ::перетворити_п64_на_адресу(контекст.кк_дії.поточний_крок.пм_крок, доданий_обʼєкт_значення.пм_значення);

          вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = новий_обʼєкт_значення }, помилка = пусто };
        }
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      змінна новий_обʼєкт_значення: ОбʼєктЗначення;
      новий_обʼєкт_значення.тип = компілятор.тип_н64;
      новий_обʼєкт_значення.пм_значення = ПМ::перетворити_адресу_на_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);

      змінна результат_додавання_адреси = обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_поділити_п64, новий_обʼєкт_значення, аргумент);
      якщо результат_додавання_адреси.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_додавання_адреси.помилка };
      }

      якщо результат_додавання_адреси.обʼєкт.вид == ВидОбʼєктаЗначення {
        змінна доданий_обʼєкт_значення = результат_додавання_адреси.обʼєкт.дані як ОбʼєктЗначення;

        якщо доданий_обʼєкт_значення.тип == компілятор.тип_н64 {
          новий_обʼєкт_значення.тип = обʼєкт_значення.тип;
          новий_обʼєкт_значення.пм_значення = ПМ::перетворити_п64_на_адресу(контекст.кк_дії.поточний_крок.пм_крок, доданий_обʼєкт_значення.пм_значення);

          вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = новий_обʼєкт_значення }, помилка = пусто };
        }
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      змінна новий_обʼєкт_значення: ОбʼєктЗначення;
      новий_обʼєкт_значення.тип = компілятор.тип_н64;
      новий_обʼєкт_значення.пм_значення = ПМ::перетворити_адресу_на_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);

      змінна результат_додавання_адреси = обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_остача_п64, новий_обʼєкт_значення, аргумент);
      якщо результат_додавання_адреси.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_додавання_адреси.помилка };
      }

      якщо результат_додавання_адреси.обʼєкт.вид == ВидОбʼєктаЗначення {
        змінна доданий_обʼєкт_значення = результат_додавання_адреси.обʼєкт.дані як ОбʼєктЗначення;

        якщо доданий_обʼєкт_значення.тип == компілятор.тип_н64 {
          новий_обʼєкт_значення.тип = обʼєкт_значення.тип;
          новий_обʼєкт_значення.пм_значення = ПМ::перетворити_п64_на_адресу(контекст.кк_дії.поточний_крок.пм_крок, доданий_обʼєкт_значення.пм_значення);

          вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = новий_обʼєкт_значення }, помилка = пусто };
        }
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  дія обʼєкт_значення_порівняльна_операція(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, д: (крок: адреса<ПМ::Крок>, ліво: адреса<ПМ::Значення>, право: адреса<ПМ::Значення>) -> адреса<ПМ::Значення>, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    змінна обʼєкт_значення_аргумента: ОбʼєктЗначення;

    якщо аргумент.обʼєкт.вид == ВидОбʼєктаЗначення {
      обʼєкт_значення_аргумента = аргумент.обʼєкт.дані як ОбʼєктЗначення;
    } інакше якщо аргумент.обʼєкт.вид == ВидОбʼєктаНезавантаженеЗначення {
      змінна обʼєкт_незавантаженого_значення_для_аргумента = аргумент.обʼєкт.дані як ОбʼєктНезавантаженогоЗначення;
      обʼєкт_значення_аргумента.тип = обʼєкт_незавантаженого_значення_для_аргумента.тип;
      обʼєкт_значення_аргумента.пм_значення = ПМ::вказівка_прочитати(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_незавантаженого_значення_для_аргумента.тип.пм_тип, обʼєкт_незавантаженого_значення_для_аргумента.пм_значення);
    } інакше якщо аргумент.обʼєкт.вид == ВидОбʼєктаСиреЗначення {
      змінна оз = отримати_як_значення(
        компілятор,
        контекст,
        місцезнаходження,
        аргумент.обʼєкт,
        обʼєкт_значення.тип
      );

      якщо оз.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = оз.помилка };
      }

      обʼєкт_значення_аргумента = оз.обʼєкт_значення;
    } інакше якщо аргумент.обʼєкт.вид == ВидОбʼєктаДія {
      змінна дані_дії = аргумент.обʼєкт.дані як адреса<ОбʼєктДії>;
      обʼєкт_значення_аргумента = ОбʼєктЗначення {
        дані_дії.тип,
        дані_дії.пм_інструкція як адреса<ПМ::Значення>
      };
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }

    якщо обʼєкт_значення_аргумента.тип != обʼєкт_значення.тип {
      якщо обʼєкт_значення_аргумента.тип.вид == ВидОбʼєктаТипуАдреса {
        якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
        } інакше {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
        }
      } інакше якщо обʼєкт_значення_аргумента.тип.вид == ВидОбʼєктаТипуПамʼять {
        якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
        } інакше {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
        }
      } інакше якщо обʼєкт_значення_аргумента.тип.вид == ВидОбʼєктаТипуДія {
        якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
        } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
        } інакше {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
        }
      } інакше {
        вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
      }
    }

    змінна пм_значення = д(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення, обʼєкт_значення_аргумента.пм_значення);

    змінна обʼєкт_для_результату = Обʼєкт {
      ВидОбʼєктаЗначення,
      ОбʼєктЗначення { компілятор.тип_логічне, пм_значення }
    };

    вернути РезультатОбʼєкта { обʼєкт_для_результату, помилка = пусто };
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_д64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_д64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_більше_рівно_д64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_менше_рівно_д64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_адреса, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_адреса, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_рівно_адреса, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_п64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_д32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_д64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_адреса, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_адреса, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
      вернути обʼєкт_значення_порівняльна_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_не_рівно_адреса, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вліво_п64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_зсунути_вправо_п64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_і_п64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_або_п64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_ц8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_ц16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_ц32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_ц64, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_логічне, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_п8, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_п16, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_п32, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      вернути обʼєкт_значення_арифметична_операція(компілятор, контекст, місцезнаходження, ПМ::вказівка_двійкове_виключне_або_п64, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_або(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    змінна пм_значення_результату = ПМ::вказівка_накопичити(
      контекст.кк_дії.крок_накопичень.пм_крок,
      компілятор.тип_логічне.пм_тип
    );

    змінна крок_інакше = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_інакше");
    змінна крок_успіху = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_успіх");
    змінна крок_невдачі = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_невдача");
    змінна крок_виходу = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_вихід");

    ПМ::вказівка_записати(
      крок_успіху,
      компілятор.обʼєкт_значення_так.пм_значення,
      пм_значення_результату
    );
    ПМ::вказівка_стрибнути(
      крок_успіху,
      крок_виходу
    );

    ПМ::вказівка_записати(
      крок_невдачі,
      компілятор.обʼєкт_значення_ні.пм_значення,
      пм_значення_результату
    );
    ПМ::вказівка_стрибнути(
      крок_невдачі,
      крок_виходу
    );

    змінна аргумент1_нуль: Аргумент;
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    змінна результат_не_рівно_ліво = обʼєкт_значення_не_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент1_нуль);
    якщо результат_не_рівно_ліво.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_не_рівно_ліво.помилка, ... };
    }
    змінна результат_обʼєкт_значення_не_рівно_ліво = отримати_як_значення(
      компілятор,
      контекст,
      місцезнаходження,
      результат_не_рівно_ліво.обʼєкт,
      компілятор.тип_логічне
    );
    якщо результат_обʼєкт_значення_не_рівно_ліво.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_не_рівно_ліво.помилка, ... };
    }
    якщо результат_обʼєкт_значення_не_рівно_ліво.обʼєкт_значення.тип != компілятор.тип_логічне {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    ПМ::вказівка_стрибнути_якщо(
      контекст.кк_дії.поточний_крок.пм_крок,
      результат_обʼєкт_значення_не_рівно_ліво.обʼєкт_значення.пм_значення,
      крок_успіху,
      крок_інакше
    );


    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("або_інакше"),
      контекст.кк_дії.обʼєкт_дії,
      крок_інакше
    };
    змінна результат_обʼєкт_значення_право = отримати_як_значення(
      компілятор,
      контекст,
      аргумент.місцезнаходження,
      аргумент.обʼєкт,
      пусто
    );
    якщо результат_обʼєкт_значення_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_право.помилка, ... };
    }
    змінна аргумент2_нуль: Аргумент;
    якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц8 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц16 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_логічне {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н8 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н16 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_р32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_р64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    змінна результат_не_рівно_право = обʼєкт_значення_не_рівно(компілятор, контекст, місцезнаходження, результат_обʼєкт_значення_право.обʼєкт_значення, аргумент2_нуль);
    якщо результат_не_рівно_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_не_рівно_право.помилка, ... };
    }
    змінна результат_обʼєкт_значення_не_рівно_право = отримати_як_значення(
      компілятор,
      контекст,
      місцезнаходження,
      результат_не_рівно_право.обʼєкт,
      компілятор.тип_логічне
    );
    якщо результат_обʼєкт_значення_не_рівно_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_не_рівно_право.помилка, ... };
    }
    якщо результат_обʼєкт_значення_не_рівно_право.обʼєкт_значення.тип != компілятор.тип_логічне {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    ПМ::вказівка_стрибнути_якщо(
      контекст.кк_дії.поточний_крок.пм_крок,
      результат_обʼєкт_значення_не_рівно_право.обʼєкт_значення.пм_значення,
      крок_успіху,
      крок_невдачі
    );

    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("або_вихід"),
      контекст.кк_дії.обʼєкт_дії,
      крок_виходу
    };

    вернути РезультатОбʼєкта {
      Обʼєкт {
        ВидОбʼєктаНезавантаженеЗначення,
        ОбʼєктНезавантаженогоЗначення { компілятор.тип_логічне, пм_значення_результату }
      },
      помилка = пусто
    };
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_і(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    змінна пм_значення_результату = ПМ::вказівка_накопичити(
      контекст.кк_дії.крок_накопичень.пм_крок,
      компілятор.тип_логічне.пм_тип
    );

    змінна крок_інакше = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_інакше");
    змінна крок_успіху = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_успіх");
    змінна крок_невдачі = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_невдача");
    змінна крок_виходу = ПМ::створити_крок(контекст.кк_дії.обʼєкт_дії.пм_інструкція, "або_вихід");

    ПМ::вказівка_записати(
      крок_успіху,
      компілятор.обʼєкт_значення_так.пм_значення,
      пм_значення_результату
    );
    ПМ::вказівка_стрибнути(
      крок_успіху,
      крок_виходу
    );

    ПМ::вказівка_записати(
      крок_невдачі,
      компілятор.обʼєкт_значення_ні.пм_значення,
      пм_значення_результату
    );
    ПМ::вказівка_стрибнути(
      крок_невдачі,
      крок_виходу
    );

    змінна аргумент1_нуль: Аргумент;
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      аргумент1_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    змінна результат_рівно_ліво = обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент1_нуль);
    якщо результат_рівно_ліво.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_рівно_ліво.помилка, ... };
    }
    змінна результат_обʼєкт_значення_рівно_ліво = отримати_як_значення(
      компілятор,
      контекст,
      місцезнаходження,
      результат_рівно_ліво.обʼєкт,
      компілятор.тип_логічне
    );
    якщо результат_обʼєкт_значення_рівно_ліво.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_рівно_ліво.помилка, ... };
    }
    якщо результат_обʼєкт_значення_рівно_ліво.обʼєкт_значення.тип != компілятор.тип_логічне {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    ПМ::вказівка_стрибнути_якщо(
      контекст.кк_дії.поточний_крок.пм_крок,
      результат_обʼєкт_значення_рівно_ліво.обʼєкт_значення.пм_значення,
      крок_невдачі,
      крок_інакше
    );


    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("або_інакше"),
      контекст.кк_дії.обʼєкт_дії,
      крок_інакше
    };
    змінна результат_обʼєкт_значення_право = отримати_як_значення(
      компілятор,
      контекст,
      аргумент.місцезнаходження,
      аргумент.обʼєкт,
      пусто
    );
    якщо результат_обʼєкт_значення_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_право.помилка, ... };
    }
    змінна аргумент2_нуль: Аргумент;
    якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц8 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц16 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_ц64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_логічне {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н8 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н16 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_н64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_р32 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше якщо результат_обʼєкт_значення_право.обʼєкт_значення.тип == компілятор.тип_р64 {
      аргумент2_нуль = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    змінна результат_рівно_право = обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, результат_обʼєкт_значення_право.обʼєкт_значення, аргумент2_нуль);
    якщо результат_рівно_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_рівно_право.помилка, ... };
    }
    змінна результат_обʼєкт_значення_рівно_право = отримати_як_значення(
      компілятор,
      контекст,
      місцезнаходження,
      результат_рівно_право.обʼєкт,
      компілятор.тип_логічне
    );
    якщо результат_обʼєкт_значення_рівно_право.помилка != пусто {
      вернути РезультатОбʼєкта { помилка = результат_обʼєкт_значення_рівно_право.помилка, ... };
    }
    якщо результат_обʼєкт_значення_рівно_право.обʼєкт_значення.тип != компілятор.тип_логічне {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }
    ПМ::вказівка_стрибнути_якщо(
      контекст.кк_дії.поточний_крок.пм_крок,
      результат_обʼєкт_значення_рівно_право.обʼєкт_значення.пм_значення,
      крок_невдачі,
      крок_успіху
    );

    контекст.кк_дії.поточний_крок = Крок {
      назва_зовнішня("або_вихід"),
      контекст.кк_дії.обʼєкт_дії,
      крок_виходу
    };

    вернути РезультатОбʼєкта {
      Обʼєкт {
        ВидОбʼєктаНезавантаженеЗначення,
        ОбʼєктНезавантаженогоЗначення { компілятор.тип_логічне, пм_значення_результату }
      },
      помилка = пусто
    };
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта {
    якщо аргумент.обʼєкт.вид != ВидОбʼєктаТип {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }

    змінна новий_тип = аргумент.обʼєкт.дані як адреса<ОбʼєктТипу>;
    якщо новий_тип == обʼєкт_значення.тип {
      вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
    }

    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
      якщо новий_тип.вид == ВидОбʼєктаТипуАдреса {
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
      якщо новий_тип.вид == ВидОбʼєктаТипуПамʼять {
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
      якщо новий_тип.вид == ВидОбʼєктаТипуДія {
        // потім: перевірити чи це тип невідомої адреси
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
    }

    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
      якщо новий_тип.вид == ВидОбʼєктаТипуАдреса {
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
      якщо новий_тип.вид == ВидОбʼєктаТипуПамʼять {
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
    }

    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
      // потім: перевірити тут тоже!!!
      якщо новий_тип.вид == ВидОбʼєктаТипуАдреса {
        обʼєкт_значення.тип = новий_тип;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
      }
    }

    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуВаріація {
      змінна дані_варіації = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуВаріація;
      змінна знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
      змінна п: позитивне = 0;
      поки п < дані_варіації.кількість_типів {
        якщо перевірити_тип(компілятор, новий_тип, дані_варіації.типи[п]) {
          знайдений_тип_варіації = дані_варіації.типи[п];
        }
        п += 1;
      }
      якщо знайдений_тип_варіації == пусто {
        вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
      }
      обʼєкт_значення.тип = знайдений_тип_варіації;
      обʼєкт_значення.пм_значення = ПМ::вказівка_як(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення, знайдений_тип_варіації.пм_тип);
      вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, помилка = пусто };
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    якщо перевірити_назви_з_реєстру(назва, назва_зовнішня("вміст"), пусто) {
      якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
        змінна дані_адреси = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуАдреса;
        змінна тип = дані_адреси.тип_даних;
        змінна пм_позиції = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 1);
        пм_позиції[0] = ПМ::створити_п32(компілятор.пм_модуль, 0);
        змінна пм_значення = ПМ::вказівка_отримати_адресу_елемента(
          контекст.кк_дії.поточний_крок.пм_крок,
          тип.пм_тип,
          обʼєкт_значення.пм_значення,
          1,
          пм_позиції
        );
        звільнити_памʼять(компілятор, пм_позиції);
        змінна обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
        обʼєкт_незавантаженого_значення.тип = тип;
        обʼєкт_незавантаженого_значення.пм_значення = пм_значення;
        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
      змінна дані_памʼяті = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуПамʼять;
      змінна тип = дані_памʼяті.тип_даних;
      змінна результат_отримання_позиції_як_значення = отримати_як_значення(
        компілятор,
        контекст,
        місцезнаходження,
        позиція.обʼєкт,
        компілятор.тип_ц32
      );
      якщо результат_отримання_позиції_як_значення.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_отримання_позиції_як_значення.помилка };
      }
      змінна обʼєкт_значення_позиції = результат_отримання_позиції_як_значення.обʼєкт_значення;
      змінна пм_позиції = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 1);
      пм_позиції[0] = обʼєкт_значення_позиції.пм_значення;
      змінна пм_значення = ПМ::вказівка_отримати_адресу_елемента(
        контекст.кк_дії.поточний_крок.пм_крок,
        тип.пм_тип,
        обʼєкт_значення.пм_значення,
        1,
        пм_позиції
      );
      звільнити_памʼять(компілятор, пм_позиції);
      змінна обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
      обʼєкт_незавантаженого_значення.тип = тип;
      обʼєкт_незавантаженого_значення.пм_значення = пм_значення;
      вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаНезавантаженеЗначення, дані = обʼєкт_незавантаженого_значення }, помилка = пусто };
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуДія {
      змінна дані_типу_дії = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуДія;

      якщо кількість_аргументів != дані_типу_дії.параметри.розмір {
        вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Невірна кількість аргументів");
      }

      змінна параметри = дані_типу_дії.параметри;
      змінна тип_результату = дані_типу_дії.тип_результату;
      змінна пм_тип_інструкції = дані_типу_дії.пм_тип_інструкції;
      змінна пм_значення = обʼєкт_значення.пм_значення;

      змінна пм_аргументи = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, кількість_аргументів);

      змінна п: позитивне = 0;
      поки п < кількість_аргументів {
        змінна параметр = параметри.дані[п];

        змінна результат_аргумента_як_значення = отримати_як_значення(компілятор, контекст, аргументи[п].місцезнаходження, аргументи[п].обʼєкт, параметр.тип);
        якщо результат_аргумента_як_значення.помилка != пусто {
          вернути РезультатОбʼєкта { ..., помилка = результат_аргумента_як_значення.помилка };
        }

        змінна обʼєкт_значення_аргумента = результат_аргумента_як_значення.обʼєкт_значення;

        якщо перевірити_тип_на_запис_і_конвертувати_якщо_треба(компілятор, параметр.тип, обʼєкт_значення_аргумента::адреса) == ні {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, аргументи[п].місцезнаходження, "Неочікуваний тип аргумента");
        }

        пм_аргументи[п] = обʼєкт_значення_аргумента.пм_значення;

        п += 1;
      }

      змінна пм_значення_виконання = ПМ::виконати_дію(
        контекст.кк_дії.поточний_крок.пм_крок,
        пм_тип_інструкції як адреса<ПМ::Тип>,
        пм_значення,
        параметри.розмір,
        пм_аргументи
      );

      звільнити_памʼять(компілятор, пм_аргументи);

      змінна обʼєкт_значення_виконання: ОбʼєктЗначення;
      обʼєкт_значення_виконання.тип = тип_результату;
      обʼєкт_значення_виконання.пм_значення = пм_значення_виконання;

      вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_виконання }, помилка = пусто };
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати виконання дії");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: Назва, аргумент: Аргумент): РезультатОбʼєкта {
    якщо перевірити_назви_з_реєстру(назва, назва_зовнішня("вміст"), пусто) {
      якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуАдреса {
        змінна дані_адреси = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуАдреса;

        змінна тип = дані_адреси.тип_даних;

        змінна пм_позиції = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 1);
        пм_позиції[0] = ПМ::створити_п32(компілятор.пм_модуль, 0);

        змінна пм_значення_адреси = ПМ::вказівка_отримати_адресу_елемента(
          контекст.кк_дії.поточний_крок.пм_крок,
          тип.пм_тип,
          обʼєкт_значення.пм_значення,
          1,
          пм_позиції
        );

        звільнити_памʼять(компілятор, пм_позиції);

        змінна результат_аргумента_як_значення = отримати_як_значення(
          компілятор,
          контекст,
          аргумент.місцезнаходження,
          аргумент.обʼєкт,
          тип
        );

        якщо результат_аргумента_як_значення.помилка != пусто {
          вернути РезультатОбʼєкта { ..., помилка = результат_аргумента_як_значення.помилка };
        }

        змінна обʼєкт_значення_аргумента = результат_аргумента_як_значення.обʼєкт_значення;

        якщо тип.вид == ВидОбʼєктаТипуВаріація {
          змінна дані_варіації = тип.дані як ДаніОбʼєктаТипуВаріація;
          змінна знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;
          змінна п: позитивне = 0;
          поки п < дані_варіації.кількість_типів {
            якщо перевірити_тип(компілятор, обʼєкт_значення_аргумента.тип, дані_варіації.типи[п]) {
              знайдений_тип_варіації = дані_варіації.типи[п];
            }
            п += 1;
          }
          якщо знайдений_тип_варіації == пусто {
            вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
          }
        } інакше {
          якщо перевірити_тип(компілятор, обʼєкт_значення_аргумента.тип, тип) == ні {
            вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
          }
        }

        ПМ::вказівка_записати(
          контекст.кк_дії.поточний_крок.пм_крок,
          обʼєкт_значення_аргумента.пм_значення,
          пм_значення_адреси
        );

        вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_аргумента }, помилка = пусто };
      }
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип.вид == ВидОбʼєктаТипуПамʼять {
      змінна дані_памʼяті = обʼєкт_значення.тип.дані як ДаніОбʼєктаТипуПамʼять;

      змінна тип = дані_памʼяті.тип_даних;

      змінна результат_отримання_позиції_як_значення = отримати_як_значення(
        компілятор,
        контекст,
        місцезнаходження,
        позиція.обʼєкт,
        компілятор.тип_ц32
      );
      якщо результат_отримання_позиції_як_значення.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_отримання_позиції_як_значення.помилка };
      }

      змінна обʼєкт_значення_позиції = результат_отримання_позиції_як_значення.обʼєкт_значення;

      змінна пм_позиції = виділити_памʼять<адреса<ПМ::Значення>>(компілятор, 1);
      пм_позиції[0] = обʼєкт_значення_позиції.пм_значення;

      змінна пм_значення_адреси = ПМ::вказівка_отримати_адресу_елемента(
        контекст.кк_дії.поточний_крок.пм_крок,
        тип.пм_тип,
        обʼєкт_значення.пм_значення,
        1,
        пм_позиції
      );

      звільнити_памʼять(компілятор, пм_позиції);

      змінна результат_аргумента_як_значення = отримати_як_значення(
        компілятор,
        контекст,
        аргумент.місцезнаходження,
        аргумент.обʼєкт,
        тип
      );
      якщо результат_аргумента_як_значення.помилка != пусто {
        вернути РезультатОбʼєкта { ..., помилка = результат_аргумента_як_значення.помилка };
      }

      змінна обʼєкт_значення_аргумента = результат_аргумента_як_значення.обʼєкт_значення;
      якщо тип.вид == ВидОбʼєктаТипуВаріація {
        змінна дані_варіації = тип.дані як ДаніОбʼєктаТипуВаріація;

        змінна знайдений_тип_варіації: адреса<ОбʼєктТипу> = пусто;

        змінна п: позитивне = 0;
        поки п < дані_варіації.кількість_типів {
          якщо перевірити_тип(компілятор, обʼєкт_значення_аргумента.тип, дані_варіації.типи[п]) {
            знайдений_тип_варіації = дані_варіації.типи[п];
          }

          п += 1;
        }

        якщо знайдений_тип_варіації == пусто {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
        }
      } інакше {
        якщо перевірити_тип(компілятор, обʼєкт_значення_аргумента.тип, тип) == ні {
          вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
        }
      }

      ПМ::вказівка_записати(
        контекст.кк_дії.поточний_крок.пм_крок,
        обʼєкт_значення_аргумента.пм_значення,
        пм_значення_адреси
      );

      вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_аргумента }, помилка = пусто };
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      змінна обʼєкт_значення_ліво = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) };
      вернути обʼєкт_значення_відняти(компілятор, контекст, місцезнаходження, обʼєкт_значення_ліво, Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, місцезнаходження });
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта {
    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц8, ПМ::створити_ц8(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц16, ПМ::створити_ц16(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц32, ПМ::створити_ц32(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_ц64, ПМ::створити_ц64(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_логічне, ПМ::створити_логічне(компілятор.пм_модуль, ні) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н8, ПМ::створити_п8(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н16, ПМ::створити_п16(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н32, ПМ::створити_п32(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_н64, ПМ::створити_п64(компілятор.пм_модуль, 0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р32 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р32, ПМ::створити_д32(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_р64 {
      змінна аргумент = Аргумент { Обʼєкт { ВидОбʼєктаЗначення, дані = ОбʼєктЗначення { компілятор.тип_р64, ПМ::створити_д64(компілятор.пм_модуль, 0.0) } }, місцезнаходження };
      вернути обʼєкт_значення_рівно(компілятор, контекст, місцезнаходження, обʼєкт_значення, аргумент);
    }

    вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
  }
}

секція КЦ {
  зовнішня дія обʼєкт_значення_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта {
    змінна пм_значення: адреса<ПМ::Значення> = пусто;

    якщо обʼєкт_значення.тип == компілятор.тип_ц8 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_ц8(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц16 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_ц16(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц32 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_ц32(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_ц64 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_ц64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_логічне {
      пм_значення = ПМ::вказівка_двійкове_заперечення_логічне(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н8 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_п8(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н16 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_п16(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н32 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_п32(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше якщо обʼєкт_значення.тип == компілятор.тип_н64 {
      пм_значення = ПМ::вказівка_двійкове_заперечення_п64(контекст.кк_дії.поточний_крок.пм_крок, обʼєкт_значення.пм_значення);
    } інакше {
      вернути результат_обʼєкта_помилка(компілятор, контекст.розібраний_текст, місцезнаходження, "Не вдалось скомпілювати");
    }

    обʼєкт_значення.пм_значення = пм_значення;

    вернути РезультатОбʼєкта { Обʼєкт { ВидОбʼєктаЗначення, обʼєкт_значення }, помилка = пусто };
  }
}