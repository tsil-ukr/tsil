взяти біб Виділяч;
взяти біб Реєстр;
взяти біб Друк;
взяти біб Кодування;
взяти біб Накопичувач;
взяти визначення ПМ;
взяти визначення ./розбирач;

секція КЦ {
  структура Компілятор;
  структура Середовище;
  структура Обʼєкт;
  структура ОбʼєктТипу;
  структура ОбʼєктДії;
  структура ОбʼєктСекції;
  структура ОбʼєктШаблону;
  структура ОбʼєктНезавантаженогоЗначення;
  структура ОбʼєктЗначення;
  структура ОбʼєктСирогоЗначення;
  синонім ВидимістьВнутрішня = 1;
  синонім ВидимістьМісцева = 2;
  синонім ВидимістьЗовнішня = 3;

  структура Шлях {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  дія змішати_шлях_для_реєстру<З>(реєстр: адреса<біб::Реєстр<Шлях, З>>, ключ: Шлях): позитивне {
    змінна змішане: позитивне = 5381;
    змінна п: позитивне = 0;

    поки п < ключ.розмір {
      змішане = (змішане * 33) + позитивне(ключ.дані[п]);
      п += 1;
    }

    вернути змішане;
  }

  дія перевірити_шляхи_в_реєстрі<З>(реєстр: адреса<біб::Реєстр<Шлях, З>>, а: Шлях, б: Шлях): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  місцева дія клонувати_шлях(компілятор: адреса<Компілятор>, шлях: Шлях): Шлях;
  місцева дія знищити_шлях(компілятор: адреса<Компілятор>, шлях: Шлях);

  структура Байти {
    розмір: позитивне;
    дані: памʼять<п8>;
  }

  синонім Назва = ПМ::Назва;

  місцева дія отримати_назву(компілятор: адреса<Компілятор>, значення: т8) -> адреса<Назва>;
  місцева дія назва_без_копіювання(компілятор: адреса<Компілятор>, значення: т8) -> адреса<Назва>;

  дія змішати_назву_шлях_для_реєстру<З>(реєстр: адреса<біб::Реєстр<адреса<Назва>, З>>, ключ: адреса<Назва>): позитивне {
    змінна змішане: позитивне = 5381;
    змінна п: позитивне = 0;

    поки п < ключ.значення.розмір {
      змішане = (змішане * 33) + позитивне(ключ.значення.дані[п]);
      п += 1;
    }

    вернути змішане;
  }

  місцева дія знищити_назву_якщо_копія(компілятор: адреса<Компілятор>, назва: адреса<Назва>);

  синонім КодуванняТ8 = 1;
  синонім КодуванняЮ8 = 2;

  структура ТекстКоду;

  структура ТекстКоду {
    наступний: адреса<ТекстКоду>;
    компілятор: адреса<Компілятор>;
    шлях: Шлях; // копія
    значення: ю8;
  }

  місцева дія створити_текст_коду(компілятор: адреса<Компілятор>): адреса<ТекстКоду>;
  місцева дія знищити_текст_коду(текст_коду: адреса<ТекстКоду>);

  структура РозібранийТекст;

  структура РозібранийТекст {
    наступний: адреса<РозібранийТекст>;
    компілятор: адреса<Компілятор>;
    текст_коду: адреса<ТекстКоду>;
    розбирач: адреса<КЦ::розбирач::Розбирач>;
    слова: КЦ::розбирач::Слова;
    сполуки: КЦ::розбирач::Сполуки;
  }

  місцева дія створити_розібраний_текст(компілятор: адреса<Компілятор>): адреса<РозібранийТекст>;
  місцева дія знищити_розібраний_текст(розібраний_текст: адреса<РозібранийТекст>);

  структура Місцезнаходження {
    розібраний_текст: адреса<РозібранийТекст>;
    позиція_слова: позитивне;
  }

  структура ОбʼєктНезавантаженогоЗначення {
    тип: адреса<ОбʼєктТипу>;
    пм_значення: адреса<ПМ::Значення>;
  }

  структура ОбʼєктЗначення {
    тип: адреса<ОбʼєктТипу>;
    пм_значення: адреса<ПМ::Значення>;
  }

  синонім ВидСирогоОбʼєктаЧисло = 1;
  синонім ВидСирогоОбʼєктаПусто = 2;

  структура ОбʼєктСирогоЗначення {
    наступний: адреса<ОбʼєктСирогоЗначення>;
    компілятор: адреса<Компілятор>;
    вид: позитивне;
    дані: т8; // звільнити коли обʼєкт не потрібен
  }

  місцева дія виділити_обʼєкт_сирого_значення(компілятор: адреса<Компілятор>): адреса<ОбʼєктСирогоЗначення>;
  місцева дія знищити_обʼєкт_сирого_значення(компілятор: адреса<Компілятор>, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>);

  синонім ВидОбʼєктаТип = 1;
  синонім ВидОбʼєктаДія = 2;
  синонім ВидОбʼєктаСекція = 3;
  синонім ВидОбʼєктаШаблон = 4;
  синонім ВидОбʼєктаНезавантаженеЗначення = 5;
  синонім ВидОбʼєктаЗначення = 6;
  синонім ВидОбʼєктаСиреЗначення = 7;

  структура Обʼєкт {
    вид: позитивне;
    дані: адреса<ОбʼєктТипу>
        | адреса<ОбʼєктДії>
        | адреса<ОбʼєктСекції>
        | адреса<ОбʼєктШаблону>
        | ОбʼєктНезавантаженогоЗначення
        | ОбʼєктЗначення
        | адреса<ОбʼєктСирогоЗначення>;
  }

  структура Параметр {
    назва: адреса<Назва>;
    тип: адреса<ОбʼєктТипу>;
    місцезнаходження_назви: Місцезнаходження; // якщо назва.розмір == 0, тоді це місцезнаходження не актуальне
    місцезнаходження_типу: Місцезнаходження; // якщо тип == пусто, тоді це місцезнаходження не актуальне
  }

  місцева дія знищити_параметр(компілятор: адреса<Компілятор>, параметр: Параметр);

  структура Параметри {
    розмір: позитивне;
    дані: памʼять<Параметр>;
    вмісткість: позитивне;
  }

  місцева дія знищити_параметри(компілятор: адреса<Компілятор>, параметри: Параметри);

  структура ДаніОбʼєктаТипуПростий {
    назва: адреса<Назва>;
  }

  синонім ВидАргументаГотовихШаблонуОбʼєктТипу = 1;
  синонім ВидАргументаГотовихШаблонуОбʼєктСирогоЗначення = 2;

  структура ГотовийАргументШаблону {
    вид: позитивне;
    значення: адреса<ОбʼєктТипу> | адреса<ОбʼєктСирогоЗначення>;
  }

  структура ГотовіАргументиШаблону {
    розмір: позитивне;
    дані: памʼять<ГотовийАргументШаблону>;
  }

  місцева дія знищити_готові_аргументи_шаблону(компілятор: адреса<Компілятор>, готові_аргументи_шаблону: ГотовіАргументиШаблону);

  структура ДаніОбʼєктаТипуСтруктура {
    назва: адреса<Назва>;
    параметри: Параметри;
    повна_назва: адреса<Назва>;
    готові_аргументи_шаблону: ГотовіАргументиШаблону;
    обʼєкт_секції: адреса<ОбʼєктСекції>;
  }

  структура ДаніОбʼєктаТипуДія {
    параметри: Параметри;
    тип_результату: адреса<ОбʼєктТипу>;
    пм_тип_інструкції: адреса<ПМ::Тип>;
  }

  структура ДаніОбʼєктаТипуАдреса {
    тип_даних: адреса<ОбʼєктТипу>;
  }

  структура ДаніОбʼєктаТипуПамʼять {
    тип_даних: адреса<ОбʼєктТипу>;
  }

  структура ДаніОбʼєктаТипуМасив {
    тип_даних: адреса<ОбʼєктТипу>;
    розмір_масиву: позитивне;
  }

  структура ДаніОбʼєктаТипуВаріація {
    кількість_типів: позитивне;
    типи: памʼять<адреса<ОбʼєктТипу>>;
    найбільший_тип: адреса<ОбʼєктТипу>;
  }

  синонім ВидОбʼєктаТипуПростий = 1;
  синонім ВидОбʼєктаТипуСтруктура = 2;
  синонім ВидОбʼєктаТипуДія = 3;
  синонім ВидОбʼєктаТипуАдреса = 4;
  синонім ВидОбʼєктаТипуПамʼять = 5;
  синонім ВидОбʼєктаТипуМасив = 6;
  синонім ВидОбʼєктаТипуВаріація = 7;

  структура ОбʼєктТипу {
    наступний: адреса<ОбʼєктТипу>;
    вид: позитивне;
    пм_тип: адреса<ПМ::Тип>;
    дані: ДаніОбʼєктаТипуПростий
        | ДаніОбʼєктаТипуСтруктура
        | ДаніОбʼєктаТипуДія
        | ДаніОбʼєктаТипуАдреса
        | ДаніОбʼєктаТипуПамʼять
        | ДаніОбʼєктаТипуМасив
        | ДаніОбʼєктаТипуВаріація;
  }

  місцева дія виділити_обʼєкт_типу(компілятор: адреса<Компілятор>): адреса<ОбʼєктТипу>;
  місцева дія знищити_обʼєкт_типу(компілятор: адреса<Компілятор>, обʼєкт_типу: адреса<ОбʼєктТипу>);

  структура Крок {
    назва: адреса<Назва>;
    обʼєкт_дії: адреса<ОбʼєктДії>;
    пм_крок: адреса<ПМ::Крок>;
  }

  місцева дія знищити_крок(компілятор: адреса<Компілятор>, крок: Крок);

  структура Кроки {
    розмір: позитивне;
    дані: памʼять<Крок>;
    вмісткість: позитивне;
  }

  місцева дія знищити_кроки(компілятор: адреса<Компілятор>, кроки: Кроки);

  структура Стрибок {
    назва: адреса<Назва>;
    обʼєкт_дії: адреса<ОбʼєктДії>;
    пм_стрибок: адреса<ПМ::Стрибок>;
    місцезнаходження: розбирач::Місцезнаходження;
  }

  місцева дія знищити_стрибок(компілятор: адреса<Компілятор>, стрибок: Стрибок);

  структура Стрибки {
    розмір: позитивне;
    дані: памʼять<Стрибок>;
    вмісткість: позитивне;
  }

  місцева дія знищити_стрибки(компілятор: адреса<Компілятор>, стрибки: Стрибки);

  структура ОбʼєктДії {
    наступний: адреса<ОбʼєктДії>;
    видимість: позитивне;
    назва: адреса<Назва>;
    місцезнаходження: Місцезнаходження;
    місцезнаходження_назви: Місцезнаходження;
    повна_назва: адреса<Назва>;
    параметри: Параметри;
    тип_результату: адреса<ОбʼєктТипу>;
    місцезнаходження_типу_результату: Місцезнаходження;
    тип: адреса<ОбʼєктТипу>;
    пм_інструкція: адреса<ПМ::Інструкція>;
    має_тіло: позитивне;
    кроки: Кроки;
    стрибки: Стрибки;
  }

  місцева дія виділити_обʼєкт_дії(компілятор: адреса<Компілятор>): адреса<ОбʼєктДії>;
  місцева дія знищити_обʼєкт_дії(компілятор: адреса<Компілятор>, обʼєкт_дії: адреса<ОбʼєктДії>);

  структура ОбʼєктСекції {
    наступний: адреса<ОбʼєктСекції>;
    назва: адреса<Назва>;
    середовище: адреса<Середовище>;
  }

  місцева дія виділити_обʼєкт_секції(компілятор: адреса<Компілятор>): адреса<ОбʼєктСекції>;
  місцева дія знищити_обʼєкт_секції(компілятор: адреса<Компілятор>, обʼєкт_секції: адреса<ОбʼєктСекції>);

  структура КонтекстКомпіляціїДії {
    обʼєкт_дії: адреса<ОбʼєктДії>;
    крок_накопичень: Крок;
    значення_вернути: ОбʼєктНезавантаженогоЗначення;
    крок_вернути: Крок;
    поточний_крок: Крок;
  }

  структура КонтекстКомпіляціїВиконанняШаблону {
    обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    готові_аргументи_шаблону: ГотовіАргументиШаблону;
  }

  структура Контекст {
    розібраний_текст: адреса<РозібранийТекст>;
    середовище: адреса<Середовище>;
    кк_дії: адреса<КонтекстКомпіляціїДії>;
  }

  структура ОбʼєктШаблону {
    наступний: адреса<ОбʼєктШаблону>;
    назва: адреса<Назва>;
    параметри: Параметри;
    сполука: адреса<розбирач::Сполука>;
    готові: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>;
    контекст_компіляції: Контекст;
  }

  місцева дія знищити_обʼєкт_шаблону(компілятор: адреса<Компілятор>, обʼєкт_шаблону: адреса<ОбʼєктШаблону>);

  структура Середовище {
    наступне: адреса<Середовище>;
    компілятор: адреса<Компілятор>;
    зовнішнє: адреса<Середовище>;
    субʼєкти: адреса<біб::Реєстр<адреса<Назва>, Обʼєкт>>;
    обʼєкт_секції: адреса<ОбʼєктСекції>;
    обʼєкт_дії: адреса<ОбʼєктДії>;
  }

  місцева дія створити_середовище(компілятор: адреса<Компілятор>, зовнішнє: адреса<Середовище>): адреса<Середовище>;
  місцева дія створити_середовище_секції(компілятор: адреса<Компілятор>, зовнішнє: адреса<Середовище>, обʼєкт_секції: адреса<ОбʼєктСекції>): адреса<Середовище>;
  місцева дія створити_середовище_дії(компілятор: адреса<Компілятор>, зовнішнє: адреса<Середовище>, обʼєкт_дії: адреса<ОбʼєктДії>): адреса<Середовище>;
  місцева дія знищити_середовище(середовище: адреса<Середовище>);
  місцева дія змінити_в_середовищі(середовище: адреса<Середовище>, назва: адреса<Назва>, обʼєкт: Обʼєкт);
  місцева дія знайти_в_середовищі(середовище: адреса<Середовище>, назва: адреса<Назва>, вихід: адреса<Обʼєкт>): логічне;
  місцева дія знайти_в_середовищі_рекурсивно(середовище: адреса<Середовище>, назва: адреса<Назва>, вихід: адреса<Обʼєкт>): логічне;

  структура ВзятіФайли {
    компілятор: адреса<Компілятор>;
    реєстр: адреса<біб::Реєстр<Шлях, адреса<РозібранийТекст>>>;
  }

  місцева дія створити_взяті_файли(компілятор: адреса<Компілятор>): адреса<ВзятіФайли>;
  місцева дія знищити_взяті_файли(взяті_файли: адреса<ВзятіФайли>);

  // шлях буде клоновано
  місцева дія покласти_взятий_файл(взяті_файли: адреса<ВзятіФайли>, шлях: Шлях, розібраний_текст: адреса<РозібранийТекст>);

  місцева дія знайти_взятий_файл(взяті_файли: адреса<ВзятіФайли>, шлях: Шлях, вихід: адреса<адреса<РозібранийТекст>>): логічне;

  структура Компілятор {
    виділяч: адреса<біб::Виділяч>;
    пм_модуль: адреса<ПМ::Модуль>;
    кореневий_шлях: Шлях; // копія
    шлях_до_біб: Шлях; // копія
    взяті_файли: адреса<ВзятіФайли>;
    пм_сховище_назв: адреса<ПМ::СховищеНазв>;
    перше_середовище: адреса<Середовище>;
    останнє_середовище: адреса<Середовище>;
    перший_обʼєкт_дії: адреса<ОбʼєктДії>;
    останній_обʼєкт_дії: адреса<ОбʼєктДії>;
    перший_обʼєкт_типу: адреса<ОбʼєктТипу>;
    останній_обʼєкт_типу: адреса<ОбʼєктТипу>;
    перший_обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    останній_обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    перший_обʼєкт_секції: адреса<ОбʼєктСекції>;
    останній_обʼєкт_секції: адреса<ОбʼєктСекції>;
    перший_обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>;
    останній_обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>;
    перший_розібраний_текст: адреса<РозібранийТекст>;
    останній_розібраний_текст: адреса<РозібранийТекст>;
    перший_текст_коду: адреса<ТекстКоду>;
    останній_текст_коду: адреса<ТекстКоду>;
    глобальне_середовище: адреса<Середовище>;
    тип_ніщо: адреса<ОбʼєктТипу>;
    тип_адреса: адреса<ОбʼєктТипу>;
    тип_памʼять: адреса<ОбʼєктТипу>;
    тип_логічне: адреса<ОбʼєктТипу>;
    тип_ц8: адреса<ОбʼєктТипу>;
    тип_ц16: адреса<ОбʼєктТипу>;
    тип_ц32: адреса<ОбʼєктТипу>;
    тип_ц64: адреса<ОбʼєктТипу>;
    тип_ціле: адреса<ОбʼєктТипу>;
    тип_п8: адреса<ОбʼєктТипу>;
    тип_п16: адреса<ОбʼєктТипу>;
    тип_п32: адреса<ОбʼєктТипу>;
    тип_п64: адреса<ОбʼєктТипу>;
    тип_позитивне: адреса<ОбʼєктТипу>;
    тип_р32: адреса<ОбʼєктТипу>;
    тип_р64: адреса<ОбʼєктТипу>;
    тип_текст: адреса<ОбʼєктТипу>;
    тип_т8: адреса<ОбʼєктТипу>;
    тип_т16: адреса<ОбʼєктТипу>;
    тип_т32: адреса<ОбʼєктТипу>;
    тип_ю8: адреса<ОбʼєктТипу>;
    тип_ю16: адреса<ОбʼєктТипу>;
    тип_ю32: адреса<ОбʼєктТипу>;
    обʼєкт_значення_так: ОбʼєктЗначення;
    обʼєкт_значення_ні: ОбʼєктЗначення;
    обʼєкт_значення_пусто: ОбʼєктЗначення;
  }

  дія виділити<Т>(компілятор: адреса<Компілятор>): адреса<Т> {
    вернути біб::виділити<Т>(компілятор.виділяч);
  }

  дія перевиділити<Т>(компілятор: адреса<Компілятор>, значення: адреса<Т>, кількість: позитивне): памʼять<Т> {
    вернути біб::перевиділити<Т>(компілятор.виділяч, значення, кількість);
  }

  дія звільнити(компілятор: адреса<Компілятор>, значення: невідома_адреса) {
    біб::звільнити(компілятор.виділяч, значення);
  }

  дія виділити_памʼять<Т>(компілятор: адреса<Компілятор>, кількість: позитивне): памʼять<Т> {
    вернути біб::виділити_памʼять<Т>(компілятор.виділяч, кількість);
  }

  дія перевиділити_памʼять<Т>(компілятор: адреса<Компілятор>, значення: памʼять<Т>, кількість: позитивне): памʼять<Т> {
    вернути біб::перевиділити_памʼять<Т>(компілятор.виділяч, значення, кількість);
  }

  дія звільнити_памʼять(компілятор: адреса<Компілятор>, значення: невідома_памʼять) {
    біб::звільнити_памʼять(компілятор.виділяч, значення);
  }

  місцева дія створити_простий_тип(компілятор: адреса<Компілятор>, назва: адреса<Назва>, пм_тип: адреса<ПМ::Тип>): адреса<ОбʼєктТипу>;
  місцева дія створити_тип_адреси(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  місцева дія створити_тип_памʼяті(компілятор: адреса<Компілятор>, тип_даних: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  місцева дія створити_тип_дії(компілятор: адреса<Компілятор>, параметри: Параметри, тип_результату: адреса<ОбʼєктТипу>): адреса<ОбʼєктТипу>;
  місцева дія створити_варіативний_тип(компілятор: адреса<Компілятор>, кількість_типів: позитивне, типи: памʼять<адреса<ОбʼєктТипу>>): адреса<ОбʼєктТипу>;

  місцева дія створити_компілятор(виділяч: адреса<біб::Виділяч>, пм_модуль: адреса<ПМ::Модуль>): адреса<Компілятор>;
  місцева дія знищити_компілятор(компілятор: адреса<Компілятор>);
  місцева дія отримати_повну_назву_в_контексті(компілятор: адреса<Компілятор>, контекст: Контекст, назва: т8): т8;

  дія виділити_копію_шляху(компілятор: адреса<Компілятор>, шлях: Шлях): Шлях {
    змінна копія = Шлях {
      шлях.розмір,
      виділити_памʼять<п8>(компілятор, шлях.розмір)
    };
    змінна п: позитивне = 0;
    поки п < шлях.розмір {
      копія.дані[п] = шлях.дані[п];
      п += 1;
    }
    вернути копія;
  }

  структура МісцезнаходженняПомилки {
    текст_коду: адреса<ТекстКоду>; // текст коду в помилці має бути знищено тим хто обробляє помилку;
                                   // знищенню підлягає як шлях, так і значення
    позиція_в_тексті: позитивне;
    рядок: позитивне;
    стовпець: позитивне;
  }

  дія створити_місцезнаходження_помилки(компілятор: адреса<Компілятор>, текст_коду: адреса<ТекстКоду>, позиція_в_тексті: позитивне, рядок: позитивне, стовпець: позитивне): адреса<МісцезнаходженняПомилки> {
    змінна місцезнаходження_помилки = виділити<МісцезнаходженняПомилки>(компілятор);
    місцезнаходження_помилки.текст_коду = текст_коду;
    місцезнаходження_помилки.позиція_в_тексті = позиція_в_тексті;
    місцезнаходження_помилки.рядок = рядок;
    місцезнаходження_помилки.стовпець = стовпець;
    вернути місцезнаходження_помилки;
  }

  дія знищити_місцезнаходження_помилки(компілятор: адреса<Компілятор>, місцезнаходження_помилки: адреса<МісцезнаходженняПомилки>) {
    звільнити(компілятор, місцезнаходження_помилки);
  }

  структура Помилка {
    повідомлення: т8;
    місцезнаходження: адреса<МісцезнаходженняПомилки>;
  }

  дія виділити_копію_т8(компілятор: адреса<Компілятор>, значення: т8): т8;

  дія створити_помилку(компілятор: адреса<Компілятор>, повідомлення: т8, місцезнаходження: адреса<МісцезнаходженняПомилки>): адреса<Помилка> {
    змінна помилка = виділити<Помилка>(компілятор);
    помилка.повідомлення = виділити_копію_т8(компілятор, повідомлення);
    помилка.місцезнаходження = місцезнаходження;
    вернути помилка;
  }

  дія створити_помилку_без_копіювання(компілятор: адреса<Компілятор>, повідомлення: т8, місцезнаходження: адреса<МісцезнаходженняПомилки>): адреса<Помилка> {
    змінна помилка = виділити<Помилка>(компілятор);
    помилка.повідомлення = повідомлення;
    помилка.місцезнаходження = місцезнаходження;
    вернути помилка;
  }

  дія знищити_помилку(компілятор: адреса<Компілятор>, помилка: адреса<Помилка>) {
    звільнити_памʼять(компілятор, помилка.повідомлення.дані);

    якщо помилка.місцезнаходження != пусто {
      знищити_місцезнаходження_помилки(компілятор, помилка.місцезнаходження);
    }
    звільнити(компілятор, помилка);
  }

  структура Результат {
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєкта {
    обʼєкт: Обʼєкт;
    помилка: адреса<Помилка>;
  }

  структура РезультатЗначення {
    обʼєкт_значення: ОбʼєктЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатАбоПомилка {
    помилка: адреса<Помилка>;
  }

  дія створити_місцезнаходження_помилки_з_місцезнаходження(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження): адреса<МісцезнаходженняПомилки> {
    змінна слово = місцезнаходження.розібраний_текст.слова.дані[місцезнаходження.позиція_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, місцезнаходження.розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, місцезнаходження: розбирач::Місцезнаходження): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[місцезнаходження.позиція_початкового_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія створити_місцезнаходження_помилки_зі_сполуки(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, сполука: адреса<розбирач::Сполука>): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[сполука.місцезнаходження.позиція_початкового_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія створити_місцезнаходження_помилки_з_позиції_слова(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, позиція_слова: позитивне): адреса<МісцезнаходженняПомилки> {
    змінна слово = розібраний_текст.слова.дані[позиція_слова];
    змінна позиція_в_тексті = слово.позиція_початку.позиція_в_тексті;
    змінна рядок = слово.позиція_початку.рядок;
    змінна стовпець = слово.позиція_початку.стовпець;
    вернути створити_місцезнаходження_помилки(компілятор, розібраний_текст.текст_коду, позиція_в_тексті, рядок, стовпець);
  }

  дія результат_помилка(компілятор: адреса<Компілятор>, повідомлення: т8): Результат {
    змінна помилка = створити_помилку(компілятор, повідомлення, пусто);

    вернути Результат {
      помилка = помилка
    };
  }

  дія результат_обʼєкта_помилка(компілятор: адреса<Компілятор>, розібраний_текст: адреса<РозібранийТекст>, місцезнаходження: розбирач::Місцезнаходження, повідомлення: т8): РезультатОбʼєкта {
    змінна помилка = створити_помилку(компілятор, повідомлення, створити_місцезнаходження_помилки_з_місцезнаходження_розбирача(компілятор, розібраний_текст, місцезнаходження));

    вернути РезультатОбʼєкта {
      Обʼєкт { ... },
      помилка = помилка
    };
  }

  дія шлях_з_ю8(значення: ю8): Шлях {
    вернути Шлях { значення.розмір, значення.дані };
  }

  структура РезультатОбʼєктаДії {
    обʼєкт_дії: адреса<ОбʼєктДії>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаТипу {
    обʼєкт_типу: адреса<ОбʼєктТипу>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаШаблону {
    обʼєкт_шаблону: адреса<ОбʼєктШаблону>;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаСекції {
    обʼєкт_секції: адреса<ОбʼєктСекції>;
    помилка: адреса<Помилка>;
  }

  структура РезультатПараметрів {
    параметри: Параметри;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаЗначення {
    обʼєкт_значення: ОбʼєктЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатОбʼєктаНезавантаженогоЗначення {
    обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення;
    помилка: адреса<Помилка>;
  }

  структура РезультатКомпіляціїТіла {
    помилка: адреса<Помилка>;
  }

  місцева дія скомпілювати_тіло(компілятор: адреса<Компілятор>, контекст: Контекст, тіло: розбирач::Сполуки, місцезнаходження: розбирач::Місцезнаходження): РезультатКомпіляціїТіла;
  місцева дія скомпілювати_параметри_дії(компілятор: адреса<Компілятор>, контекст: Контекст, обʼєкт_дії: адреса<ОбʼєктДії>, параметри_розбирача: розбирач::Параметри, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів;

  місцева дія скомпілювати_значення(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, сполука: адреса<розбирач::Сполука>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_значення_як_значення(компілятор: адреса<Компілятор>, контекст: Контекст, сполука: адреса<розбирач::Сполука>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;
  місцева дія скомпілювати_значення_як_тип(компілятор: адреса<Компілятор>, контекст: Контекст, сполука: адреса<розбирач::Сполука>, перевірка_на_повність: логічне): РезультатОбʼєктаТипу;
  місцева дія отримати_як_тип(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, перевірка_на_повність: логічне): РезультатОбʼєктаТипу;
  місцева дія отримати_як_значення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;
  місцева дія створити_пустий_обʼєкт(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;

  місцева дія розібрати_число(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, значення: т8, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєктаЗначення;

  місцева дія скомпілювати_число(компілятор: адреса<Компілятор>, контекст: Контекст, дані_числа: розбирач::ДаніСполукиЧисло, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, обʼєкт_дії: адреса<ОбʼєктДії>, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії;
  місцева дія скомпілювати_отримати_з_середовища(компілятор: адреса<Компілятор>, контекст: Контекст, дані_прочитати: розбирач::ДаніСполукиПрочитати, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_властивість: розбирач::ДаніСполукиОтриматиВластивість, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_отримати_елемент(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_елемент: розбирач::ДаніСполукиОтриматиЕлемент, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_отримати_секційну_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_отримати_секційну_властивість: розбирач::ДаніСполукиОтриматиСекційнуВластивість, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_властивість: розбирач::ДаніСполукиЗмінитиВластивість, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_змінити_секційну_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_секційну_властивість: розбирач::ДаніСполукиЗмінитиСекційнуВластивість, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_змінити_елемент(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінити_елемент: розбирач::ДаніСполукиЗмінитиЕлемент, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_виконати_шаблон: розбирач::ДаніСполукиВиконатиШаблон, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_виконати_дію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_виконати_дію: розбирач::ДаніСполукиВиконатиДію, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_параметри_шаблону(компілятор: адреса<Компілятор>, контекст: Контекст, параметри_розбирача: розбирач::ПараметриШаблону, місцезнаходження: розбирач::Місцезнаходження): РезультатПараметрів;
  місцева дія скомпілювати_операцію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_операції: розбирач::ДаніСполукиОперація, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_взяти(компілятор: адреса<Компілятор>, контекст: Контекст, дані_взяти: розбирач::ДаніСполукиВзяти, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_обʼєкт(компілятор: адреса<Компілятор>, контекст: Контекст, дані_обʼєкта: розбирач::ДаніСполукиОбʼєкт, місцезнаходження: розбирач::Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія скомпілювати_однооперацію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_однооперації: розбирач::ДаніСполукиОднооперація, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_секцію(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, дані_секції: розбирач::ДаніСполукиСекція, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаСекції;
  місцева дія скомпілювати_синонім(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, дані_синоніма: розбирач::ДаніСполукиСинонім, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_текст(компілятор: адреса<Компілятор>, контекст: Контекст, дані_тексту: розбирач::ДаніСполукиТекст, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_структуру(компілятор: адреса<Компілятор>, контекст: Контекст, контекст_виконання_шаблону: адреса<КонтекстКомпіляціїВиконанняШаблону>, обʼєкт_типу_структура: адреса<ОбʼєктТипу>, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  місцева дія скомпілювати_тип_дії(компілятор: адреса<Компілятор>, контекст: Контекст, дані_типу_дії: розбирач::ДаніСполукиТипДії, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  місцева дія скомпілювати_варіативний_тип(компілятор: адреса<Компілятор>, контекст: Контекст, дані_варіативного_типу: розбирач::ДаніСполукиВаріативнийТип, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  місцева дія скомпілювати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаШаблону;

  місцева дія скомпілювати_якщо(компілятор: адреса<Компілятор>, контекст: Контекст, дані_якщо: розбирач::ДаніСполукиЯкщо, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_поки(компілятор: адреса<Компілятор>, контекст: Контекст, дані_поки: розбирач::ДаніСполукиПоки, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_вернути(компілятор: адреса<Компілятор>, контекст: Контекст, дані_вернути: розбирач::ДаніСполукиВернути, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_змінити_в_середовищі(компілятор: адреса<Компілятор>, контекст: Контекст, дані_записати: розбирач::ДаніСполукиЗаписати, місцезнаходження: розбирач::Місцезнаходження): РезультатАбоПомилка;
  місцева дія скомпілювати_дію_як_елемент_тіла(компілятор: адреса<Компілятор>, контекст: Контекст, дані_дії: розбирач::ДаніСполукиДія, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаДії;
  місцева дія скомпілювати_визначити_ціль(компілятор: адреса<Компілятор>, контекст: Контекст, дані_цілі: розбирач::ДаніСполукиЦіль, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_визначити_змінну(компілятор: адреса<Компілятор>, контекст: Контекст, дані_змінної: розбирач::ДаніСполукиЗмінна, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_визначити_сталу(компілятор: адреса<Компілятор>, контекст: Контекст, дані_сталої: розбирач::ДаніСполукиСтала, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_визначити_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, дані_шаблону: розбирач::ДаніСполукиШаблон, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаШаблону;
  місцева дія скомпілювати_структуру_як_елемент_тіла(компілятор: адреса<Компілятор>, контекст: Контекст, дані_структури: розбирач::ДаніСполукиСтруктура, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаТипу;
  місцева дія скомпілювати_визначити_секцію(компілятор: адреса<Компілятор>, контекст: Контекст, дані_секції: розбирач::ДаніСполукиСекція, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєктаСекції;
  місцева дія скомпілювати_визначити_синонім(компілятор: адреса<Компілятор>, контекст: Контекст, дані_синоніма: розбирач::ДаніСполукиСинонім, місцезнаходження: розбирач::Місцезнаходження): РезультатОбʼєкта;
  місцева дія скомпілювати_крок(компілятор: адреса<Компілятор>, контекст: Контекст, дані_кроку: розбирач::ДаніСполукиКрок, місцезнаходження: розбирач::Місцезнаходження): Результат;
  місцева дія скомпілювати_стрибнути(компілятор: адреса<Компілятор>, контекст: Контекст, дані_стрибнути: розбирач::ДаніСполукиСтрибнути, місцезнаходження: розбирач::Місцезнаходження): Результат;

  місцева дія прочитати_файл(компілятор: адреса<Компілятор>, шлях: Шлях, вихід: адреса<Байти>): логічне;
  місцева дія записати_файл(компілятор: адреса<Компілятор>, шлях: Шлях, значення: Байти): логічне;

  // шлях буде скопійовано
  місцева дія взяти_файл_ю8(компілятор: адреса<Компілятор>, середовище: адреса<Середовище>, шлях: Шлях, вихід_помилки: адреса<адреса<Помилка>>): логічне;
  місцева дія перевірити_чи_шлях_існує(компілятор: адреса<Компілятор>, шлях: Шлях): логічне;
  місцева дія отримати_директорію_шляху_до_файлу(компілятор: адреса<Компілятор>, вхід: Шлях, вихід: адреса<Шлях>): логічне;
  місцева дія отримати_поточну_директорію_процесу(компілятор: адреса<Компілятор>, вихід: адреса<Шлях>): логічне;
  місцева дія отримати_абсолютний_шлях(компілятор: адреса<Компілятор>, вхід: Шлях, вихід: адреса<Шлях>): логічне;
  місцева дія скомпілювати_текст_коду(компілятор: адреса<Компілятор>, середовище: адреса<Середовище>, текст_коду: адреса<ТекстКоду>, вихід_помилки: адреса<адреса<Помилка>>): логічне;

  місцева дія перекодувати_ю8_в_т8_з_місцезнаходженнями(компілятор: адреса<Компілятор>, значення: ю8, вихід: адреса<т8>, вихід_місцезнаходжень: адреса<біб::МісцезнаходженняПерекодованого>): логічне;

  місцева дія спробувати_розібрати_ціле_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<ц64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;
  місцева дія спробувати_розібрати_позитивне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<п64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;
  місцева дія спробувати_розібрати_дійсне_число(компілятор: адреса<Компілятор>, значення: т8, вихід: адреса<д64>, вихід_помилки: адреса<т8>, вихід_позиції_помилки: адреса<позитивне>): логічне;

  дія померти(компілятор: адреса<Компілятор>, повідомлення: т8) {
    біб::надрукувати(повідомлення);
    // ...
  }
}

секція КЦ {
  структура Аргумент {
    обʼєкт: Обʼєкт;
    місцезнаходження: розбирач::Місцезнаходження;
  }

  місцева дія обʼєкт_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт): РезультатОбʼєкта;
  місцева дія обʼєкт_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт): РезультатОбʼєкта;
  місцева дія обʼєкт_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт: Обʼєкт): РезультатОбʼєкта;

  місцева дія обʼєкт_типу_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_типу_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_типу: адреса<ОбʼєктТипу>): РезультатОбʼєкта;

  місцева дія обʼєкт_дії_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>): РезультатОбʼєкта;
  місцева дія обʼєкт_дії_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_дії: адреса<ОбʼєктДії>): РезультатОбʼєкта;

  місцева дія обʼєкт_секції_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>): РезультатОбʼєкта;
  місцева дія обʼєкт_секції_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_секції: адреса<ОбʼєктСекції>): РезультатОбʼєкта;

  місцева дія обʼєкт_шаблону_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>):РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>):РезультатОбʼєкта;
  місцева дія обʼєкт_шаблону_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_шаблону: адреса<ОбʼєктШаблону>):РезультатОбʼєкта;

  місцева дія обʼєкт_сирого_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>): РезультатОбʼєкта;
  місцева дія обʼєкт_сирого_значення_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_сирого_значення: адреса<ОбʼєктСирогоЗначення>): РезультатОбʼєкта;

  місцева дія обʼєкт_незавантаженого_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення): РезультатОбʼєкта;
  місцева дія обʼєкт_незавантаженого_значення_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_незавантаженого_значення: ОбʼєктНезавантаженогоЗначення): РезультатОбʼєкта;

  місцева дія обʼєкт_значення_додати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_відняти(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_помножити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_поділити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_поділити_за_модулем(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_зсунути_вліво(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_зсунути_вправо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_більше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_менше(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_більше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_менше_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_не_рівно(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_ді(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_дабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_вабо(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_як(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_отримати_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_отримати_властивість_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: адреса<Назва>, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_отримати_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, очікуваний_тип: адреса<ОбʼєктТипу>): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_виконати(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_виконати_шаблон(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, кількість_аргументів: позитивне, аргументи: памʼять<Аргумент>): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_змінити_властивість(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_змінити_в_секції(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, назва: адреса<Назва>, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_змінити_за_позицією(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення, позиція: Аргумент, аргумент: Аргумент): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_унарний_мінус(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_заперечити(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта;
  місцева дія обʼєкт_значення_двійкове_заперечення(компілятор: адреса<Компілятор>, контекст: Контекст, місцезнаходження: розбирач::Місцезнаходження, обʼєкт_значення: ОбʼєктЗначення): РезультатОбʼєкта;

  місцева дія створити_помилку_невірний_тип_вернути(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): адреса<Помилка>;
  місцева дія створити_помилку_невірний_тип_значення(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): адреса<Помилка>;
  місцева дія створити_помилку_субʼєкт_не_визначено(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, ідентифікатор: т8): адреса<Помилка>;
  місцева дія створити_помилку_субʼєкт_вже_визначено(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, ідентифікатор: т8): адреса<Помилка>;
  місцева дія створити_помилку_видимість_дії_не_відповідає_задекларованій(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікується: позитивне, отримано: позитивне): адреса<Помилка>;
  місцева дія створити_помилку_кількість_параметрів_дії_не_відповідає_задекларованій(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікується: позитивне, отримано: позитивне): адреса<Помилка>;
  місцева дія створити_помилку_назва_параметра_дії_не_відповідає_задекларованій(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікується: т8, отримано: т8): адреса<Помилка>;
  місцева дія створити_помилку_тип_параметра_дії_не_відповідає_задекларованому(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, назва: т8, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): адреса<Помилка>;
  місцева дія створити_помилку_тип_результату_дії_не_відповідає_задекларованому(компілятор: адреса<Компілятор>, місцезнаходження: Місцезнаходження, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): адреса<Помилка>;
}

секція КЦ {
  дія перевірити_тип(компілятор: адреса<Компілятор>, очікуваний_тип: адреса<ОбʼєктТипу>, тип: адреса<ОбʼєктТипу>): логічне {
    якщо тип == очікуваний_тип {
      вернути так;
    }

    якщо тип.вид == ВидОбʼєктаТипуДія {
      якщо очікуваний_тип.вид == ВидОбʼєктаТипуДія {
        змінна дані_типу = тип.дані як ДаніОбʼєктаТипуДія;
        змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуДія;

        якщо дані_типу.параметри.розмір != дані_очікуваного_типу.параметри.розмір {
          вернути ні;
        }

        змінна п: позитивне = 0;

        поки п < дані_типу.параметри.розмір {
          якщо перевірити_тип(компілятор, дані_очікуваного_типу.параметри.дані[п].тип, дані_типу.параметри.дані[п].тип) == ні {
            вернути ні;
          }

          п += 1;
        }

        якщо перевірити_тип(компілятор, дані_очікуваного_типу.тип_результату, дані_типу.тип_результату) == ні {
          вернути ні;
        }

        вернути так;
      }
    }

    якщо тип.вид == ВидОбʼєктаТипуАдреса {
      якщо очікуваний_тип.вид == ВидОбʼєктаТипуАдреса {
        змінна дані_типу = тип.дані як ДаніОбʼєктаТипуАдреса;
        змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуАдреса;

        вернути перевірити_тип(компілятор, дані_очікуваного_типу.тип_даних, дані_типу.тип_даних);
      }
    }

    якщо тип.вид == ВидОбʼєктаТипуПамʼять {
      якщо очікуваний_тип.вид == ВидОбʼєктаТипуПамʼять {
        змінна дані_типу = тип.дані як ДаніОбʼєктаТипуПамʼять;
        змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуПамʼять;

        вернути перевірити_тип(компілятор, дані_очікуваного_типу.тип_даних, дані_типу.тип_даних);
      }
    }

    якщо тип.вид == ВидОбʼєктаТипуМасив {
      якщо очікуваний_тип.вид == ВидОбʼєктаТипуМасив {
        змінна дані_типу = тип.дані як ДаніОбʼєктаТипуМасив;
        змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуМасив;

        // потім: перевірити розмір

        вернути перевірити_тип(компілятор, дані_очікуваного_типу.тип_даних, дані_типу.тип_даних);
      }
    }

    вернути ні;
  }

  дія перевірити_тип_на_запис_і_конвертувати_якщо_треба(компілятор: адреса<Компілятор>, очікуваний_тип: адреса<ОбʼєктТипу>, обʼєкт_значення: адреса<ОбʼєктЗначення>): логічне {
    змінна тип = обʼєкт_значення.тип;

    якщо тип == очікуваний_тип {
      вернути так;
    }

    якщо очікуваний_тип.вид == ВидОбʼєктаТипуАдреса {
      змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуАдреса;

      якщо дані_очікуваного_типу.тип_даних == компілятор.тип_ніщо {
        якщо тип.вид == ВидОбʼєктаТипуАдреса {
          вернути так;
        }
      }

      якщо обʼєкт_значення.пм_значення == компілятор.обʼєкт_значення_пусто.пм_значення {
        вернути так;
      }
    } інакше якщо очікуваний_тип.вид == ВидОбʼєктаТипуПамʼять {
      змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуПамʼять;

      якщо дані_очікуваного_типу.тип_даних == компілятор.тип_ніщо {
        якщо тип.вид == ВидОбʼєктаТипуПамʼять {
          вернути так;
        }
      }

      якщо обʼєкт_значення.пм_значення == компілятор.обʼєкт_значення_пусто.пм_значення {
        вернути так;
      }
    } інакше якщо очікуваний_тип.вид == ВидОбʼєктаТипуДія {
      якщо обʼєкт_значення.пм_значення == компілятор.обʼєкт_значення_пусто.пм_значення {
        вернути так;
      }
    } інакше якщо очікуваний_тип.вид == ВидОбʼєктаТипуВаріація {
      змінна дані_очікуваного_типу = очікуваний_тип.дані як ДаніОбʼєктаТипуВаріація;

      змінна п: позитивне = 0;

      поки п < дані_очікуваного_типу.кількість_типів {
        якщо перевірити_тип(компілятор, дані_очікуваного_типу.типи[п], тип) {
          вернути так;
        }

        п += 1;
      }

      вернути так;
    }

    вернути перевірити_тип(компілятор, очікуваний_тип, обʼєкт_значення.тип);
  }
}

секція КЦ {
  дія змішати_готові_аргументи_шаблону(реєстр: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>, готовий_аргумент_шаблону: ГотовіАргументиШаблону): позитивне {
    вернути готовий_аргумент_шаблону.розмір;
  }

  дія перевірити_готові_аргументи_шаблону(реєстр: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>, а: ГотовіАргументиШаблону, б: ГотовіАргументиШаблону): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п].вид != б.дані[п].вид {
        вернути ні;
      }

      якщо а.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктТипу {
        змінна ад = а.дані[п].значення як адреса<ОбʼєктТипу>;
        змінна бд = б.дані[п].значення як адреса<ОбʼєктТипу>;

        якщо перевірити_тип(реєстр.аргумент як адреса<Компілятор>, ад, бд) == ні {
          вернути ні;
        }
      }
      якщо а.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктСирогоЗначення {
        змінна ад = а.дані[п].значення як адреса<ОбʼєктСирогоЗначення>;
        змінна бд = б.дані[п].значення як адреса<ОбʼєктСирогоЗначення>;

        якщо ад.вид != бд.вид {
          вернути ні;
        }

        якщо ад.дані.розмір != бд.дані.розмір {
          вернути ні;
        }

        змінна пп: позитивне = 0;

        поки пп < ад.дані.розмір {
          якщо ад.дані.дані[пп] != бд.дані.дані[пп] {
            вернути ні;
          }

          пп += 1;
        }
      }

      п += 1;
    }

    вернути так;
  }

  дія клонувати_готові_аргументи_шаблону(компілятор: адреса<Компілятор>, готові_аргументи_шаблону: ГотовіАргументиШаблону): ГотовіАргументиШаблону {
    змінна нові_дані = виділити_памʼять<ГотовийАргументШаблону>(компілятор, готові_аргументи_шаблону.розмір);

    змінна п: позитивне = 0;

    поки п < готові_аргументи_шаблону.розмір {
      нові_дані[п] = готові_аргументи_шаблону.дані[п];

      п += 1;
    }

    готові_аргументи_шаблону.дані = нові_дані;

    вернути готові_аргументи_шаблону;
  }

  дія перед_заміною_реєстру_готових_шаблону(реєстр: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>, ак: ГотовіАргументиШаблону, аз: Обʼєкт, бк: адреса<ГотовіАргументиШаблону>, бз: адреса<Обʼєкт>) {
    змінна компілятор = реєстр.аргумент як адреса<Компілятор>;

    звільнити_памʼять(компілятор, ак.дані);
  }

  дія перед_видаленням_реєстру_готових_шаблону(реєстр: адреса<біб::Реєстр<ГотовіАргументиШаблону, Обʼєкт>>, ключ: ГотовіАргументиШаблону, значення: Обʼєкт) {
    змінна компілятор = реєстр.аргумент як адреса<Компілятор>;

    звільнити_памʼять(компілятор, ключ.дані);
  }

  дія виділити_обʼєкт_шаблону(компілятор: адреса<Компілятор>): адреса<ОбʼєктШаблону> {
    змінна обʼєкт_шаблону = виділити<ОбʼєктШаблону>(компілятор);
    обʼєкт_шаблону.наступний = пусто;
    обʼєкт_шаблону.назва = пусто;
    обʼєкт_шаблону.параметри = Параметри { 0, пусто, 0 };
    обʼєкт_шаблону.сполука = пусто;
    обʼєкт_шаблону.готові = біб::виділити_реєстр<ГотовіАргументиШаблону, Обʼєкт>(
      компілятор.виділяч,
      0,
      компілятор,
      змішати_готові_аргументи_шаблону,
      перевірити_готові_аргументи_шаблону,
      перед_заміною_реєстру_готових_шаблону,
      перед_видаленням_реєстру_готових_шаблону
    );
    якщо компілятор.перший_обʼєкт_шаблону == пусто {
      компілятор.перший_обʼєкт_шаблону = обʼєкт_шаблону;
    }
    якщо компілятор.останній_обʼєкт_шаблону == пусто {
      компілятор.останній_обʼєкт_шаблону = обʼєкт_шаблону;
    } інакше {
      компілятор.останній_обʼєкт_шаблону.наступний = обʼєкт_шаблону;
      компілятор.останній_обʼєкт_шаблону = обʼєкт_шаблону;
    }
    вернути обʼєкт_шаблону;
  }
}

секція КЦ {
  структура НакопичувачШляху {
    значення: Шлях;
  }

  дія зробити_накопичувач_шляху(компілятор: адреса<Компілятор>): НакопичувачШляху {
    вернути НакопичувачШляху {
      значення = Шлях { 0, пусто }
    };
  }

  дія покласти_в_накопичувач_шляху(компілятор: адреса<Компілятор>, накопичувач_шляху: адреса<НакопичувачШляху>, значення: Шлях) {
    накопичувач_шляху.значення.дані = перевиділити_памʼять<п8>(компілятор, накопичувач_шляху.значення.дані, накопичувач_шляху.значення.розмір + значення.розмір);

    змінна п: позитивне = 0;

    поки п < значення.розмір {
      накопичувач_шляху.значення.дані[накопичувач_шляху.значення.розмір + п] = значення.дані[п];

      п += 1;
    }

    накопичувач_шляху.значення.розмір += значення.розмір;
  }

  дія покласти_т8_в_накопичувач_шляху(компілятор: адреса<Компілятор>, накопичувач_шляху: адреса<НакопичувачШляху>, значення: т8) {
    змінна значення_ю8 = ю8 { 0, пусто };
    змінна позиція_помилки: позитивне = 0;
    якщо біб::перекодувати_т8_в_ю8(компілятор.виділяч, значення, ні, значення_ю8::адреса, пусто, позиція_помилки::адреса) == ні {
      КЦ::померти(компілятор, "Не вдалось перекодувати т8 в ю8.");
    }

    накопичувач_шляху.значення.дані = перевиділити_памʼять<п8>(компілятор, накопичувач_шляху.значення.дані, накопичувач_шляху.значення.розмір + значення_ю8.розмір);

    змінна п: позитивне = 0;

    поки п < значення_ю8.розмір {
      накопичувач_шляху.значення.дані[накопичувач_шляху.значення.розмір + п] = значення_ю8.дані[п];

      п += 1;
    }

    накопичувач_шляху.значення.розмір += значення_ю8.розмір;

    звільнити_памʼять(компілятор, значення_ю8.дані);
  }
}

секція КЦ {
  структура НакопичувачТ8 {
    значення: т8;
  }

  дія зробити_накопичувач_т8(компілятор: адреса<Компілятор>): НакопичувачТ8 {
    вернути НакопичувачТ8 {
      значення = т8 { 0, пусто }
    };
  }

  дія покласти_в_накопичувач_т8(компілятор: адреса<Компілятор>, накопичувач_т8: адреса<НакопичувачТ8>, значення: т8) {
    накопичувач_т8.значення.дані = перевиділити_памʼять<п8>(компілятор, накопичувач_т8.значення.дані, накопичувач_т8.значення.розмір + значення.розмір);

    змінна п: позитивне = 0;

    поки п < значення.розмір {
      накопичувач_т8.значення.дані[накопичувач_т8.значення.розмір + п] = значення.дані[п];

      п += 1;
    }

    накопичувач_т8.значення.розмір += значення.розмір;
  }

  дія покласти_спереду_накопичувача_т8(компілятор: адреса<Компілятор>, накопичувач_т8: адреса<НакопичувачТ8>, значення: т8) {
    змінна старі_дані = накопичувач_т8.значення.дані;

    накопичувач_т8.значення.дані = виділити_памʼять<п8>(компілятор, накопичувач_т8.значення.розмір + значення.розмір);

    змінна п: позитивне = 0;
    поки п < накопичувач_т8.значення.розмір {
      накопичувач_т8.значення.дані[п + значення.розмір] = старі_дані[п];
      п += 1;
    }

    звільнити_памʼять(компілятор, старі_дані);

    п = 0;
    поки п < значення.розмір {
      накопичувач_т8.значення.дані[п] = значення.дані[п];
      п += 1;
    }

    накопичувач_т8.значення.розмір += значення.розмір;
  }

  дія покласти_позитивне_в_накопичувач_т8(компілятор: адреса<Компілятор>, накопичувач_т8: адреса<НакопичувачТ8>, значення: позитивне) {
    змінна значення_ю8 = біб::перетворити_позитивне_на_ю8(компілятор.виділяч, значення);
    змінна значення_т8 = т8 { 0, пусто };
    змінна позиція_помилки: позитивне = 0;
    якщо біб::перекодувати_ю8_в_т8(компілятор.виділяч, значення_ю8, так, ні, значення_т8::адреса, пусто, позиція_помилки::адреса) == ні {
      КЦ::померти(компілятор, "Не вдалось перекодувати ю8 в т8.");
    }
    покласти_в_накопичувач_т8(компілятор, накопичувач_т8, значення_т8);
    звільнити_памʼять(компілятор, значення_ю8.дані);
    звільнити_памʼять(компілятор, значення_т8.дані);
  }
}

секція КЦ {
  дія покласти_крок(компілятор: адреса<Компілятор>, кроки: адреса<Кроки>, крок: Крок) {
    якщо кроки.розмір == кроки.вмісткість {
      кроки.вмісткість += 1;
      кроки.дані = перевиділити_памʼять<Крок>(компілятор, кроки.дані, кроки.вмісткість);
    }
    кроки.дані[кроки.розмір] = крок;
    кроки.розмір += 1;
  }

  дія покласти_стрибок(компілятор: адреса<Компілятор>, стрибки: адреса<Стрибки>, стрибок: Стрибок) {
    якщо стрибки.розмір == стрибки.вмісткість {
      стрибки.вмісткість += 1;
      стрибки.дані = перевиділити_памʼять<Стрибок>(компілятор, стрибки.дані, стрибки.вмісткість);
    }
    стрибки.дані[стрибки.розмір] = стрибок;
    стрибки.розмір += 1;
  }

  дія покласти_параметр(компілятор: адреса<Компілятор>, параметри: адреса<Параметри>, параметр: Параметр) {
    якщо параметри.розмір == параметри.вмісткість {
      параметри.вмісткість += 1;
      параметри.дані = перевиділити_памʼять<Параметр>(компілятор, параметри.дані, параметри.вмісткість);
    }
    параметри.дані[параметри.розмір] = параметр;
    параметри.розмір += 1;
  }

  дія клонувати_параметри(компілятор: адреса<Компілятор>, параметри: Параметри): Параметри {
    змінна клон = Параметри { параметри.розмір, виділити_памʼять<Параметр>(компілятор, параметри.розмір), параметри.розмір };

    змінна п: позитивне = 0;
    поки п < параметри.розмір {
      клон.дані[п] = параметри.дані[п];
      
      п += 1;
    }

    вернути клон;
  }

  дія перевірити_назви_з_реєстру<З>(реєстр: адреса<біб::Реєстр<адреса<Назва>, З>>, а: адреса<Назва>, б: адреса<Назва>): логічне {
    якщо а.значення.розмір != б.значення.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.значення.розмір {
      якщо а.значення.дані[п] != б.значення.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_шляхи(а: Шлях, б: Шлях, аргумент: невідома_адреса): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  дія перевірити_чи_тип_повний(компілятор: адреса<Компілятор>, тип: адреса<ОбʼєктТипу>): логічне {
    якщо тип.вид == ВидОбʼєктаТипуСтруктура {
      змінна дані_структури = тип.дані як ДаніОбʼєктаТипуСтруктура;

      вернути дані_структури.параметри.розмір > 0;
    }

    вернути так;
  }

  дія дізнатись_розмір_типу(компілятор: адреса<Компілятор>, тип: адреса<ОбʼєктТипу>): позитивне {
    вернути ПМ::отримати_розмір_типу_для_виділення(компілятор.пм_модуль, тип.пм_тип);
  }

  місцева дія перетворити_позитивне_на_т8(компілятор: адреса<Компілятор>, значення: позитивне, вихід: адреса<т8>): логічне;

  дія виділити_копію_т8(компілятор: адреса<Компілятор>, значення: т8): т8 {
    якщо значення.розмір == 0 {
      вернути т8 { 0, пусто };
    }

    змінна дані_копії = виділити_памʼять<п8>(компілятор, значення.розмір);

    змінна п: позитивне = 0;

    поки п < значення.розмір {
      дані_копії[п] = значення.дані[п];

      п += 1;
    }

    вернути т8 { значення.розмір, дані_копії };
  }

  дія отримати_повну_назву_типу(компілятор: адреса<Компілятор>, обʼєкт_типу: адреса<ОбʼєктТипу>): т8 {
    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуПростий {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуПростий;

      вернути виділити_копію_т8(компілятор, дані.назва.значення);
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуСтруктура {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуСтруктура;

      якщо дані.готові_аргументи_шаблону.розмір > 0 {
        змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, дані.назва.значення);
        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "<");

        змінна п: позитивне = 0;

        поки п < дані.готові_аргументи_шаблону.розмір {
          якщо дані.готові_аргументи_шаблону.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктТипу {
            змінна повна_назва_аргумента_шаблону = отримати_повну_назву_типу(компілятор, дані.готові_аргументи_шаблону.дані[п].значення як адреса<ОбʼєктТипу>);

            покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_аргумента_шаблону);

            звільнити_памʼять(компілятор, повна_назва_аргумента_шаблону.дані);
          }

          якщо дані.готові_аргументи_шаблону.дані[п].вид == ВидАргументаГотовихШаблонуОбʼєктСирогоЗначення {

          }

          якщо п != дані.готові_аргументи_шаблону.розмір - 1 {
            покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ", ");
          }

          п += 1;
        }

        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ">");

        вернути накопичувач_т8.значення;
      }

      вернути виділити_копію_т8(компілятор, дані.назва.значення);
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуДія {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуДія;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "(");

      змінна п: позитивне = 0;

      поки п < дані.параметри.розмір {
        змінна повна_назва_типу_параметра = отримати_повну_назву_типу(компілятор, дані.параметри.дані[п].тип);
        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_параметра);
        звільнити_памʼять(компілятор, повна_назва_типу_параметра.дані);

        якщо п != дані.параметри.розмір - 1 {
          покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ", ");
        }

        п += 1;
      }

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ") -> ");

      змінна повна_назва_типу_результату = отримати_повну_назву_типу(компілятор, дані.тип_результату);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_результату);
      звільнити_памʼять(компілятор, повна_назва_типу_результату.дані);

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуАдреса {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуАдреса;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "адреса<");

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ">");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуПамʼять {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуПамʼять;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "памʼять<");

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, ">");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуМасив {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуМасив;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.тип_даних);
      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
      звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

      покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, "[]");

      вернути накопичувач_т8.значення;
    }

    якщо обʼєкт_типу.вид == ВидОбʼєктаТипуВаріація {
      змінна дані = обʼєкт_типу.дані як ДаніОбʼєктаТипуВаріація;

      змінна накопичувач_т8 = зробити_накопичувач_т8(компілятор);

      змінна п: позитивне = 0;

      поки п < дані.кількість_типів {
        змінна повна_назва_типу_даних = отримати_повну_назву_типу(компілятор, дані.типи[п]);
        покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, повна_назва_типу_даних);
        звільнити_памʼять(компілятор, повна_назва_типу_даних.дані);

        якщо п != дані.кількість_типів - 1 {
          покласти_в_накопичувач_т8(компілятор, накопичувач_т8::адреса, " | ");
        }

        п += 1;
      }

      вернути накопичувач_т8.значення;
    }

    вернути виділити_копію_т8(компілятор, т8 { 0, пусто });
  }
}