структура ЛМодуль;
структура ЛБлок;

секція LLVM {
  синонім LINKAGE_EXTERNAL = 0;
  синонім LINKAGE_DSO_LOCAL = 1;
  синонім LINKAGE_INTERNAL = 2;

  структура Type;
  структура FunctionType;
  структура Value;
  структура Function;
}

зовнішня дія xlm_create(назва: памʼять<п8>): комірка<ЛМодуль>;
зовнішня дія dumpLL(Л: комірка<ЛМодуль>): памʼять<п8>;

зовнішня дія tsil_llvm_create_struct(Л: комірка<ЛМодуль>, назва: памʼять<п8>): комірка<Type>;
зовнішня дія tsil_llvm_set_struct_fields(Л: комірка<ЛМодуль>, с: комірка<Type>, розмір_полів: позитивне, поля: памʼять<комірка<Type>>);

зовнішня дія tsil_llvm_declare_function(Л: комірка<ЛМодуль>, лінкування: позитивне, назва: памʼять<п8>, тип_повернення: комірка<Type>, розмір_параметрів: позитивне, параметри: памʼять<комірка<Type>>, варарг: позитивне): комірка<LLVM::Function>;
зовнішня дія tsil_llvm_create_function_block(Л: комірка<ЛМодуль>, функція: комірка<LLVM::Function>, назва: памʼять<п8>): комірка<ЛБлок>;

зовнішня дія tsil_llvm_inst_alloca(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, назва: памʼять<п8>, тип: комірка<Type>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_store(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, значення: комірка<LLVM::Value>, алока: комірка<LLVM::Value>);
зовнішня дія tsil_llvm_inst_load(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_br(Л: комірка<ЛМодуль>, звідки: комірка<ЛБлок>, куда: комірка<ЛБлок>);
зовнішня дія tsil_llvm_inst_ret(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, значення: комірка<LLVM::Value>);
зовнішня дія tsil_llvm_inst_getelementptr(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<LLVM::Value>, кількість_позицій: позитивне, позиції: памʼять<комірка<LLVM::Value>>): комірка<LLVM::Value>;

зовнішня дія tsil_llvm_get_null(Л: комірка<ЛМодуль>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_get_void_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_pointer_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_int1_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_int8_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_int16_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_int32_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_int64_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_float32_type(Л: комірка<ЛМодуль>): комірка<Type>;
зовнішня дія tsil_llvm_get_float64_type(Л: комірка<ЛМодуль>): комірка<Type>;

зовнішня дія tsil_llvm_create_int32(Л: комірка<ЛМодуль>, значення: ц32): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_create_int64(Л: комірка<ЛМодуль>, значення: ц64): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_create_float(Л: комірка<ЛМодуль>, значення: д32): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_create_double(Л: комірка<ЛМодуль>, значення: д64): комірка<LLVM::Value>;

зовнішня дія tsil_llvm_get_function_type(Л: комірка<ЛМодуль>, функція: комірка<LLVM::Function>): комірка<LLVM::FunctionType>;

зовнішня дія tsil_llvm_inst_call_value(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<LLVM::Value>, розмір_аргументів: позитивне, аргументи: памʼять<комірка<LLVM::Value>>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_get_function_arg_value(Л: комірка<ЛМодуль>, функція: комірка<LLVM::Function>, позиція: позитивне): комірка<LLVM::Value>;

зовнішня дія tsil_llvm_inst_add(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_fadd(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_sub(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_fsub(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_mul(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_fmul(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_udiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_sdiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_fdiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_urem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_srem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;
зовнішня дія tsil_llvm_inst_frem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<LLVM::Value>, право: комірка<LLVM::Value>): комірка<LLVM::Value>;

секція LLVM {
  дія створити(назва: памʼять<п8>): комірка<ЛМодуль> {
    вернути xlm_create(назва);
  }

  дія відмалювати(Л: комірка<ЛМодуль>): памʼять<п8> {
    вернути dumpLL(Л);
  }

  дія struct(Л: комірка<ЛМодуль>, назва: памʼять<п8>): комірка<Type> {
    вернути tsil_llvm_create_struct(Л, назва);
  }

  дія struct_set_fields(Л: комірка<ЛМодуль>, с: комірка<Type>, розмір_полів: позитивне, поля: памʼять<комірка<Type>>) {
    tsil_llvm_set_struct_fields(Л, с, розмір_полів, поля);
  }

  дія function(Л: комірка<ЛМодуль>, лінкування: позитивне, назва: памʼять<п8>, тип_повернення: комірка<Type>, розмір_параметрів: позитивне, параметри: памʼять<комірка<Type>>, варарг: позитивне): комірка<Function> {
    вернути tsil_llvm_declare_function(Л, лінкування, назва, тип_повернення, розмір_параметрів, параметри, варарг);
  }

  дія створити_блок(Л: комірка<ЛМодуль>, функція: комірка<Function>, назва: памʼять<п8>): комірка<ЛБлок> {
    вернути tsil_llvm_create_function_block(Л, функція, назва);
  }

  дія block(Л: комірка<ЛМодуль>, функція: комірка<Function>, назва: памʼять<п8>): комірка<ЛБлок> {
    вернути tsil_llvm_create_function_block(Л, функція, назва);
  }

  дія alloca(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, назва: памʼять<п8>, тип: комірка<Type>): комірка<Value> {
    вернути tsil_llvm_inst_alloca(Л, блок, назва, тип);
  }

  дія store(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, значення: комірка<Value>, алока: комірка<Value>) {
    tsil_llvm_inst_store(Л, блок, значення, алока);
  }

  дія load(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_load(Л, блок, тип, значення);
  }

  дія br(Л: комірка<ЛМодуль>, звідки: комірка<ЛБлок>, куда: комірка<ЛБлок>) {
    tsil_llvm_inst_br(Л, звідки, куда);
  }

  дія ret(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, значення: комірка<Value>) {
    tsil_llvm_inst_ret(Л, блок, значення);
  }

  дія getelementptr(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<Value>, кількість_позицій: позитивне, позиції: памʼять<комірка<Value>>): комірка<Value> {
    вернути tsil_llvm_inst_getelementptr(Л, блок, тип, значення, кількість_позицій, позиції);
  }

  дія call(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, тип: комірка<Type>, значення: комірка<Value>, розмір_аргументів: позитивне, аргументи: памʼять<комірка<Value>>): комірка<Value> {
    вернути tsil_llvm_inst_call_value(Л, блок, тип, значення, розмір_аргументів, аргументи);
  }

  дія null(Л: комірка<ЛМодуль>): комірка<Value> {
    вернути tsil_llvm_get_null(Л);
  }

  дія void(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_void_type(Л);
  }

  дія pointer(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_pointer_type(Л);
  }

  дія і1(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_int1_type(Л);
  }

  дія і8(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_int8_type(Л);
  }

  дія і16(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_int16_type(Л);
  }

  дія і32(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_int32_type(Л);
  }

  дія і64(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_int64_type(Л);
  }

  дія f32(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_float32_type(Л);
  }

  дія f64(Л: комірка<ЛМодуль>): комірка<Type> {
    вернути tsil_llvm_get_float64_type(Л);
  }

  дія const_int32(Л: комірка<ЛМодуль>, значення: ц32): комірка<Value> {
    вернути tsil_llvm_create_int32(Л, значення);
  }

  дія const_int64(Л: комірка<ЛМодуль>, значення: ц64): комірка<Value> {
    вернути tsil_llvm_create_int64(Л, значення);
  }

  дія const_float(Л: комірка<ЛМодуль>, значення: ц32): комірка<Value> {
    вернути tsil_llvm_create_float(Л, значення);
  }

  дія const_double(Л: комірка<ЛМодуль>, значення: ц64): комірка<Value> {
    вернути tsil_llvm_create_double(Л, значення);
  }

  дія type_of_function(Л: комірка<ЛМодуль>, функція: комірка<Function>): комірка<FunctionType> {
    вернути tsil_llvm_get_function_type(Л, функція);
  }

  дія function_arg(Л: комірка<ЛМодуль>, функція: комірка<Function>, позиція: позитивне): комірка<Value> {
    вернути tsil_llvm_get_function_arg_value(Л, функція, позиція);
  }

  дія add(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_add(Л, блок, ліво, право);
  }

  дія fadd(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_fadd(Л, блок, ліво, право);
  }

  дія sub(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_sub(Л, блок, ліво, право);
  }

  дія fsub(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_fsub(Л, блок, ліво, право);
  }

  дія mul(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_mul(Л, блок, ліво, право);
  }

  дія fmul(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_fmul(Л, блок, ліво, право);
  }

  дія udiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_udiv(Л, блок, ліво, право);
  }

  дія sdiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_sdiv(Л, блок, ліво, право);
  }

  дія fdiv(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_fdiv(Л, блок, ліво, право);
  }

  дія urem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_urem(Л, блок, ліво, право);
  }

  дія srem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_srem(Л, блок, ліво, право);
  }

  дія frem(Л: комірка<ЛМодуль>, блок: комірка<ЛБлок>, ліво: комірка<Value>, право: комірка<Value>): комірка<Value> {
    вернути tsil_llvm_inst_frem(Л, блок, ліво, право);
  }
}