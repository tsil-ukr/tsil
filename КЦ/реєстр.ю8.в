взяти визначення ./біб;

структура ЕлементРеєстру<К, З>;
структура Реєстр<К, З>;

структура ЕлементРеєстру<К, З> {
  ключ: К;
  значення: З;
}

структура Реєстр<К, З> {
  розмір: позитивне;
  елементи: памʼять<ЕлементРеєстру<К, З>>;
  дія_перевірки_ключа: (а: К, б: К) -> логічне;
}

дія зробити_реєстр<К, З>(дія_перевірки_ключа: (а: К, б: К) -> логічне): Реєстр<К, З> {
  ціль реєстр: Реєстр<К, З>;
  реєстр.розмір = 0;
  реєстр.елементи = пусто;
  реєстр.дія_перевірки_ключа = дія_перевірки_ключа;
  вернути реєстр;
}

дія виділити_реєстр<К, З>(дія_перевірки_ключа: (а: К, б: К) -> логічне): адреса<Реєстр<К, З>> {
  ціль реєстр = виділити<Реєстр<К, З>>();
  реєстр.розмір = 0;
  реєстр.елементи = пусто;
  реєстр.дія_перевірки_ключа = дія_перевірки_ключа;
  вернути реєстр;
}

дія отримати_з_реєстру<К, З>(реєстр: адреса<Реєстр<К, З>>, ключ: К): адреса<ЕлементРеєстру<К, З>> {
  змінна позиція: позитивне = 0;
  поки позиція < реєстр.розмір {
    якщо реєстр.дія_перевірки_ключа(реєстр.елементи[позиція].ключ, ключ) {
      вернути реєстр.елементи[позиція]::адреса;
    }
    позиція = позиція + 1;
  }
  вернути пусто;
}

дія змінити_в_реєстрі<К, З>(реєстр: адреса<Реєстр<К, З>>, ключ: К, значення: З) {
  змінна елемент_реєстру = отримати_з_реєстру<К, З>(реєстр, ключ);
  якщо елемент_реєстру == пусто {
    реєстр.елементи = перевиділити<ЕлементРеєстру<К, З>>(реєстр.елементи, реєстр.розмір + 1);
    реєстр.елементи[реєстр.розмір] = ЕлементРеєстру<К, З> { ключ = ключ, значення = значення };
    реєстр.розмір = реєстр.розмір + 1;
  } інакше {
    елемент_реєстру.значення = значення;
  }
}

дія звільнити_значення_реєстру<К, З>(реєстр: Реєстр<К, З>) {
  звільнити(реєстр.елементи);
}

дія звільнити_реєстр<К, З>(реєстр: адреса<Реєстр<К, З>>) {
  звільнити(реєстр.елементи);
  звільнити(реєстр);
}

дія розширити_реєстр<К, З>(реєстр: адреса<Реєстр<К, З>>, новий_розмір: позитивне) {
  якщо новий_розмір > реєстр.розмір {
    реєстр.елементи = перевиділити<ЕлементРеєстру<К, З>>(реєстр.елементи, новий_розмір);
    реєстр.розмір = новий_розмір;
  }
}

дія видалити_з_реєстру<К, З>(реєстр: адреса<Реєстр<К, З>>, ключ: К): логічне {
  змінна п: позитивне = 0;
  поки п < реєстр.розмір {
    ціль елемент = реєстр.елементи[п];
    якщо реєстр.дія_перевірки_ключа(елемент.ключ, ключ) {
      поки п < реєстр.розмір - 1 {
        реєстр.елементи[п] = реєстр.елементи[п + 1];
        п += 1;
      }
      реєстр.розмір -= 1;
      вернути так;
    }
    п += 1;
  }
  вернути ні;
}