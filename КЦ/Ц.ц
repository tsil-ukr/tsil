взяти визначення Ц;
взяти визначення К;

зовнішня дія отримати_копію_cwd(): памʼять<п8>;

структура ПомилкаКомпіляціїЦілі {
  місцезнаходження: адреса<Місцезнаходження>;
  повідомлення: памʼять<п8>;
  розмір_повідомлення: size_t;
  довжина_шляху: позитивне;
  шлях: памʼять<адреса<Місцезнаходження>>;
}

секція ц {
  дія визначити_основне(К: адреса<Компілятор>): адреса<ПомилкаКомпіляції> {
    ціль накопичувачЮ8 = зробити_накопичувач_ю8();
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура текст;\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю8;\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю16;\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю32;\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура текст { дані: памʼять<п8>; розмір: позитивне; }\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю8 { дані: памʼять<п8>; розмір: позитивне; }\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю16 { дані: памʼять<п16>; розмір: позитивне; }\n");
    покласти_ю8_в_накопичувач_ю8(накопичувачЮ8::адреса, ю8"структура ю32 { дані: памʼять<п32>; розмір: позитивне; }\n");
    ціль значенняЮ8 = виділити_ю8_з_накопичувача_ю8(накопичувачЮ8::адреса);
    звільнити_значення_накопичувача_ю8(накопичувачЮ8);
    ціль текст_коду = виділити<ТекстКоду>();
    текст_коду.шлях = ю8сі"біб";
    текст_коду.розмір_шляху = (ю8"біб").розмір;
    текст_коду.значення = значенняЮ8;
    текст_коду.розмір_значення = strlen(значенняЮ8);
    ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
    якщо результат_розбору_цілі.успіх == 0 {
      ціль помилка_компіляції = виділити_помилку_компіляції(результат_розбору_цілі.помилка.місцезнаходження, ю8 { результат_розбору_цілі.помилка.повідомлення, результат_розбору_цілі.помилка.розмір_повідомлення });
      вернути помилка_компіляції;
    }
    ціль результат_компіляції_секції = скомпілювати_тіло_секції(
      К,
      ц::ІнформаціяСередовища {
        середовище = К.глобальне_середовище,
        обʼєкт_дії = пусто,
        llvm_block = пусто,
        інформація_виконання_шаблону = пусто
      },
      результат_розбору_цілі.тіло
    );
    ціль обʼєкт_тексту: Обʼєкт;
    якщо отримати_зі_середовища(К.глобальне_середовище, назва_з_ю8(К, ю8"текст"), обʼєкт_тексту::адреса) == ні {
      вернути пусто; // потім: помилка
    }
    К.тип_текст = обʼєкт_тексту.дані як адреса<ОбʼєктТипу>;
    ціль обʼєкт_ю8: Обʼєкт;
    якщо отримати_зі_середовища(К.глобальне_середовище, назва_з_ю8(К, ю8"ю8"), обʼєкт_ю8::адреса) == ні {
      вернути пусто; // потім: помилка
    }
    К.тип_ю8 = обʼєкт_ю8.дані як адреса<ОбʼєктТипу>;
    ціль обʼєкт_ю16: Обʼєкт;
    якщо отримати_зі_середовища(К.глобальне_середовище, назва_з_ю8(К, ю8"ю16"), обʼєкт_ю16::адреса) == ні {
      вернути пусто; // потім: помилка
    }
    К.тип_ю16 = обʼєкт_ю16.дані як адреса<ОбʼєктТипу>;
    ціль обʼєкт_ю32: Обʼєкт;
    якщо отримати_зі_середовища(К.глобальне_середовище, назва_з_ю8(К, ю8"ю32"), обʼєкт_ю32::адреса) == ні {
      вернути пусто; // потім: помилка
    }
    К.тип_ю32 = обʼєкт_ю32.дані як адреса<ОбʼєктТипу>;
    вернути результат_компіляції_секції.помилка;
  }

  місцева дія створити_компілятор(L: адреса<LLVM::TL>): адреса<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.назви = зробити_накопичувач<адреса<Назва>>();
    К.БН = зробити_базу_назв(К);
    К.L = L;
    К.глобальне_середовище = глобальне_середовище;
    К.тип_ніщо = виділити_нативний_тип(К, К.БН.ніщо, LLVM::void(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.ніщо, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ніщо });
    К.тип_логічне = виділити_нативний_тип(К, К.БН.логічне, LLVM::i1(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.логічне, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_логічне });
    К.тип_ц8 = виділити_нативний_тип(К, К.БН.ц8, LLVM::i8(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.ц8, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц8 });
    К.тип_ц16 = виділити_нативний_тип(К, К.БН.ц16, LLVM::i16(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.ц16, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц16 });
    К.тип_ц32 = виділити_нативний_тип(К, К.БН.ц32, LLVM::i32(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.ц32, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц32 });
    К.тип_ц64 = виділити_нативний_тип(К, К.БН.ц64, LLVM::i64(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.ц64, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц64 });
    К.тип_ціле = К.тип_ц64; // потім: визначити бітність процесора і вибрати відповідний тип
    змінити_в_середовищі(глобальне_середовище, К.БН.ціле, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ціле });
    К.тип_п8 = виділити_нативний_тип(К, К.БН.п8, LLVM::i8(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.п8, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п8 });
    К.тип_п16 = виділити_нативний_тип(К, К.БН.п16, LLVM::i16(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.п16, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п16 });
    К.тип_п32 = виділити_нативний_тип(К, К.БН.п32, LLVM::i32(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.п32, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п32 });
    К.тип_п64 = виділити_нативний_тип(К, К.БН.п64, LLVM::i64(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.п64, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п64 });
    К.тип_позитивне = К.тип_п64; // потім: визначити бітність процесора і вибрати відповідний тип
    змінити_в_середовищі(глобальне_середовище, К.БН.позитивне, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_позитивне });
    К.тип_д32 = виділити_нативний_тип(К, К.БН.д32, LLVM::f32(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.д32, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_д32 });
    К.тип_д64 = виділити_нативний_тип(К, К.БН.д64, LLVM::f64(L));
    змінити_в_середовищі(глобальне_середовище, К.БН.д64, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_д64 });
    К.тип_десяткове = К.тип_д64;
    змінити_в_середовищі(глобальне_середовище, К.БН.десяткове, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_десяткове });
    змінити_в_середовищі(глобальне_середовище, К.БН.дійсне, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_десяткове }); // потім: видалити

    К.тип_адреса = виділити_тип_адреси(К, К.тип_ніщо);
    змінити_в_середовищі(глобальне_середовище, К.БН.адреса, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_адреса }); // потім: заборонити використовувати тип "адреса" без параметрів шаблону
    змінити_в_середовищі(глобальне_середовище, К.БН.невідома_адреса, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_адреса });

    К.тип_памʼять = виділити_тип_памʼяті(К, К.тип_ніщо);
    змінити_в_середовищі(глобальне_середовище, К.БН.памʼять, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_памʼять }); // потім: заборонити використовувати тип "памʼять" без параметрів шаблону
    змінити_в_середовищі(глобальне_середовище, К.БН.невідома_памʼять, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_памʼять });

    К.обʼєкт_значення_так = ОбʼєктЗначення { ... };
    К.обʼєкт_значення_так.тип = К.тип_логічне;
    К.обʼєкт_значення_так.llvm_value = LLVM::const_uint1(L, 1);
    змінити_в_середовищі(глобальне_середовище, К.БН.так, Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_так });
    К.обʼєкт_значення_ні = ОбʼєктЗначення { ... };
    К.обʼєкт_значення_ні.тип = К.тип_логічне;
    К.обʼєкт_значення_ні.llvm_value = LLVM::const_uint1(L, 0);
    змінити_в_середовищі(глобальне_середовище, К.БН.ні, Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_ні });
    К.обʼєкт_значення_пусто = ОбʼєктЗначення { ... };
    К.обʼєкт_значення_пусто.тип = К.тип_адреса;
    К.обʼєкт_значення_пусто.llvm_value = LLVM::null(К.L);
    змінити_в_середовищі(глобальне_середовище, К.БН.пусто, Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_пусто });

    змінити_в_середовищі(глобальне_середовище, К.БН.char, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц8 });
    змінити_в_середовищі(глобальне_середовище, К.БН.signed_char, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц8 });
    змінити_в_середовищі(глобальне_середовище, К.БН.unsigned_char, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п8 });
    змінити_в_середовищі(глобальне_середовище, К.БН.short, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц16 });
    змінити_в_середовищі(глобальне_середовище, К.БН.signed_short, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц16 });
    змінити_в_середовищі(глобальне_середовище, К.БН.unsigned_short, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п16 });
    змінити_в_середовищі(глобальне_середовище, К.БН.int, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц32 });
    змінити_в_середовищі(глобальне_середовище, К.БН.signed_int, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц32 });
    змінити_в_середовищі(глобальне_середовище, К.БН.unsigned_int, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п32 });
    змінити_в_середовищі(глобальне_середовище, К.БН.long, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц64 });
    змінити_в_середовищі(глобальне_середовище, К.БН.signed_long, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_ц64 });
    змінити_в_середовищі(глобальне_середовище, К.БН.unsigned_long, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п64 });
    змінити_в_середовищі(глобальне_середовище, К.БН.float, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_д32 });
    змінити_в_середовищі(глобальне_середовище, К.БН.double, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_д64 });
    змінити_в_середовищі(глобальне_середовище, К.БН.size_t, Обʼєкт { ВидОбʼєктаТип, дані = К.тип_п64 });

    К.cwd = ю8сі_в_ю8(отримати_копію_cwd());

    К.взяті_файли = зробити_накопичувач<ю8>();
    К.історія_взяття = зробити_накопичувач<адреса<ТекстКоду>>();

    визначити_основне(К);

    вернути К;
  }
}

зовнішня дія скомпілювати_ціль_в_ll(Л: адреса<LLVM::TL>, текст_коду: адреса<ТекстКоду>): адреса<ПомилкаКомпіляціїЦілі> {
  ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
  якщо результат_розбору_цілі.успіх == 0 {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_розбору_цілі.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_розбору_цілі.помилка.повідомлення;
    помилка_компіляції_цілі.розмір_повідомлення = strlen(результат_розбору_цілі.помилка.повідомлення);
    помилка_компіляції_цілі.довжина_шляху = 0;
    помилка_компіляції_цілі.шлях = пусто;
    вернути помилка_компіляції_цілі;
  }
  ціль К = ц::створити_компілятор(Л);
  ціль початкове_середовище = ц::створити_середовище(К.глобальне_середовище);
  покласти_в_накопичувач<адреса<ТекстКоду>>(К.історія_взяття::адреса, текст_коду);
  ціль результат_компіляції_тіла_секції = ц::скомпілювати_тіло_секції(
    К,
    ц::ІнформаціяСередовища {
      середовище = початкове_середовище,
      обʼєкт_дії = пусто,
      llvm_block = пусто,
      інформація_виконання_шаблону = пусто
    },
    результат_розбору_цілі.тіло
  );
  К.історія_взяття.розмір = К.історія_взяття.розмір - 1;
  якщо результат_компіляції_тіла_секції.помилка != пусто {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_компіляції_тіла_секції.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення.дані;
    помилка_компіляції_цілі.розмір_повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення.розмір;
    помилка_компіляції_цілі.довжина_шляху = 0;
    помилка_компіляції_цілі.шлях = пусто;
//    помилка_компіляції_цілі.довжина_шляху = К.шлях.розмір;
//    помилка_компіляції_цілі.шлях = К.шлях.дані;
    вернути помилка_компіляції_цілі;
  }
  вернути пусто;
}