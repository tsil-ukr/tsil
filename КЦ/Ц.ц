взяти визначення Ц;
взяти визначення К;

структура ПомилкаКомпіляціїЦілі {
  місцезнаходження: комірка<Місцезнаходження>;
  повідомлення: памʼять<п8>;
  довжина_шляху: позитивне;
  шлях: памʼять<комірка<Місцезнаходження>>;
}

секція цк {
  дія дія_спец_обʼєкта_комірка_виконати_шаблон(я: комірка<СпецОбʼєкт>, К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргументи: комірка<список<Значення>>): РезультатЗначення {
    якщо аргументи.довжина != 1 {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Очікується один аргумент");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль значення_аргументу = аргументи.дані[0];
    якщо значення_аргументу.вид != ВидЗначенняОК {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Аргумент не є обʼєктом");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль ок = значення_аргументу.к;
    якщо ок.вид != ВидОКТип {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Тип не є обʼєктом");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль тип = ок.дані як комірка<Тип>;

    ціль дані_типу_комірка = виділити<ДаніТипуКомірка>();
    дані_типу_комірка.л_тип = LLVM::pointer(К.Л);
    дані_типу_комірка.тип_елемента = вміст(тип);

    ціль тип_комірки = виділити<Тип>();
    тип_комірки.вид = ВидТипуКомірка;
    тип_комірки.дані = дані_типу_комірка;

    ціль ок_типу = ОбʼєктКомпіляції { ВидОКТип, тип_комірки };

    вернути РезультатЗначення { Значення { ВидЗначенняОК, к = ок_типу }, пусто };
  }

  місцева дія створити_компілятор(Л: комірка<LLVM::TL>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.глобальне_середовище = глобальне_середовище;
    К.Л = Л;

    К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", LLVM::void(К.Л));
    К.тип_невідома_комірка = визначити_нативний_тип(К, ю8"невідома_комірка", LLVM::pointer(К.Л));
    К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", LLVM::і8(К.Л));
    К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", LLVM::і16(К.Л));
    К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", LLVM::і32(К.Л));
    К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", LLVM::і64(К.Л));
    К.тип_п8 = визначити_нативний_тип(К, ю8"п8", LLVM::і8(К.Л));
    К.тип_п16 = визначити_нативний_тип(К, ю8"п16", LLVM::і16(К.Л));
    К.тип_п32 = визначити_нативний_тип(К, ю8"п32", LLVM::і32(К.Л));
    К.тип_п64 = визначити_нативний_тип(К, ю8"п64", LLVM::і64(К.Л));
    К.тип_д32 = визначити_нативний_тип(К, ю8"д32", LLVM::f32(К.Л));
    К.тип_д64 = визначити_нативний_тип(К, ю8"д64", LLVM::f64(К.Л));

    ціль спец_обʼєкт_комірка = створити_пустий_спец_обʼєкт();
    спец_обʼєкт_комірка.назва = ю8"комірка";
    спец_обʼєкт_комірка.виконати_шаблон = дія_спец_обʼєкта_комірка_виконати_шаблон;
    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКСпецОбʼєкт, спец_обʼєкт_комірка };
    змінити_в_середовищі(глобальне_середовище, спец_обʼєкт_комірка.назва, обʼєкт_компіляції);

    К.шлях = виділити_список<комірка<Місцезнаходження>>();

    вернути К;
  }

  місцева дія додати_до_шляху_компілятора(К: комірка<Компілятор>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_до_списку<комірка<Місцезнаходження>>(К.шлях, місцезнаходження);
  }

  місцева дія забрати_з_шляху_компілятора(К: комірка<Компілятор>) {
    К.шлях.довжина = К.шлях.довжина - 1;
  }
}

зовнішня дія скомпілювати_ціль_в_ll(Л: комірка<LLVM::TL>, текст_коду: комірка<ТекстКоду>): комірка<ПомилкаКомпіляціїЦілі> {
  ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
  якщо результат_розбору_цілі.успіх == ні {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_розбору_цілі.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_розбору_цілі.помилка.повідомлення;
    вернути помилка_компіляції_цілі;
  }
  ціль К = цк::створити_компілятор(Л);
  ціль початкове_середовище = цк::створити_середовище(К.глобальне_середовище);
  ціль результат_компіляції_тіла_секції = цк::скомпілювати_тіло_секції(К, початкове_середовище, результат_розбору_цілі.тіло);
  якщо результат_компіляції_тіла_секції.помилка != пусто {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_компіляції_тіла_секції.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення;
    помилка_компіляції_цілі.довжина_шляху = К.шлях.довжина;
    помилка_компіляції_цілі.шлях = К.шлях.дані;
    вернути помилка_компіляції_цілі;
  }
  вернути пусто;
}