взяти визначення Ц;
взяти визначення К;

структура ПомилкаКомпіляціїЦілі {
  місцезнаходження: комірка<Місцезнаходження>;
  повідомлення: памʼять<п8>;
  довжина_шляху: позитивне;
  шлях: памʼять<комірка<Місцезнаходження>>;
}

секція цк {
  дія дія_спец_обʼєкта_комірка_виконати_шаблон(я: комірка<СпецОбʼєкт>, К: комірка<Компілятор>, блок: комірка<Блок>, інформація_виконання_шаблону: комірка<ІнформаціяВиконанняШаблону>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргументи: комірка<список<Значення>>): РезультатЗначення {
    якщо аргументи.довжина != 1 {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Очікується один аргумент");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль значення_аргументу = аргументи.дані[0];
    якщо значення_аргументу.вид != ВидЗначенняОК {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Аргумент не є обʼєктом");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль ок = значення_аргументу.к;
    якщо ок.вид != ВидОКТип {
      ціль помилка = цк::створити_помилку_компіляції(місцезнаходження, ю8"Тип не є обʼєктом");
      вернути РезультатЗначення { Значення {}, помилка };
    }

    ціль тип = ок.дані як комірка<Тип>;

    ціль дані_типу_комірка = виділити<ДаніТипуКомірка>();
    дані_типу_комірка.llvm_type = LLVM::pointer(К.Л);
    дані_типу_комірка.тип_елемента = вміст(тип);

    ціль тип_комірки = виділити<Тип>();
    тип_комірки.вид = ВидТипуКомірка;
    тип_комірки.дані = дані_типу_комірка;

    ціль ок_типу = ОбʼєктКомпіляції { ВидОКТип, тип_комірки };

    вернути РезультатЗначення { Значення { ВидЗначенняОК, к = ок_типу }, пусто };
  }

  місцева дія створити_компілятор(Л: комірка<LLVM::TL>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.глобальне_середовище = глобальне_середовище;
    К.Л = Л;

    К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", LLVM::void(К.Л));
    К.тип_невідома_комірка = визначити_нативний_тип(К, ю8"невідома_комірка", LLVM::pointer(К.Л));
    К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", LLVM::і8(К.Л));
    К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", LLVM::і16(К.Л));
    К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", LLVM::і32(К.Л));
    К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", LLVM::і64(К.Л));
    К.тип_п8 = визначити_нативний_тип(К, ю8"п8", LLVM::і8(К.Л));
    К.тип_п16 = визначити_нативний_тип(К, ю8"п16", LLVM::і16(К.Л));
    К.тип_п32 = визначити_нативний_тип(К, ю8"п32", LLVM::і32(К.Л));
    К.тип_п64 = визначити_нативний_тип(К, ю8"п64", LLVM::і64(К.Л));
    К.тип_д32 = визначити_нативний_тип(К, ю8"д32", LLVM::f32(К.Л));
    К.тип_д64 = визначити_нативний_тип(К, ю8"д64", LLVM::f64(К.Л));

    ціль спец_обʼєкт_комірка = створити_пустий_спец_обʼєкт();
    спец_обʼєкт_комірка.назва = ю8"комірка";
    спец_обʼєкт_комірка.виконати_шаблон = дія_спец_обʼєкта_комірка_виконати_шаблон;
    ціль обʼєкт_компіляції = ОбʼєктКомпіляції { ВидОКСпецОбʼєкт, спец_обʼєкт_комірка };
    змінити_в_середовищі(глобальне_середовище, спец_обʼєкт_комірка.назва, обʼєкт_компіляції);

    К.шлях = виділити_список<комірка<Місцезнаходження>>();

    вернути К;
  }

  місцева дія додати_до_шляху_компілятора(К: комірка<Компілятор>, місцезнаходження: комірка<Місцезнаходження>) {
    додати_до_списку<комірка<Місцезнаходження>>(К.шлях, місцезнаходження);
  }

  місцева дія забрати_з_шляху_компілятора(К: комірка<Компілятор>) {
    К.шлях.довжина = К.шлях.довжина - 1;
  }
}

секція ц {
  дія обʼєкт_типу_додати(обʼєкт_значення: комірка<ОбʼєктТипу>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_дії_додати(обʼєкт_дії: комірка<ОбʼєктДії>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  дія обʼєкт_цілі_додати(обʼєкт_цілі: комірка<ОбʼєктЦілі>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    ціль обʼєкт_значення_для_цілі = виділити<ОбʼєктЗначення>();
    обʼєкт_значення_для_цілі.тип = обʼєкт_цілі.тип;
    обʼєкт_значення_для_цілі.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі.тип.llvm_type, обʼєкт_цілі.llvm_value);
    вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_цілі }, К, блок, середовище, місцезнаходження, аргумент);
  }

  дія обʼєкт_значення_додати(обʼєкт_значення: комірка<ОбʼєктЗначення>, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо обʼєкт_значення.тип == К.тип_ц8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_ц64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_ц64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_ц64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п8 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п8 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п8;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п16 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п16 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п16;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_п64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_п64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_п64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::add(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д32 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д32 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д32;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fadd(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    } інакше якщо обʼєкт_значення.тип == К.тип_д64 {
      якщо аргумент.вид == ВидОбʼєктаЗначення {
        ціль обʼєкт_значення_аргумента = аргумент.дані як комірка<ОбʼєктЗначення>;
        якщо обʼєкт_значення_аргумента.тип == К.тип_д64 {
          ціль обʼєкт_значення_для_результату = виділити<ОбʼєктЗначення>();
          обʼєкт_значення_для_результату.тип = К.тип_д64;
          обʼєкт_значення_для_результату.llvm_value = LLVM::fadd(К.L, блок.llvm_block, обʼєкт_значення.llvm_value, обʼєкт_значення_аргумента.llvm_value);
          ціль обʼєкт_для_результату = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_результату };
          вернути Результат { обʼєкт_для_результату, помилка = пусто };
        }
      } інакше якщо аргумент.вид == ВидОбʼєктаЦілі {
        ціль обʼєкт_цілі_для_аргумента = аргумент.дані як комірка<ОбʼєктЦілі>;
        ціль обʼєкт_значення_для_аргумента = виділити<ОбʼєктЗначення>();
        обʼєкт_значення_для_аргумента.тип = обʼєкт_цілі_для_аргумента.тип;
        обʼєкт_значення_для_аргумента.llvm_value = LLVM::load(К.L, блок.llvm_block, обʼєкт_цілі_для_аргумента.тип.llvm_type, обʼєкт_цілі_для_аргумента.llvm_value);
        ціль обʼєкт_для_аргумента = Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення_для_аргумента };
        вернути обʼєкт_додати(Обʼєкт { ВидОбʼєктаЗначення, дані = обʼєкт_значення }, К, блок, середовище, місцезнаходження, обʼєкт_для_аргумента);
      }
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія обʼєкт_додати(я: Обʼєкт, К: комірка<Компілятор>, блок: комірка<Блок>, середовище: комірка<Середовище>, місцезнаходження: комірка<Місцезнаходження>, аргумент: Обʼєкт): Результат {
    якщо я.вид == ВидОбʼєктаТипу {
      ціль обʼєкт_типу = я.дані як комірка<ОбʼєктТипу>;
      вернути обʼєкт_типу_додати(обʼєкт_типу, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаДії {
      ціль обʼєкт_дії = я.дані як комірка<ОбʼєктДії>;
      вернути обʼєкт_дії_додати(обʼєкт_дії, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЦілі {
      ціль обʼєкт_цілі = я.дані як комірка<ОбʼєктЦілі>;
      вернути обʼєкт_цілі_додати(обʼєкт_цілі, К, блок, середовище, місцезнаходження, аргумент);
    }
    якщо я.вид == ВидОбʼєктаЗначення {
      ціль обʼєкт_значення = я.дані як комірка<ОбʼєктЗначення>;
      вернути обʼєкт_значення_додати(обʼєкт_значення, К, блок, середовище, місцезнаходження, аргумент);
    }
    ціль помилка_компіляції = виділити_помилку_компіляції(місцезнаходження, ю8"Не вдалось додати");
    вернути Результат { помилка = помилка_компіляції };
  }

  місцева дія створити_компілятор(L: комірка<LLVM::TL>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.L = L;
    К.глобальне_середовище = глобальне_середовище;
    К.тип_ніщо = виділити_нативний_тип(К, ю8"ніщо", LLVM::void(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ніщо", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ніщо });
    К.тип_ц8 = виділити_нативний_тип(К, ю8"ц8", LLVM::і8(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц8", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц8 });
    К.тип_ц16 = виділити_нативний_тип(К, ю8"ц16", LLVM::і16(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц16", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц16 });
    К.тип_ц32 = виділити_нативний_тип(К, ю8"ц32", LLVM::і32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц32 });
    К.тип_ц64 = виділити_нативний_тип(К, ю8"ц64", LLVM::і64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц64 });
    К.тип_п8 = виділити_нативний_тип(К, ю8"п8", LLVM::і8(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п8", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п8 });
    К.тип_п16 = виділити_нативний_тип(К, ю8"п16", LLVM::і16(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п16", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п16 });
    К.тип_п32 = виділити_нативний_тип(К, ю8"п32", LLVM::і32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п32 });
    К.тип_п64 = виділити_нативний_тип(К, ю8"п64", LLVM::і64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п64 });
    К.тип_д32 = виділити_нативний_тип(К, ю8"д32", LLVM::f32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"д32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_д32 });
    К.тип_д64 = виділити_нативний_тип(К, ю8"д64", LLVM::f64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"д64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_д64 });

    вернути К;
  }
}

зовнішня дія скомпілювати_ціль_в_ll(Л: комірка<LLVM::TL>, текст_коду: комірка<ТекстКоду>): комірка<ПомилкаКомпіляціїЦілі> {
  ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
  якщо результат_розбору_цілі.успіх == ні {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_розбору_цілі.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_розбору_цілі.помилка.повідомлення;
    вернути помилка_компіляції_цілі;
  }
  ціль К = ц::створити_компілятор(Л);
  ціль початкове_середовище = ц::створити_середовище(К.глобальне_середовище);
  ціль результат_компіляції_тіла_секції = ц::скомпілювати_тіло_секції(К, початкове_середовище, результат_розбору_цілі.тіло);
  якщо результат_компіляції_тіла_секції.помилка != пусто {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_компіляції_тіла_секції.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення;
    помилка_компіляції_цілі.довжина_шляху = 0;
    помилка_компіляції_цілі.шлях = пусто;
//    помилка_компіляції_цілі.довжина_шляху = К.шлях.довжина;
//    помилка_компіляції_цілі.шлях = К.шлях.дані;
    вернути помилка_компіляції_цілі;
  }
  вернути пусто;
}