взяти визначення Ц;
взяти визначення К;

структура ПомилкаКомпіляціїЦілі {
  місцезнаходження: комірка<Місцезнаходження>;
  повідомлення: памʼять<п8>;
}

секція цк {
  місцева дія створити_компілятор(Л: комірка<ЛМодуль>): комірка<Компілятор> {
      ціль глобальне_середовище = створити_середовище(пусто);

      ціль К = виділити<Компілятор>();
      К.глобальне_середовище = глобальне_середовище;
      К.Л = Л;

      К.тип_ніщо = визначити_нативний_тип(К, ю8"ніщо", LLVM::void(К.Л));
      К.тип_невідома_комірка = визначити_нативний_тип(К, ю8"невідома_комірка", LLVM::pointer(К.Л));
      К.тип_ц8 = визначити_нативний_тип(К, ю8"ц8", LLVM::і8(К.Л));
      К.тип_ц16 = визначити_нативний_тип(К, ю8"ц16", LLVM::і16(К.Л));
      К.тип_ц32 = визначити_нативний_тип(К, ю8"ц32", LLVM::і32(К.Л));
      К.тип_ц64 = визначити_нативний_тип(К, ю8"ц64", LLVM::і64(К.Л));
      К.тип_п8 = визначити_нативний_тип(К, ю8"п8", LLVM::і8(К.Л));
      К.тип_п16 = визначити_нативний_тип(К, ю8"п16", LLVM::і16(К.Л));
      К.тип_п32 = визначити_нативний_тип(К, ю8"п32", LLVM::і32(К.Л));
      К.тип_п64 = визначити_нативний_тип(К, ю8"п64", LLVM::і64(К.Л));
      К.тип_д32 = визначити_нативний_тип(К, ю8"д32", LLVM::f32(К.Л));
      К.тип_д64 = визначити_нативний_тип(К, ю8"д64", LLVM::f64(К.Л));

      вернути К;
    }
}

зовнішня дія скомпілювати_ціль_в_ll(Л: комірка<ЛМодуль>, текст_коду: комірка<ТекстКоду>): комірка<ПомилкаКомпіляціїЦілі> {
  ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
  якщо результат_розбору_цілі.успіх == ні {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_розбору_цілі.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_розбору_цілі.помилка.повідомлення;
    вернути помилка_компіляції_цілі;
  }
  ціль К = цк::створити_компілятор(Л);
  ціль початкове_середовище = цк::створити_середовище(К.глобальне_середовище);
  ціль результат_компіляції_тіла_секції = цк::скомпілювати_тіло_секції(К, початкове_середовище, результат_розбору_цілі.тіло);
  якщо результат_компіляції_тіла_секції.помилка != пусто {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_компіляції_тіла_секції.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення;
    вернути помилка_компіляції_цілі;
  }
  вернути пусто;
}