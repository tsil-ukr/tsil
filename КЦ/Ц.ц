взяти визначення Ц;
взяти визначення К;

зовнішня дія отримати_копію_cwd(): памʼять<п8>;

структура ПомилкаКомпіляціїЦілі {
  місцезнаходження: комірка<Місцезнаходження>;
  повідомлення: памʼять<п8>;
  довжина_шляху: позитивне;
  шлях: памʼять<комірка<Місцезнаходження>>;
}

секція ц {
  місцева дія створити_компілятор(L: комірка<LLVM::TL>): комірка<Компілятор> {
    ціль глобальне_середовище = створити_середовище(пусто);

    ціль К = виділити<Компілятор>();
    К.L = L;
    К.глобальне_середовище = глобальне_середовище;
    К.тип_ніщо = виділити_нативний_тип(К, ю8"ніщо", LLVM::void(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ніщо", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ніщо });
    К.тип_логічне = виділити_нативний_тип(К, ю8"логічне", LLVM::і1(L));
    змінити_в_середовищі(глобальне_середовище, ю8"логічне", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_логічне });
    К.тип_ц8 = виділити_нативний_тип(К, ю8"ц8", LLVM::і8(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц8", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц8 });
    К.тип_ц16 = виділити_нативний_тип(К, ю8"ц16", LLVM::і16(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц16", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц16 });
    К.тип_ц32 = виділити_нативний_тип(К, ю8"ц32", LLVM::і32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц32 });
    К.тип_ц64 = виділити_нативний_тип(К, ю8"ц64", LLVM::і64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"ц64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ц64 });
    К.тип_ціле = К.тип_ц64; // потім: визначити бітність процесора і вибрати відповідний тип
    змінити_в_середовищі(глобальне_середовище, ю8"ціле", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_ціле });
    К.тип_п8 = виділити_нативний_тип(К, ю8"п8", LLVM::і8(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п8", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п8 });
    К.тип_п16 = виділити_нативний_тип(К, ю8"п16", LLVM::і16(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п16", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п16 });
    К.тип_п32 = виділити_нативний_тип(К, ю8"п32", LLVM::і32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п32 });
    К.тип_п64 = виділити_нативний_тип(К, ю8"п64", LLVM::і64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"п64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_п64 });
    К.тип_позитивне = К.тип_п64; // потім: визначити бітність процесора і вибрати відповідний тип
    змінити_в_середовищі(глобальне_середовище, ю8"позитивне", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_позитивне });
    К.тип_д32 = виділити_нативний_тип(К, ю8"д32", LLVM::f32(L));
    змінити_в_середовищі(глобальне_середовище, ю8"д32", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_д32 });
    К.тип_д64 = виділити_нативний_тип(К, ю8"д64", LLVM::f64(L));
    змінити_в_середовищі(глобальне_середовище, ю8"д64", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_д64 });
    К.тип_дійсне = К.тип_д64;
    змінити_в_середовищі(глобальне_середовище, ю8"дійсне", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_дійсне });

    К.тип_адреса = виділити_тип_адреси(К, ю8"адреса", К.тип_ніщо);
    змінити_в_середовищі(глобальне_середовище, ю8"адреса", Обʼєкт { ВидОбʼєктаТипу, дані = К.тип_адреса });

    К.обʼєкт_значення_так = ОбʼєктЗначення {};
    К.обʼєкт_значення_так.тип = К.тип_логічне;
    К.обʼєкт_значення_так.llvm_value = LLVM::const_uint1(L, 1);
    змінити_в_середовищі(глобальне_середовище, ю8"так", Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_так });
    К.обʼєкт_значення_ні = ОбʼєктЗначення {};
    К.обʼєкт_значення_ні.тип = К.тип_логічне;
    К.обʼєкт_значення_ні.llvm_value = LLVM::const_uint1(L, 0);
    змінити_в_середовищі(глобальне_середовище, ю8"ні", Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_ні });
    К.обʼєкт_значення_пусто = ОбʼєктЗначення {};
    К.обʼєкт_значення_пусто.тип = К.тип_адреса;
    К.обʼєкт_значення_пусто.llvm_value = LLVM::null(К.L);
    змінити_в_середовищі(глобальне_середовище, ю8"пусто", Обʼєкт { ВидОбʼєктаЗначення, дані = К.обʼєкт_значення_пусто });

    К.cwd = отримати_копію_cwd();

    К.взяті_файли = виділити_список<памʼять<п8>>();

    вернути К;
  }
}

зовнішня дія скомпілювати_ціль_в_ll(Л: комірка<LLVM::TL>, текст_коду: комірка<ТекстКоду>): комірка<ПомилкаКомпіляціїЦілі> {
  ціль результат_розбору_цілі = розібрати_ціль(текст_коду);
  якщо результат_розбору_цілі.успіх == 0 {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_розбору_цілі.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_розбору_цілі.помилка.повідомлення;
    помилка_компіляції_цілі.довжина_шляху = 0;
    помилка_компіляції_цілі.шлях = пусто;
    вернути помилка_компіляції_цілі;
  }
  ціль К = ц::створити_компілятор(Л);
  ціль початкове_середовище = ц::створити_середовище(К.глобальне_середовище);
  ціль результат_компіляції_тіла_секції = ц::скомпілювати_тіло_секції(
    К,
    ц::ІнформаціяСередовища {
      середовище = початкове_середовище,
      обʼєкт_дії = пусто,
      llvm_block = пусто,
      інформація_виконання_шаблону = пусто
    },
    результат_розбору_цілі.тіло
  );
  якщо результат_компіляції_тіла_секції.помилка != пусто {
    ціль помилка_компіляції_цілі = виділити<ПомилкаКомпіляціїЦілі>();
    помилка_компіляції_цілі.місцезнаходження = результат_компіляції_тіла_секції.помилка.місцезнаходження;
    помилка_компіляції_цілі.повідомлення = результат_компіляції_тіла_секції.помилка.повідомлення;
    помилка_компіляції_цілі.довжина_шляху = 0;
    помилка_компіляції_цілі.шлях = пусто;
//    помилка_компіляції_цілі.довжина_шляху = К.шлях.довжина;
//    помилка_компіляції_цілі.шлях = К.шлях.дані;
    вернути помилка_компіляції_цілі;
  }
  вернути пусто;
}