взяти біб цілеспрямовано;
взяти визначення ПМ;
взяти визначення КЦ;
взяти визначення ПМЛЛВМ;
взяти визначення ./команди;

дія очікується_ЛЛВМІР(виділяч: адреса<біб::Виділяч>, вихід: ю8) -> логічне {
  змінна результат = біб::перевірити_чи_ю8_закінчується_на(вихід, ю8".ллвмір");
  якщо результат {
    вернути результат;
  }
  змінна ю8_лл = ю8 { 3, біб::виділити_памʼять<п8>(виділяч, 3) };
  ю8_лл.дані[0] = 46;
  ю8_лл.дані[1] = 108;
  ю8_лл.дані[2] = 108;
  результат = біб::перевірити_чи_ю8_закінчується_на(вихід, ю8_лл);
  біб::звільнити_памʼять(виділяч, ю8_лл.дані);
  вернути результат;
}

дія очікується_ЛЛВМО(виділяч: адреса<біб::Виділяч>, вихід: ю8) -> логічне {
  змінна результат = біб::перевірити_чи_ю8_закінчується_на(вихід, ю8".ллвмо");
  якщо результат {
    вернути результат;
  }
  змінна ю8_обдж = ю8 { 2, біб::виділити_памʼять<п8>(виділяч, 2) };
  ю8_обдж.дані[0] = 46;
  ю8_обдж.дані[1] = 111;
  результат = біб::перевірити_чи_ю8_закінчується_на(вихід, ю8_обдж);
  біб::звільнити_памʼять(виділяч, ю8_обдж.дані);
  вернути результат;
}

місцева дія ціль_перетворити(виділяч: адреса<біб::Виділяч>,
                             опції_програми: цілеспрямовано::Опції<ю8>,
                             опції_команди: цілеспрямовано::Опції<ю8>,
                             вхід: ю8,
                             опції_входу: цілеспрямовано::Опції<ю8>,
                             вихід: ю8,
                             опції_виходу: цілеспрямовано::Опції<ю8>,
                             треба_знищити_залишки: логічне) -> ц32 {
  стала ФОРМАТ_ВИХОДУ_ЛЛВМО = 1;
  стала ФОРМАТ_ВИХОДУ_ЛЛВМІР = 2;

  змінна формат_виходу: природне = ФОРМАТ_ВИХОДУ_ЛЛВМО;
  змінна визначено_формат_виходу = ні;

  змінна пм_архітектура_виходу: природне = ПМ::АРХІТЕКТУРА_ІКС86_64;
  змінна пм_система_виходу: природне = ПМ::СИСТЕМА_ЛІНУКС;

  змінна шлях_до_біб = ю8 { 0, пусто };
  
  змінна п: природне = 0;

  поки п < опції_команди.розмір {
    змінна опція = опції_команди.дані[п];

    якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"формат-виходів") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ллвмір") {
          формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМІР;
          визначено_формат_виходу = так;
        } інакше якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ллвмо") {
          формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМО;
          визначено_формат_виходу = так;
        } інакше {
          біб::надрукувати("Неочікуване значення опції команди --формат-виходів.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція команди --формат-виходів має мати значення.");
       вернути 1;
     }
    } інакше якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"архітектура-виходів") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ікс86_64") {
          пм_архітектура_виходу = ПМ::АРХІТЕКТУРА_ІКС86_64;
        } інакше {
          біб::надрукувати("Неочікуване значення опції команди --архітектура-виходів.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція команди --архітектура-виходів має мати значення.");
       вернути 1;
     }
    } інакше якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"система-виходів") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"лінукс") {
          пм_система_виходу = ПМ::СИСТЕМА_ЛІНУКС;
        } інакше {
          біб::надрукувати("Неочікуване значення опції команди --система-виходів.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція команди --система-виходів має мати значення.");
       вернути 1;
      }
    } інакше якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"біб-входів") {
      якщо опція.значення.заповнено == природне(так) {
        шлях_до_біб = опція.значення.значення;
      } інакше {
       біб::надрукувати("Опція команди --біб-входів має мати значення.");
       вернути 1;
      }
    } інакше {
      біб::вивести("Неочікувана опція команди ");
      біб::надрукувати_ю8(опція.ключ);
    }

    п += 1;
  }

  п = 0;

  поки п < опції_входу.розмір {
    змінна опція = опції_входу.дані[п];

    якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"біб") {
      якщо опція.значення.заповнено == природне(так) {
        шлях_до_біб = опція.значення.значення;
      } інакше {
       біб::надрукувати("Опція входу --біб має мати значення.");
       вернути 1;
      }
    } інакше {
      біб::вивести("Неочікувана опція входу ");
      біб::надрукувати_ю8(опція.ключ);
    }

    п += 1;
  }

  п = 0;

  поки п < опції_виходу.розмір {
    змінна опція = опції_виходу.дані[п];

    якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"формат") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ллвмір") {
          формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМІР;
          визначено_формат_виходу = так;
        } інакше якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ллвмо") {
          формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМО;
          визначено_формат_виходу = так;
        } інакше {
          біб::надрукувати("Неочікуване значення опції виходу --формат.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція виходу --формат має мати значення.");
       вернути 1;
     }
    } інакше якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"архітектура") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"ікс86_64") {
          пм_архітектура_виходу = ПМ::АРХІТЕКТУРА_ІКС86_64;
        } інакше {
          біб::надрукувати("Неочікуване значення опції виходу --архітектура.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція виходу --архітектура має мати значення.");
       вернути 1;
     }
    } інакше якщо біб::перевірити_чи_ю8_рівні(опція.ключ, ю8"система") {
      якщо опція.значення.заповнено == природне(так) {
        якщо біб::перевірити_чи_ю8_рівні(опція.значення.значення, ю8"лінукс") {
          пм_система_виходу = ПМ::СИСТЕМА_ЛІНУКС;
        } інакше {
          біб::надрукувати("Неочікуване значення опції виходу --система.");
          вернути 1;
        }
      } інакше {
       біб::надрукувати("Опція виходу --система має мати значення.");
       вернути 1;
     }
    } інакше {
      біб::вивести("Неочікувана опція виходу ");
      біб::надрукувати_ю8(опція.ключ);
    }

    п += 1;
  }

  якщо не визначено_формат_виходу {
    якщо очікується_ЛЛВМІР(виділяч, вихід) {
      формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМІР;
    } інакше якщо очікується_ЛЛВМО(виділяч, вихід) {
      формат_виходу = ФОРМАТ_ВИХОДУ_ЛЛВМО;
    }
  }

  змінна пм_модуль = ПМ::створити_модуль(
    пусто, 
    пм_архітектура_виходу, 
    пм_система_виходу
  );

  змінна компілятор = КЦ::створити_компілятор(виділяч, пм_модуль);

  якщо не КЦ::отримати_поточну_директорію_процесу(компілятор, компілятор.кореневий_шлях::адреса) {
    КЦ::померти(компілятор, "Не вдалось отримати поточну директорію процесу.");
  }

  компілятор.шлях_до_біб = КЦ::клонувати_шлях(компілятор, КЦ::Шлях { шлях_до_біб.розмір, шлях_до_біб.дані });

  змінна помилка: адреса<КЦ::Помилка> = пусто;

  змінна успіх_взяття = КЦ::взяти_файл_ю8(
    компілятор,
    компілятор.глобальне_середовище,
    КЦ::Шлях { вхід.розмір, вхід.дані },
    помилка::адреса
  );

  якщо не успіх_взяття {
    якщо помилка.місцезнаходження != пусто {
      змінна текст_коду = помилка.місцезнаходження.текст_коду;
      біб::вивести_ю8(ю8 { текст_коду.шлях.розмір, текст_коду.шлях.дані });
      біб::вивести(":");
      біб::вивести_природне(помилка.місцезнаходження.рядок);
      біб::вивести(":");
      біб::вивести_природне(помилка.місцезнаходження.стовпець);
      біб::вивести(" помилка: ");
    }

    змінна повідомлення_ю8 = ю8 { 0, пусто };
    змінна позиція_помилки: природне = 0;
    якщо не біб::перекодувати_т8_в_ю8(компілятор.виділяч, помилка.повідомлення, ні, повідомлення_ю8::адреса, пусто, позиція_помилки::адреса) {
      КЦ::померти(компілятор, "Не вдалось перекодувати помилку повідомлення в ю8.");
    }
    біб::надрукувати_ю8(повідомлення_ю8);
    КЦ::звільнити_памʼять(компілятор, повідомлення_ю8.дані);

    якщо помилка.місцезнаходження != пусто {
      змінна текст_коду = помилка.місцезнаходження.текст_коду;

      змінна витнутний_текст = КЦ::розбирач::витнути_значення_ю8(
        ю8 { помилка.місцезнаходження.текст_коду.значення.розмір, помилка.місцезнаходження.текст_коду.значення.дані },
        помилка.місцезнаходження.позиція_в_тексті,
        100
      );

      змінна природне_ю8 = біб::перетворити_природне_на_ю8(компілятор.виділяч, помилка.місцезнаходження.рядок);
      біб::вивести_ю8(природне_ю8);
      біб::вивести("| ");
      біб::надрукувати_ю8(витнутний_текст.витнуте_значення);
      змінна п: природне = 0;
      поки п < (витнутний_текст.початок_підкреслення + природне_ю8.розмір + 2) {
        біб::вивести(" ");
        п += 1;
      }
      біб::надрукувати("∧");
      біб::звільнити_памʼять(виділяч, природне_ю8.дані);
    }

    якщо треба_знищити_залишки {
      КЦ::знищити_помилку(компілятор, помилка);
      КЦ::знищити_компілятор(компілятор);
    }

    вернути 1;
  }

  змінна значення_запису = КЦ::Байти { 0, пусто };

  якщо формат_виходу == ФОРМАТ_ВИХОДУ_ЛЛВМІР {
    ПМЛЛВМ::перетворити_на_ллвмір(пм_модуль, значення_запису.розмір::адреса, значення_запису.дані::адреса);
  } інакше якщо формат_виходу == ФОРМАТ_ВИХОДУ_ЛЛВМО {
    ПМЛЛВМ::перетворити_на_ллвмо(пм_модуль, значення_запису.розмір::адреса, значення_запису.дані::адреса);
  }

  якщо вихід.розмір == 0 {
    біб::вивести_байти(значення_запису.розмір, значення_запису.дані);
  } інакше {
    якщо КЦ::записати_файл(компілятор, КЦ::Шлях { вихід.розмір, вихід.дані }, значення_запису) {
    } інакше {
      біб::вивести("Не вдалось записати у файл ");
      біб::надрукувати_ю8(вхід);
    }
  }

  якщо треба_знищити_залишки {
    біб::звільнити_памʼять(виділяч, значення_запису.дані);
    КЦ::знищити_компілятор(компілятор);
    ПМ::знищити_модуль(пм_модуль);
  }

  вернути 0;
}