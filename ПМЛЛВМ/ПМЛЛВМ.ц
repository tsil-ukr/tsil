взяти визначення ./ПМЛЛВМ;
взяти визначення ЛЛВМ;
взяти біб Виділяч;
взяти біб Кодування;
взяти біб Реєстр;
взяти біб КД;

секція ПМЛЛВМ {
  дія отримати_ю8_з_назви(назва: адреса<ПМ::Назва>) -> ю8 {
    змінна результат = ю8 { 0, пусто };

    змінна позиція_помилки: позитивне = 0;

    якщо біб::перекодувати_т8_в_ю8(біб::отримати_системний_виділяч(), назва.значення, ні, результат::адреса, пусто, позиція_помилки::адреса) == ні {
      // потім: обробити помилку
    }

    вернути результат;
  }

  дія скомпілювати_тип(ллвм_модуль: адреса<ЛЛВМ::Модуль>, тип: адреса<ПМ::Тип>) -> логічне;
  дія скомпілювати_значення(ллвм_модуль: адреса<ЛЛВМ::Модуль>, значення: адреса<ПМ::Значення>) -> логічне;

  дія скомпілювати_параметри(модуль: адреса<ПМ::Модуль>, ллвм_модуль: адреса<ЛЛВМ::Модуль>, параметри: ПМ::Параметри, вихід: адреса<памʼять<адреса<ЛЛВМ::Тип>>>) -> логічне {
    змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;

    якщо параметри.розмір > 0 {
      ллвм_параметри = біб::виділити_памʼять<адреса<ЛЛВМ::Тип>>(модуль.виділяч, параметри.розмір);
      
      змінна п: натуральне = 0;
      поки п < параметри.розмір {
        якщо параметри.дані[п].тип == пусто {
          ллвм_параметри[п] = ЛЛВМ::тип_войд();
        } інакше {
          якщо не скомпілювати_тип(ллвм_модуль, параметри.дані[п].тип) {
            біб::звільнити_памʼять(модуль.виділяч, ллвм_параметри);
            вернути ні;
          }

          ллвм_параметри[п] = параметри.дані[п].тип.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        п += 1;
      }
    }

    вихід::вміст = ллвм_параметри;

    вернути так;
  }

  дія скомпілювати_тип(ллвм_модуль: адреса<ЛЛВМ::Модуль>, тип: адреса<ПМ::Тип>) -> логічне {
    якщо тип == пусто {
      вернути так;
    }
    
    змінна модуль = тип.модуль;

    якщо тип.дані_компіляції == пусто {
      якщо тип == модуль.тип_ніщо {
        тип.дані_компіляції = ЛЛВМ::тип_войд();
      } інакше якщо тип == модуль.тип_адреса {
        тип.дані_компіляції = ЛЛВМ::тип_пойнтер();
      } інакше якщо тип == модуль.тип_логічне {
        тип.дані_компіляції = ЛЛВМ::тип_і1();
      } інакше якщо тип == модуль.тип_ц8 {
        тип.дані_компіляції = ЛЛВМ::тип_і8();
      } інакше якщо тип == модуль.тип_ц16 {
        тип.дані_компіляції = ЛЛВМ::тип_і16();
      } інакше якщо тип == модуль.тип_ц32 {
        тип.дані_компіляції = ЛЛВМ::тип_і32();
      } інакше якщо тип == модуль.тип_ц64 {
        тип.дані_компіляції = ЛЛВМ::тип_і64();
      } інакше якщо тип == модуль.тип_п8 {
        тип.дані_компіляції = ЛЛВМ::тип_і8();
      } інакше якщо тип == модуль.тип_п16 {
        тип.дані_компіляції = ЛЛВМ::тип_і16();
      } інакше якщо тип == модуль.тип_п32 {
        тип.дані_компіляції = ЛЛВМ::тип_і32();
      } інакше якщо тип == модуль.тип_п64 {
        тип.дані_компіляції = ЛЛВМ::тип_і64();
      } інакше якщо тип == модуль.тип_д32 {
        тип.дані_компіляції = ЛЛВМ::тип_флоат();
      } інакше якщо тип == модуль.тип_д64 {
        тип.дані_компіляції = ЛЛВМ::тип_даубл();
      } інакше якщо тип.вид == ПМ::ВидТипуІнструкція {
        змінна дані_типу_інструкція = тип.дані як ПМ::ДаніТипуІнструкція;

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(тип.модуль, ллвм_модуль, дані_типу_інструкція.параметри, ллвм_параметри::адреса);

        змінна ллвм_тип_результату = ЛЛВМ::тип_войд();
        якщо дані_типу_інструкція.тип_результату != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_інструкція.тип_результату) {
            вернути ні;
          }

          ллвм_тип_результату = дані_типу_інструкція.тип_результату.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        тип.дані_компіляції = ЛЛВМ::тип_функція(
          дані_типу_інструкція.параметри.розмір, 
          ллвм_параметри, 
          ллвм_тип_результату
        );

        біб::звільнити_памʼять(тип.модуль.виділяч, ллвм_параметри);
      } інакше якщо тип.вид == ПМ::ВидТипуСтруктура {
        змінна дані_типу_структура = тип.дані як ПМ::ДаніТипуСтруктура;

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(тип.модуль, ллвм_модуль, дані_типу_структура.параметри, ллвм_параметри::адреса);

        змінна назва_ю8 = отримати_ю8_з_назви(дані_типу_структура.назва);

        тип.дані_компіляції = ЛЛВМ::тип(
          назва_ю8,
          дані_типу_структура.параметри.розмір, 
          ллвм_параметри
        );

        біб::звільнити_памʼять(тип.модуль.виділяч, ллвм_параметри);
        біб::звільнити_памʼять(тип.модуль.виділяч, назва_ю8.дані);
      } інакше якщо тип.вид == ПМ::ВидТипуМасив {
        змінна дані_типу_масив = тип.дані як ПМ::ДаніТипуМасив;

        змінна ллвм_тип_елемента = ЛЛВМ::тип_войд();
        якщо дані_типу_масив.тип_елемента != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_масив.тип_елемента) {
            вернути ні;
          }

          ллвм_тип_елемента = дані_типу_масив.тип_елемента.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }
        
        тип.дані_компіляції = ЛЛВМ::тип_аррай(
          ллвм_тип_елемента,
          дані_типу_масив.розмір
        );
      } інакше {
        // потім: обробити помилку
      }
    }

    вернути так;
  }

  дія скомпілювати_крок(модуль: адреса<ПМ::Модуль>, ллвм_модуль: адреса<ЛЛВМ::Модуль>, крок: адреса<ПМ::Крок>) -> логічне {
    якщо крок.дані_компіляції == пусто {
      змінна назва_ю8 = отримати_ю8_з_назви(крок.назва);

      змінна значення_інструкції = крок.інструкція як адреса<ПМ::Значення>;

      змінна функція = значення_інструкції.дані_компіляції як адреса<ЛЛВМ::Функція>;

      змінна ллвм_базовий_блок = ЛЛВМ::створити_базовий_блок(функція, назва_ю8);

      біб::звільнити_памʼять(значення_інструкції.модуль.виділяч, назва_ю8.дані);

      крок.дані_компіляції = ллвм_базовий_блок;

      змінна пп: натуральне = 0;

      поки пп < крок.вказівки.розмір {
        змінна вказівка = крок.вказівки.дані[пп];

        якщо не скомпілювати_значення(ллвм_модуль, вказівка) {
          вернути ні;
        }

        пп += 1;
      }
    }

    вернути так;
  }

  дія скомпілювати_значення(ллвм_модуль: адреса<ЛЛВМ::Модуль>, значення: адреса<ПМ::Значення>) -> логічне {
    якщо значення.дані_компіляції == пусто {
      якщо не скомпілювати_тип(ллвм_модуль, значення.тип) {
        вернути ні;
      }

      змінна модуль = значення.модуль;

      якщо значення.вид == ПМ::ВидЗначенняЧисло {
        якщо значення.тип == модуль.тип_адреса {
          змінна значення_адреси = значення.дані як п64;
          
          якщо значення_адреси == 0 {
            значення.дані_компіляції = ЛЛВМ::нулл();
          } інакше {
            // потім: втілити
          }
        } інакше якщо значення.тип == модуль.тип_логічне {
          змінна значення_логічного = значення.дані як логічне;
          
          значення.дані_компіляції = ЛЛВМ::і1(значення_логічного);
        } інакше якщо значення.тип == модуль.тип_п8 {
          змінна значення_п8 = значення.дані як п8;

          значення.дані_компіляції = ЛЛВМ::і8(значення_п8);
        } інакше якщо значення.тип == модуль.тип_п16 {
          змінна значення_п16 = значення.дані як п16;

          значення.дані_компіляції = ЛЛВМ::і16(значення_п16);
        } інакше якщо значення.тип == модуль.тип_п32 {
          змінна значення_п32 = значення.дані як п32;

          значення.дані_компіляції = ЛЛВМ::і32(значення_п32);
        } інакше якщо значення.тип == модуль.тип_п64 {
          змінна значення_п64 = значення.дані як п64;

          значення.дані_компіляції = ЛЛВМ::і64(значення_п64);
        } інакше якщо значення.тип == модуль.тип_ц8 {
          змінна значення_ц8 = значення.дані як ц8;

          значення.дані_компіляції = ЛЛВМ::і8ц(значення_ц8);
        } інакше якщо значення.тип == модуль.тип_ц16 {
          змінна значення_ц16 = значення.дані як ц16;

          значення.дані_компіляції = ЛЛВМ::і16ц(значення_ц16);
        } інакше якщо значення.тип == модуль.тип_ц32 {
          змінна значення_ц32 = значення.дані як ц32;

          значення.дані_компіляції = ЛЛВМ::і32ц(значення_ц32);
        } інакше якщо значення.тип == модуль.тип_ц64 {
          змінна значення_ц64 = значення.дані як ц64;

          значення.дані_компіляції = ЛЛВМ::і64ц(значення_ц64);
        } інакше якщо значення.тип == модуль.тип_д32 {
          змінна значення_д32 = значення.дані як д32;

          значення.дані_компіляції = ЛЛВМ::флоат(значення_д32);
        } інакше якщо значення.тип == модуль.тип_д64 {
          змінна значення_д64 = значення.дані як д64;

          значення.дані_компіляції = ЛЛВМ::даубл(значення_д64);
        } інакше {
          // потім: обробити помилку
        }
      } інакше якщо значення.вид == ПМ::ВидЗначенняІнструкція {
        змінна дані_інструкції = значення.дані як ПМ::ДаніЗначенняІнструкція;
        змінна дані_типу_інструкція = дані_інструкції.тип.дані як ПМ::ДаніТипуІнструкція;
        
        змінна назва_ю8 = отримати_ю8_з_назви(дані_інструкції.назва);

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(значення.модуль, ллвм_модуль, дані_типу_інструкція.параметри, ллвм_параметри::адреса);

        змінна ллвм_тип_результату = ЛЛВМ::тип_войд();
        якщо дані_типу_інструкція.тип_результату != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_інструкція.тип_результату) {
            вернути ні;
          }

          ллвм_тип_результату = дані_типу_інструкція.тип_результату.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        змінна функція = ЛЛВМ::створити_функцію(
          ллвм_модуль, 
          дані_інструкції.видимість,
          назва_ю8, 
          дані_типу_інструкція.параметри.розмір, 
          ллвм_параметри, 
          ллвм_тип_результату
        );
  
        значення.дані_компіляції = функція;

        змінна п: натуральне = 0;

        п = 0;

        змінна па: натуральне = 0;
        поки па < дані_інструкції.значення_аргументів.розмір {
          якщо не скомпілювати_значення(ллвм_модуль, дані_інструкції.значення_аргументів.дані[па]) {
            вернути ні;
          }
      
          па += 1;
        }

        поки п < дані_інструкції.кроки.розмір {
          змінна крок = дані_інструкції.кроки.дані[п];

          якщо не скомпілювати_крок(значення.модуль, ллвм_модуль, крок) {
            вернути ні;
          }

          п += 1;
        }

        біб::звільнити_памʼять(дані_інструкції.модуль.виділяч, назва_ю8.дані);
        біб::звільнити_памʼять(дані_інструкції.модуль.виділяч, ллвм_параметри);
      } інакше якщо значення.вид == ПМ::ВидЗначенняВказівка {
        змінна дані_значення_вказівка = значення.дані як ПМ::ДаніЗначенняВказівка;

          // біб::надрукувати_позитивне(дані_значення_вказівка.вид);

        якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиНакопичити {
          змінна дані_вказівки_накопичити = дані_значення_вказівка.дані як ПМ::ДаніВказівкиНакопичити;
          
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_накопичити.тип) {
            вернути ні;
          }
          
          змінна ллвм_значення_накопичити = ЛЛВМ::інст_аллока(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_накопичити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
          );

          значення.дані_компіляції = ллвм_значення_накопичити;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиДодати {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_додати: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_додати = ЛЛВМ::інст_адд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення_додати = ЛЛВМ::інст_фадд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_додати;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиВідняти {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_відняти: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_відняти = ЛЛВМ::інст_саб(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення_відняти = ЛЛВМ::інст_фсаб(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_відняти;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиПомножити {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_помножити: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_помножити = ЛЛВМ::інст_мул(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення_помножити = ЛЛВМ::інст_фмул(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_помножити;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиПоділити {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_удів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_сдів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фдів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиОстача {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_урем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_срем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фрем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиНеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиБільше {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпугт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсгт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпугт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиМенше {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпулт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпслт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпулт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиБільшеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпуге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиМеншеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іцмпуле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_д32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_д64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиЗсунутиВліво {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_шл(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_шл(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиЗсунутиВправо {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_лшр(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_ашр(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиДвійковеІ {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_анд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_анд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиДвійковеАБО {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_ор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_ор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиДвійковеВиключнеАБО {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_п64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиДвійковеЗаперечення {
          змінна дані_одинарної_вказівки = дані_значення_вказівка.дані як ПМ::ДаніОдинарноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_одинарної_вказівки.значення) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_одинарної_вказівки.значення.тип == модуль.тип_логічне {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і1(так)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_п8 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц8 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і8(255)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_п16 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц16 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і16(65535)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_п32 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц32 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і32(4294967295)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_п64 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і64(18446744073709551615)
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиПеретворити {
          змінна дані_вказівки_перетворити = дані_значення_вказівка.дані як ПМ::ДаніВказівкиПеретворити;
            
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_перетворити.значення) {
            вернути ні;
          }
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_перетворити.тип) {
            вернути ні;
          }
            
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_вказівки_перетворити.значення.тип == модуль.тип_адреса {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне 
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_птртуінт(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_логічне {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне  {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>; 
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_п8 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_п16 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_п32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_п64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц8 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц16 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_п8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_п16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_п32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_п64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 або дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_д32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
             або дані_вказівки_перетворити.тип == модуль.тип_п8
             або дані_вказівки_перетворити.тип == модуль.тип_п16
             або дані_вказівки_перетворити.тип == модуль.тип_п32
             або дані_вказівки_перетворити.тип == модуль.тип_п64 {
              ллвм_значення = ЛЛВМ::інст_фптууі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_фптусі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = ЛЛВМ::інст_фпекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_д64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
             або дані_вказівки_перетворити.тип == модуль.тип_п8
             або дані_вказівки_перетворити.тип == модуль.тип_п16
             або дані_вказівки_перетворити.тип == модуль.тип_п32
             або дані_вказівки_перетворити.тип == модуль.тип_п64 {
              ллвм_значення = ЛЛВМ::інст_фптууі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_фптусі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д32 {
              ллвм_значення = ЛЛВМ::інст_фптрунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_д64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            }
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиЯк {
          змінна дані_вказівки_як = дані_значення_вказівка.дані як ПМ::ДаніВказівкиЯк;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_як.значення) {
            вернути ні;
          }
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_як.тип) {
            вернути ні;
          }

          змінна ллвм_значення = ЛЛВМ::інст_біткаст(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_як.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_як.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиОтриматиАдресуЕлемента {
          змінна дані_вказівки_отримати_адресу_елемента = дані_значення_вказівка.дані як ПМ::ДаніВказівкиОтриматиАдресуЕлемента;

          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.тип) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.значення) {
            вернути ні;
          }
          
          змінна ллвм_позиції = біб::виділити_памʼять<адреса<ЛЛВМ::Значення>>(модуль.виділяч, дані_вказівки_отримати_адресу_елемента.кількість_позицій);

          змінна п: натуральне = 0;
          поки п < дані_вказівки_отримати_адресу_елемента.кількість_позицій {
            якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.позиції[п]) {
              вернути ні;
            }

            ллвм_позиції[п] = дані_вказівки_отримати_адресу_елемента.позиції[п].дані_компіляції як адреса<ЛЛВМ::Значення>;

            п += 1;
          }

          змінна ллвм_значення = ЛЛВМ::інст_гетелементптр(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_отримати_адресу_елемента.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
            дані_вказівки_отримати_адресу_елемента.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_отримати_адресу_елемента.кількість_позицій,
            ллвм_позиції
          );

          біб::звільнити_памʼять(модуль.виділяч, ллвм_позиції);

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиОтриматиЗначення {
          змінна дані_вказівки_отримати_значення = дані_значення_вказівка.дані як ПМ::ДаніВказівкиОтриматиЗначення;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_значення.значення) {
            вернути ні;
          }

          змінна ллвм_значення = ЛЛВМ::екстракт_валуе(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_отримати_значення.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_отримати_значення.позиція,
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиЗаписати {
          змінна дані_вказівки_записати = дані_значення_вказівка.дані як ПМ::ДаніВказівкиЗаписати;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_записати.куди) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_записати.значення) {
            вернути ні;
          }

          змінна ллвм_значення_записати = ЛЛВМ::інст_сторе(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_записати.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_записати.куди.дані_компіляції як адреса<ЛЛВМ::Значення>
          );

          значення.дані_компіляції = ллвм_значення_записати;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиПрочитати {
          змінна дані_вказівки_прочитати = дані_значення_вказівка.дані як ПМ::ДаніВказівкиПрочитати;

          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_прочитати.тип) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_прочитати.звідки) {
            вернути ні;
          }

          змінна ллвм_значення_прочитати = ЛЛВМ::інст_лоад(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_прочитати.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
            дані_вказівки_прочитати.звідки.дані_компіляції як адреса<ЛЛВМ::Значення>
          );

          значення.дані_компіляції = ллвм_значення_прочитати;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиВернути {
          змінна дані_вказівки_вернути = дані_значення_вказівка.дані як ПМ::ДаніВказівкиВернути;
          
          змінна ллвм_значення_вернути: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_вказівки_вернути.значення != пусто {
            якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_вернути.значення) {
              вернути ні;
            }

            ллвм_значення_вернути = дані_вказівки_вернути.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
          }

          змінна ллвм_значення = ЛЛВМ::інст_рет(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            ллвм_значення_вернути
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиВиконати {
          змінна дані_вказівки_виконати = дані_значення_вказівка.дані як ПМ::ДаніВказівкиВиконати;

          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_виконати.тип) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_виконати.значення) {
            вернути ні;
          }

          змінна ллвм_аргументи: памʼять<адреса<ЛЛВМ::Значення>> = пусто;
          
          якщо дані_вказівки_виконати.кількість_аргументів > 0 {
            ллвм_аргументи = біб::виділити_памʼять<адреса<ЛЛВМ::Значення>>(модуль.виділяч, дані_вказівки_виконати.кількість_аргументів);

            змінна п: натуральне = 0;
            поки п < дані_вказівки_виконати.кількість_аргументів {
              якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_виконати.аргументи[п]) {
                вернути ні;
              }

              ллвм_аргументи[п] = дані_вказівки_виконати.аргументи[п].дані_компіляції як адреса<ЛЛВМ::Значення>;

              п += 1;
            }
          }
          
          змінна ллвм_значення = ЛЛВМ::інст_калл(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_виконати.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
            дані_вказівки_виконати.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_виконати.кількість_аргументів,
            ллвм_аргументи
          );

          біб::звільнити_памʼять(модуль.виділяч, ллвм_аргументи);

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиСтрибнути {
          змінна дані_вказівки_стрибнути = дані_значення_вказівка.дані як ПМ::ДаніВказівкиСтрибнути;

          якщо не скомпілювати_крок(значення.модуль, ллвм_модуль, дані_вказівки_стрибнути.куди) {
            вернути ні;
          }
          
          змінна ллвм_значення = ЛЛВМ::інст_бр(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_стрибнути.куди.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ПМ::ВидВказівкиСтрибнутиЯкщо {
          змінна дані_вказівки_стрибнути_якщо = дані_значення_вказівка.дані як ПМ::ДаніВказівкиСтрибнутиЯкщо;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_стрибнути_якщо.умова) {
            вернути ні;
          }
          якщо не скомпілювати_крок(значення.модуль, ллвм_модуль, дані_вказівки_стрибнути_якщо.куди) {
            вернути ні;
          }

          якщо не скомпілювати_крок(значення.модуль, ллвм_модуль, дані_вказівки_стрибнути_якщо.інакше_куди) {
            вернути ні;
          }
          
          змінна ллвм_значення = ЛЛВМ::інст_кондбр(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_стрибнути_якщо.умова.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_стрибнути_якщо.куди.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_стрибнути_якщо.інакше_куди.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше {
          // потім: обробити помилку
        }
      } інакше якщо значення.вид == ПМ::ВидЗначенняГлобальна {
        змінна дані_значення_глобальна = значення.дані як ПМ::ДаніЗначенняГлобальна;

        змінна назва_ю8 = отримати_ю8_з_назви(дані_значення_глобальна.назва);

        змінна ллвм_значення = ЛЛВМ::створити_глобал_варіабле(
          ллвм_модуль,
          дані_значення_глобальна.видимість,
          назва_ю8,
          значення.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
        );

        значення.дані_компіляції = ллвм_значення;
      } інакше якщо значення.вид == ПМ::ВидЗначенняГлобальнаКонстантаДаних {
        змінна дані_значення_глобальна_константа_даних = значення.дані як ПМ::ДаніЗначенняГлобальнаКонстантаДаних;

        змінна ллвм_значення = ЛЛВМ::створити_глобал_константу_даних(
          ллвм_модуль,
          дані_значення_глобальна_константа_даних.розмір,
          дані_значення_глобальна_константа_даних.дані
        );

        значення.дані_компіляції = ллвм_значення;
      } інакше якщо значення.вид == ПМ::ВидЗначенняОбʼєкт {
        змінна дані_значення_обʼєкт = значення.дані як ПМ::ДаніЗначенняОбʼєкт;

        змінна ллвм_аргументи: памʼять<адреса<ЛЛВМ::Значення>> = пусто;
        якщо дані_значення_обʼєкт.кількість_аргументів > 0 {
          ллвм_аргументи = біб::виділити_памʼять<адреса<ЛЛВМ::Значення>>(модуль.виділяч, дані_значення_обʼєкт.кількість_аргументів);

          змінна п: натуральне = 0;
          поки п < дані_значення_обʼєкт.кількість_аргументів {
            якщо не скомпілювати_значення(ллвм_модуль, дані_значення_обʼєкт.аргументи[п]) {
              вернути ні;
            }

            ллвм_аргументи[п] = дані_значення_обʼєкт.аргументи[п].дані_компіляції як адреса<ЛЛВМ::Значення>;

            п += 1;
          }
        }

        змінна ллвм_значення = ЛЛВМ::констант_структ(
          ллвм_модуль,
          значення.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
          дані_значення_обʼєкт.кількість_аргументів,
          ллвм_аргументи
        );
        
        біб::звільнити_памʼять(модуль.виділяч, ллвм_аргументи);

        значення.дані_компіляції = ллвм_значення;
      } інакше якщо значення.вид == ПМ::ВидЗначенняПустийОбʼєкт {
        змінна ллвм_значення = ЛЛВМ::констант_нулл_валуе(
          ллвм_модуль,
          значення.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
        );

        значення.дані_компіляції = ллвм_значення;
      } інакше якщо значення.вид == ПМ::ВидЗначенняАргумент {
        змінна дані_значення_аргумент = значення.дані як ПМ::ДаніЗначенняАргумент;
        змінна дані_інструкції = дані_значення_аргумент.інструкція.дані як ПМ::ДаніЗначенняІнструкція;

        змінна ллвм_значення_аргумента = ЛЛВМ::отримати_аргумент_функції(
          дані_значення_аргумент.інструкція.дані_компіляції як адреса<ЛЛВМ::Функція>,
          дані_значення_аргумент.позиція
        );

        значення.дані_компіляції = ллвм_значення_аргумента;
      } інакше {
        // потім: обробити помилку
      }
    }

    вернути так;
  }

  дія перебрати_реєстр_глобальних(реєстр: адреса<біб::Реєстр<адреса<ПМ::Назва>, адреса<ПМ::Значення>>>, аргумент: невідома_адреса, ключ: адреса<ПМ::Назва>, значення: адреса<ПМ::Значення>) -> логічне {
    змінна ллвм_модуль = аргумент як адреса<ЛЛВМ::Модуль>;

    скомпілювати_значення(ллвм_модуль, значення);

    вернути так;
  }

  місцева дія перетворити_на_ллвмір(модуль: адреса<ПМ::Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<п8>>) -> логічне {
    ЛЛВМ::ініціалізувати();
    
    змінна ллвм_модуль = ЛЛВМ::створити_модуль(ю8"привіт", ПМ::АРХІТЕКТУРА_ІКС86_64, ПМ::СИСТЕМА_ЛІНУКС);

    біб::перебрати_реєстр<адреса<ПМ::Назва>, адреса<ПМ::Значення>>(
      модуль.глобальні,
      перебрати_реєстр_глобальних,
      ллвм_модуль
    );

    ЛЛВМ::перетворити_на_ллвмір(ллвм_модуль, вихід_розміру, вихід_даних);

    ЛЛВМ::знищити_модуль(ллвм_модуль);
    ЛЛВМ::деініціалізувати();

    вернути так;
  }

  місцева дія перетворити_на_ллвмо(модуль: адреса<ПМ::Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<п8>>) -> логічне {
    ЛЛВМ::ініціалізувати();
    
    змінна ллвм_модуль = ЛЛВМ::створити_модуль(ю8"привіт", ПМ::АРХІТЕКТУРА_ІКС86_64, ПМ::СИСТЕМА_ЛІНУКС);

    біб::перебрати_реєстр<адреса<ПМ::Назва>, адреса<ПМ::Значення>>(
      модуль.глобальні,
      перебрати_реєстр_глобальних,
      ллвм_модуль
    );

    ЛЛВМ::перетворити_на_ллвмо(ллвм_модуль, вихід_розміру, вихід_даних);

    ЛЛВМ::знищити_модуль(ллвм_модуль);
    ЛЛВМ::деініціалізувати();

    вернути так;
  }
}