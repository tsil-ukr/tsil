////
// Захищено Правом Автора
// Богданович Давид Когут Прихожденко, 2024
//
// Цей файл є частиною Бібліотеки Цілі і відповідає за роботу з кодуванням Unicode.
////

взяти біб юнікод;

секція біб {
  секція юнікод {
    місцева дія дізнатись_розмір_символа_юнікоду(перший_байт: п8): п8 {
      якщо (перший_байт & 0ш80) == 0ш00 {
        вернути 1;
      }
      якщо (перший_байт & 0шҐ0) == 0шВ0 {
        вернути 2;
      }
      якщо (перший_байт & 0шД0) == 0шҐ0 {
        вернути 3;
      }
      якщо (перший_байт & 0шД8) == 0шД0 {
        вернути 4;
      }
      вернути 0;
    }

    місцева дія дізнатись_розмір_ю8_сі(ю8: памʼять<п8>): позитивне {
      змінна розмір = 0;
      поки ю8[розмір] != 0 {
        розмір = розмір + 1;
      }
      вернути розмір;
    }

    місцева дія ю8_в_ю16(ю8: памʼять<п8>, розмір: позитивне): памʼять<п16> {
      змінна буфер = виділити<п16>(розмір / 2);
      змінна розмір_буфера = 0;
      змінна х = 0;
      поки х < розмір {
        ціль перший_байт = ю8[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 1 {
          буфер[розмір_буфера] = (перший_байт & (0ш7Д як п8)) як п16;
          розмір_буфера = розмір_буфера + 1;
        }
        якщо розмір_символа == 2 {
          ціль другий_байт = ю8[х + 1];
          буфер[розмір_буфера] = (((перший_байт & (0ш1Д як п8)) як п16) << (6 як п16)) | ((другий_байт & (0ш3Д як п8)) як п16);
          розмір_буфера = розмір_буфера + 1;
          х = х + 1;
        }
        якщо розмір_символа == 3 {
          ціль другий_байт = ю8[х + 1];
          ціль третій_байт = ю8[х + 2];
          буфер[розмір_буфера] = ((перший_байт & (0ш0Д як п8)) << 12) | ((другий_байт & (0ш3Д як п8)) << 6) | (третій_байт & (0ш3Д як п8));
          розмір_буфера = розмір_буфера + 1;
          х = х + 2;
        }
        якщо розмір_символа == 4 {
          ціль другий_байт = ю8[х + 1];
          ціль третій_байт = ю8[х + 2];
          ціль четвертий_байт = ю8[х + 3];
          змінна код_першої_частини = (((перший_байт & (0ш0Д як п8)) як ціле) << 18) | (((другий_байт & (0ш3Д як п8)) як ціле) << 12) | (((третій_байт & (0ш3Д як п8)) як ціле) << 6) | ((четвертий_байт & (0ш3Д як п8)) як ціле);
          код_першої_частини = код_першої_частини - 0ш10000;
          буфер[розмір_буфера] = 0шГ800 + ((код_першої_частини >> 10) & 0ш3ДД);
          буфер[розмір_буфера + 1] = 0шГВ00 + (код_першої_частини & 0ш3ДД);
          розмір_буфера = розмір_буфера + 2;
          х = х + 3;
        }
        х = х + 1;
      }
      буфер[розмір_буфера] = 0;
      вернути буфер;
    }

    місцева дія ю8_в_ю32(ю8: памʼять<п8>, розмір: позитивне): памʼять<п32> {
      змінна буфер = виділити<п32>(розмір / 4);
      змінна розмір_буфера = 0;
      змінна х = 0;
      поки х < розмір {
        ціль перший_байт = ю8[х];
        ціль розмір_символа = дізнатись_розмір_символа_юнікоду(перший_байт);
        якщо розмір_символа == 1 {
          буфер[розмір_буфера] = (перший_байт & (0ш7Д як п8)) як п32;
          розмір_буфера = розмір_буфера + 1;
        }
        якщо розмір_символа == 2 {
          ціль другий_байт = ю8[х + 1];
          буфер[розмір_буфера] = (((перший_байт & (0ш1Д як п8)) як п32) << (6 як п32)) | ((другий_байт & (0ш3Д як п8)) як п32);
          розмір_буфера = розмір_буфера + 1;
          х = х + 1;
        }
        якщо розмір_символа == 3 {
          ціль другий_байт = ю8[х + 1];
          ціль третій_байт = ю8[х + 2];
          буфер[розмір_буфера] = ((перший_байт & (0ш0Д як п8)) << (12 як п32)) | ((другий_байт & (0ш3Д як п8)) << (6 як п32)) | (третій_байт & (0ш3Д як п8));
          розмір_буфера = розмір_буфера + 1;
          х = х + 2;
        }
        якщо розмір_символа == 4 {
          ціль другий_байт = ю8[х + 1];
          ціль третій_байт = ю8[х + 2];
          ціль четвертий_байт = ю8[х + 3];
//          буфер[розмір_буфера] = ...;
//          розмір_буфера = розмір_буфера + 1;
          х = х + 3;
        }
        х = х + 1;
      }
      буфер[розмір_буфера] = 0;
      вернути буфер;
    }
  }
}