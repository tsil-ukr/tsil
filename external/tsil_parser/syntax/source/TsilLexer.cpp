
// Generated from TsilLexer.g4 by ANTLR 4.13.0


#include "TsilLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TsilLexerStaticData final {
  TsilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsilLexerStaticData(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData(TsilLexerStaticData&&) = delete;
  TsilLexerStaticData& operator=(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData& operator=(TsilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsillexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TsilLexerStaticData *tsillexerLexerStaticData = nullptr;

void tsillexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tsillexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tsillexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TsilLexerStaticData>(
    std::vector<std::string>{
      "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", 
      "QUOTE_CLOSE", "NUMBER", "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING", 
      "COMMENT", "LINE_COMMENT", "WS", "NL", "DIGIT", "ID_START", "ID_CONTINUE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0446\\u0456\\u043B\\u044C'", "'\\u0434\\u0456\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0432\\u0456\\u0434\\u043A\\u043B\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u0432\\u0430\\u0440\\u0456\\u0430\\u0446\\u0456\\u044F'", "'\\u044F\\u043A'", 
      "'\\u0441\\u0435\\u043A\\u0446\\u0456\\u044F'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u043D\\u0435'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0456'", "'\\u0437\\u043C\\u0456\\u043D\\u043D\\u0430'", 
      "'\\u0441\\u0442\\u0430\\u043B\\u0430'", "'\\u0441\\u0438\\u043D\\u043E\\u043D\\u0456\\u043C'", 
      "'\\u0432\\u0438\\u043A\\u043E\\u043D\\u0430\\u0442\\u0438'", "'='", 
      "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", 
      "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", "'''", 
      "'\"'", "'!'", "','", "';'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", 
      "QUOTE_CLOSE", "NUMBER", "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING", 
      "COMMENT", "LINE_COMMENT", "WS", "NL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,62,490,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
  	1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
  	1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
  	1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
  	1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,3,51,360,8,51,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
  	1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,390,8,51,
  	1,51,3,51,393,8,51,1,52,4,52,396,8,52,11,52,12,52,397,1,53,4,53,401,8,
  	53,11,53,12,53,402,1,53,1,53,4,53,407,8,53,11,53,12,53,408,1,54,1,54,
  	1,54,1,54,1,54,4,54,416,8,54,11,54,12,54,417,1,55,1,55,1,55,1,55,4,55,
  	424,8,55,11,55,12,55,425,1,56,1,56,5,56,430,8,56,10,56,12,56,433,9,56,
  	1,57,1,57,1,57,1,57,5,57,439,8,57,10,57,12,57,442,9,57,1,57,1,57,1,58,
  	1,58,1,58,1,58,5,58,450,8,58,10,58,12,58,453,9,58,1,58,1,58,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,59,5,59,464,8,59,10,59,12,59,467,9,59,1,59,1,59,
  	1,60,1,60,1,60,1,60,1,61,3,61,476,8,61,1,61,1,61,1,61,1,61,1,62,1,62,
  	1,63,1,63,1,64,1,64,1,64,3,64,489,8,64,1,451,0,65,1,1,3,2,5,3,7,4,9,5,
  	11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
  	18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
  	59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
  	41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,
  	105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,
  	125,0,127,0,129,0,1,0,6,3,0,1040,1044,1072,1076,1168,1169,3,0,10,10,13,
  	13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,9,0,65,90,95,95,97,122,1028,1028,
  	1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,2,0,48,57,700,700,515,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,131,1,0,0,0,3,136,
  	1,0,0,0,5,140,1,0,0,0,7,145,1,0,0,0,9,152,1,0,0,0,11,157,1,0,0,0,13,165,
  	1,0,0,0,15,175,1,0,0,0,17,185,1,0,0,0,19,194,1,0,0,0,21,197,1,0,0,0,23,
  	204,1,0,0,0,25,210,1,0,0,0,27,215,1,0,0,0,29,226,1,0,0,0,31,238,1,0,0,
  	0,33,247,1,0,0,0,35,257,1,0,0,0,37,265,1,0,0,0,39,268,1,0,0,0,41,272,
  	1,0,0,0,43,274,1,0,0,0,45,281,1,0,0,0,47,287,1,0,0,0,49,295,1,0,0,0,51,
  	304,1,0,0,0,53,306,1,0,0,0,55,308,1,0,0,0,57,310,1,0,0,0,59,312,1,0,0,
  	0,61,314,1,0,0,0,63,316,1,0,0,0,65,318,1,0,0,0,67,320,1,0,0,0,69,322,
  	1,0,0,0,71,324,1,0,0,0,73,326,1,0,0,0,75,328,1,0,0,0,77,330,1,0,0,0,79,
  	332,1,0,0,0,81,334,1,0,0,0,83,336,1,0,0,0,85,338,1,0,0,0,87,340,1,0,0,
  	0,89,342,1,0,0,0,91,344,1,0,0,0,93,346,1,0,0,0,95,348,1,0,0,0,97,350,
  	1,0,0,0,99,352,1,0,0,0,101,354,1,0,0,0,103,392,1,0,0,0,105,395,1,0,0,
  	0,107,400,1,0,0,0,109,410,1,0,0,0,111,419,1,0,0,0,113,427,1,0,0,0,115,
  	434,1,0,0,0,117,445,1,0,0,0,119,459,1,0,0,0,121,470,1,0,0,0,123,475,1,
  	0,0,0,125,481,1,0,0,0,127,483,1,0,0,0,129,488,1,0,0,0,131,132,5,1094,
  	0,0,132,133,5,1110,0,0,133,134,5,1083,0,0,134,135,5,1100,0,0,135,2,1,
  	0,0,0,136,137,5,1076,0,0,137,138,5,1110,0,0,138,139,5,1103,0,0,139,4,
  	1,0,0,0,140,141,5,1103,0,0,141,142,5,1082,0,0,142,143,5,1097,0,0,143,
  	144,5,1086,0,0,144,6,1,0,0,0,145,146,5,1110,0,0,146,147,5,1085,0,0,147,
  	148,5,1072,0,0,148,149,5,1082,0,0,149,150,5,1096,0,0,150,151,5,1077,0,
  	0,151,8,1,0,0,0,152,153,5,1087,0,0,153,154,5,1086,0,0,154,155,5,1082,
  	0,0,155,156,5,1080,0,0,156,10,1,0,0,0,157,158,5,1074,0,0,158,159,5,1077,
  	0,0,159,160,5,1088,0,0,160,161,5,1085,0,0,161,162,5,1091,0,0,162,163,
  	5,1090,0,0,163,164,5,1080,0,0,164,12,1,0,0,0,165,166,5,1074,0,0,166,167,
  	5,1110,0,0,167,168,5,1076,0,0,168,169,5,1082,0,0,169,170,5,1083,0,0,170,
  	171,5,1072,0,0,171,172,5,1089,0,0,172,173,5,1090,0,0,173,174,5,1080,0,
  	0,174,14,1,0,0,0,175,176,5,1089,0,0,176,177,5,1090,0,0,177,178,5,1088,
  	0,0,178,179,5,1091,0,0,179,180,5,1082,0,0,180,181,5,1090,0,0,181,182,
  	5,1091,0,0,182,183,5,1088,0,0,183,184,5,1072,0,0,184,16,1,0,0,0,185,186,
  	5,1074,0,0,186,187,5,1072,0,0,187,188,5,1088,0,0,188,189,5,1110,0,0,189,
  	190,5,1072,0,0,190,191,5,1094,0,0,191,192,5,1110,0,0,192,193,5,1103,0,
  	0,193,18,1,0,0,0,194,195,5,1103,0,0,195,196,5,1082,0,0,196,20,1,0,0,0,
  	197,198,5,1089,0,0,198,199,5,1077,0,0,199,200,5,1082,0,0,200,201,5,1094,
  	0,0,201,202,5,1110,0,0,202,203,5,1103,0,0,203,22,1,0,0,0,204,205,5,1074,
  	0,0,205,206,5,1079,0,0,206,207,5,1103,0,0,207,208,5,1090,0,0,208,209,
  	5,1080,0,0,209,24,1,0,0,0,210,211,5,1076,0,0,211,212,5,1072,0,0,212,213,
  	5,1090,0,0,213,214,5,1080,0,0,214,26,1,0,0,0,215,216,5,1082,0,0,216,217,
  	5,1086,0,0,217,218,5,1084,0,0,218,219,5,1087,0,0,219,220,5,1086,0,0,220,
  	221,5,1079,0,0,221,222,5,1080,0,0,222,223,5,1094,0,0,223,224,5,1110,0,
  	0,224,225,5,1103,0,0,225,28,1,0,0,0,226,227,5,1074,0,0,227,228,5,1083,
  	0,0,228,229,5,1072,0,0,229,230,5,1089,0,0,230,231,5,1090,0,0,231,232,
  	5,1080,0,0,232,233,5,1074,0,0,233,234,5,1110,0,0,234,235,5,1089,0,0,235,
  	236,5,1090,0,0,236,237,5,1100,0,0,237,30,1,0,0,0,238,239,5,1079,0,0,239,
  	240,5,1086,0,0,240,241,5,1074,0,0,241,242,5,1085,0,0,242,243,5,1110,0,
  	0,243,244,5,1096,0,0,244,245,5,1085,0,0,245,246,5,1103,0,0,246,32,1,0,
  	0,0,247,248,5,1074,0,0,248,249,5,1085,0,0,249,250,5,1091,0,0,250,251,
  	5,1090,0,0,251,252,5,1088,0,0,252,253,5,1110,0,0,253,254,5,1096,0,0,254,
  	255,5,1085,0,0,255,256,5,1103,0,0,256,34,1,0,0,0,257,258,5,1084,0,0,258,
  	259,5,1110,0,0,259,260,5,1089,0,0,260,261,5,1094,0,0,261,262,5,1077,0,
  	0,262,263,5,1074,0,0,263,264,5,1072,0,0,264,36,1,0,0,0,265,266,5,1085,
  	0,0,266,267,5,1077,0,0,267,38,1,0,0,0,268,269,5,1072,0,0,269,270,5,1073,
  	0,0,270,271,5,1086,0,0,271,40,1,0,0,0,272,273,5,1110,0,0,273,42,1,0,0,
  	0,274,275,5,1079,0,0,275,276,5,1084,0,0,276,277,5,1110,0,0,277,278,5,
  	1085,0,0,278,279,5,1085,0,0,279,280,5,1072,0,0,280,44,1,0,0,0,281,282,
  	5,1089,0,0,282,283,5,1090,0,0,283,284,5,1072,0,0,284,285,5,1083,0,0,285,
  	286,5,1072,0,0,286,46,1,0,0,0,287,288,5,1089,0,0,288,289,5,1080,0,0,289,
  	290,5,1085,0,0,290,291,5,1086,0,0,291,292,5,1085,0,0,292,293,5,1110,0,
  	0,293,294,5,1084,0,0,294,48,1,0,0,0,295,296,5,1074,0,0,296,297,5,1080,
  	0,0,297,298,5,1082,0,0,298,299,5,1086,0,0,299,300,5,1085,0,0,300,301,
  	5,1072,0,0,301,302,5,1090,0,0,302,303,5,1080,0,0,303,50,1,0,0,0,304,305,
  	5,61,0,0,305,52,1,0,0,0,306,307,5,62,0,0,307,54,1,0,0,0,308,309,5,60,
  	0,0,309,56,1,0,0,0,310,311,5,46,0,0,311,58,1,0,0,0,312,313,5,43,0,0,313,
  	60,1,0,0,0,314,315,5,45,0,0,315,62,1,0,0,0,316,317,5,42,0,0,317,64,1,
  	0,0,0,318,319,5,47,0,0,319,66,1,0,0,0,320,321,5,37,0,0,321,68,1,0,0,0,
  	322,323,5,94,0,0,323,70,1,0,0,0,324,325,5,38,0,0,325,72,1,0,0,0,326,327,
  	5,124,0,0,327,74,1,0,0,0,328,329,5,40,0,0,329,76,1,0,0,0,330,331,5,41,
  	0,0,331,78,1,0,0,0,332,333,5,91,0,0,333,80,1,0,0,0,334,335,5,93,0,0,335,
  	82,1,0,0,0,336,337,5,63,0,0,337,84,1,0,0,0,338,339,5,58,0,0,339,86,1,
  	0,0,0,340,341,5,126,0,0,341,88,1,0,0,0,342,343,5,39,0,0,343,90,1,0,0,
  	0,344,345,5,34,0,0,345,92,1,0,0,0,346,347,5,33,0,0,347,94,1,0,0,0,348,
  	349,5,44,0,0,349,96,1,0,0,0,350,351,5,59,0,0,351,98,1,0,0,0,352,353,5,
  	123,0,0,353,100,1,0,0,0,354,355,5,125,0,0,355,102,1,0,0,0,356,360,3,105,
  	52,0,357,360,3,107,53,0,358,360,3,109,54,0,359,356,1,0,0,0,359,357,1,
  	0,0,0,359,358,1,0,0,0,360,389,1,0,0,0,361,362,5,1094,0,0,362,390,5,56,
  	0,0,363,364,5,1094,0,0,364,365,5,49,0,0,365,390,5,54,0,0,366,367,5,1094,
  	0,0,367,368,5,51,0,0,368,390,5,50,0,0,369,370,5,1094,0,0,370,371,5,54,
  	0,0,371,390,5,52,0,0,372,373,5,1087,0,0,373,390,5,56,0,0,374,375,5,1087,
  	0,0,375,376,5,49,0,0,376,390,5,54,0,0,377,378,5,1087,0,0,378,379,5,51,
  	0,0,379,390,5,50,0,0,380,381,5,1087,0,0,381,382,5,54,0,0,382,390,5,52,
  	0,0,383,384,5,1076,0,0,384,385,5,51,0,0,385,390,5,50,0,0,386,387,5,1076,
  	0,0,387,388,5,54,0,0,388,390,5,52,0,0,389,361,1,0,0,0,389,363,1,0,0,0,
  	389,366,1,0,0,0,389,369,1,0,0,0,389,372,1,0,0,0,389,374,1,0,0,0,389,377,
  	1,0,0,0,389,380,1,0,0,0,389,383,1,0,0,0,389,386,1,0,0,0,389,390,1,0,0,
  	0,390,393,1,0,0,0,391,393,3,111,55,0,392,359,1,0,0,0,392,391,1,0,0,0,
  	393,104,1,0,0,0,394,396,3,125,62,0,395,394,1,0,0,0,396,397,1,0,0,0,397,
  	395,1,0,0,0,397,398,1,0,0,0,398,106,1,0,0,0,399,401,3,125,62,0,400,399,
  	1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,
  	0,404,406,5,46,0,0,405,407,3,125,62,0,406,405,1,0,0,0,407,408,1,0,0,0,
  	408,406,1,0,0,0,408,409,1,0,0,0,409,108,1,0,0,0,410,411,5,48,0,0,411,
  	412,5,1096,0,0,412,415,1,0,0,0,413,416,7,0,0,0,414,416,3,125,62,0,415,
  	413,1,0,0,0,415,414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,
  	0,0,0,418,110,1,0,0,0,419,420,5,48,0,0,420,421,5,1076,0,0,421,423,1,0,
  	0,0,422,424,2,48,49,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,
  	425,426,1,0,0,0,426,112,1,0,0,0,427,431,3,127,63,0,428,430,3,129,64,0,
  	429,428,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,114,
  	1,0,0,0,433,431,1,0,0,0,434,440,5,34,0,0,435,439,8,1,0,0,436,437,5,92,
  	0,0,437,439,5,34,0,0,438,435,1,0,0,0,438,436,1,0,0,0,439,442,1,0,0,0,
  	440,438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,1,0,0,0,443,444,
  	5,34,0,0,444,116,1,0,0,0,445,446,5,47,0,0,446,451,5,42,0,0,447,450,3,
  	117,58,0,448,450,9,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,453,1,0,
  	0,0,451,452,1,0,0,0,451,449,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,
  	455,5,42,0,0,455,456,5,47,0,0,456,457,1,0,0,0,457,458,6,58,0,0,458,118,
  	1,0,0,0,459,460,5,47,0,0,460,465,5,47,0,0,461,464,3,119,59,0,462,464,
  	8,2,0,0,463,461,1,0,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,
  	0,465,466,1,0,0,0,466,468,1,0,0,0,467,465,1,0,0,0,468,469,6,59,0,0,469,
  	120,1,0,0,0,470,471,7,3,0,0,471,472,1,0,0,0,472,473,6,60,0,0,473,122,
  	1,0,0,0,474,476,5,13,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,
  	0,0,477,478,5,10,0,0,478,479,1,0,0,0,479,480,6,61,0,0,480,124,1,0,0,0,
  	481,482,2,48,57,0,482,126,1,0,0,0,483,484,7,4,0,0,484,128,1,0,0,0,485,
  	489,3,127,63,0,486,489,7,5,0,0,487,489,3,127,63,0,488,485,1,0,0,0,488,
  	486,1,0,0,0,488,487,1,0,0,0,489,130,1,0,0,0,19,0,359,389,392,397,402,
  	408,415,417,425,431,438,440,449,451,463,465,475,488,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsillexerLexerStaticData = staticData.release();
}

}

TsilLexer::TsilLexer(CharStream *input) : Lexer(input) {
  TsilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tsillexerLexerStaticData->atn, tsillexerLexerStaticData->decisionToDFA, tsillexerLexerStaticData->sharedContextCache);
}

TsilLexer::~TsilLexer() {
  delete _interpreter;
}

std::string TsilLexer::getGrammarFileName() const {
  return "TsilLexer.g4";
}

const std::vector<std::string>& TsilLexer::getRuleNames() const {
  return tsillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TsilLexer::getChannelNames() const {
  return tsillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TsilLexer::getModeNames() const {
  return tsillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TsilLexer::getVocabulary() const {
  return tsillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TsilLexer::getSerializedATN() const {
  return tsillexerLexerStaticData->serializedATN;
}

const atn::ATN& TsilLexer::getATN() const {
  return *tsillexerLexerStaticData->atn;
}




void TsilLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tsillexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tsillexerLexerOnceFlag, tsillexerLexerInitialize);
#endif
}
