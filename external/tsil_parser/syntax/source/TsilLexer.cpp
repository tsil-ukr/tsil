
// Generated from TsilLexer.g4 by ANTLR 4.13.0


#include "TsilLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TsilLexerStaticData final {
  TsilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsilLexerStaticData(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData(TsilLexerStaticData&&) = delete;
  TsilLexerStaticData& operator=(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData& operator=(TsilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsillexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TsilLexerStaticData *tsillexerLexerStaticData = nullptr;

void tsillexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tsillexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tsillexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TsilLexerStaticData>(
    std::vector<std::string>{
      "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", 
      "QUOTE_CLOSE", "NUMBER", "INTEGER", "INTEGER_PART_START", "INTEGER_PART_CONTINUE", 
      "FLOAT", "FLOAT_PART_START", "FLOAT_PART_CONTINUE", "HEX", "HEX_PART_START", 
      "HEX_PART_CONTINUE", "BIN", "BIN_PART_START", "BIN_PART_CONTINUE", 
      "ID", "STRING", "COMMENT", "LINE_COMMENT", "WS", "NL", "DIGIT", "ID_START", 
      "ID_CONTINUE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0446\\u0456\\u043B\\u044C'", "'\\u0434\\u0456\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0432\\u0456\\u0434\\u043A\\u043B\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u0432\\u0430\\u0440\\u0456\\u0430\\u0446\\u0456\\u044F'", "'\\u044F\\u043A'", 
      "'\\u0441\\u0435\\u043A\\u0446\\u0456\\u044F'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u043D\\u0435'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0456'", "'\\u0437\\u043C\\u0456\\u043D\\u043D\\u0430'", 
      "'\\u0441\\u0442\\u0430\\u043B\\u0430'", "'\\u0441\\u0438\\u043D\\u043E\\u043D\\u0456\\u043C'", 
      "'\\u0432\\u0438\\u043A\\u043E\\u043D\\u0430\\u0442\\u0438'", "'='", 
      "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", 
      "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", "'''", 
      "'\"'", "'!'", "','", "';'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", 
      "QUOTE_CLOSE", "NUMBER", "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING", 
      "COMMENT", "LINE_COMMENT", "WS", "NL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,62,545,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
  	1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
  	5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
  	1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,
  	1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
  	1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
  	1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
  	1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,3,51,377,8,51,
  	1,52,1,52,5,52,381,8,52,10,52,12,52,384,9,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,3,52,408,8,52,1,53,1,53,1,54,3,54,413,8,54,1,54,1,54,1,
  	55,1,55,5,55,419,8,55,10,55,12,55,422,9,55,1,55,1,55,1,55,5,55,427,8,
  	55,10,55,12,55,430,9,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,438,8,55,1,
  	56,1,56,1,57,3,57,443,8,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,451,8,58,
  	10,58,12,58,454,9,58,1,59,1,59,3,59,458,8,59,1,60,3,60,461,8,60,1,60,
  	1,60,3,60,465,8,60,1,61,1,61,1,61,1,61,5,61,471,8,61,10,61,12,61,474,
  	9,61,1,62,1,62,1,63,3,63,479,8,63,1,63,1,63,1,64,1,64,5,64,485,8,64,10,
  	64,12,64,488,9,64,1,65,1,65,1,65,1,65,5,65,494,8,65,10,65,12,65,497,9,
  	65,1,65,1,65,1,66,1,66,1,66,1,66,5,66,505,8,66,10,66,12,66,508,9,66,1,
  	66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,519,8,67,10,67,12,67,
  	522,9,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,3,69,531,8,69,1,69,1,69,1,
  	69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,3,72,544,8,72,1,506,0,73,1,
  	1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
  	15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
  	53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
  	38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
  	99,50,101,51,103,52,105,53,107,0,109,0,111,54,113,0,115,0,117,55,119,
  	0,121,0,123,56,125,0,127,0,129,57,131,58,133,59,135,60,137,61,139,62,
  	141,0,143,0,145,0,1,0,8,2,0,1064,1064,1096,1096,3,0,1040,1044,1072,1076,
  	1168,1169,2,0,1044,1044,1076,1076,3,0,10,10,13,13,34,34,2,0,10,10,13,
  	13,2,0,9,9,32,32,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,1103,
  	1108,1108,1110,1111,1168,1169,2,0,48,57,700,700,567,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
  	47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
  	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
  	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
  	79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
  	0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
  	0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,111,1,0,0,0,0,117,1,0,0,
  	0,0,123,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,
  	0,0,137,1,0,0,0,0,139,1,0,0,0,1,147,1,0,0,0,3,152,1,0,0,0,5,156,1,0,0,
  	0,7,161,1,0,0,0,9,168,1,0,0,0,11,173,1,0,0,0,13,181,1,0,0,0,15,191,1,
  	0,0,0,17,201,1,0,0,0,19,210,1,0,0,0,21,213,1,0,0,0,23,220,1,0,0,0,25,
  	226,1,0,0,0,27,231,1,0,0,0,29,242,1,0,0,0,31,254,1,0,0,0,33,263,1,0,0,
  	0,35,273,1,0,0,0,37,281,1,0,0,0,39,284,1,0,0,0,41,288,1,0,0,0,43,290,
  	1,0,0,0,45,297,1,0,0,0,47,303,1,0,0,0,49,311,1,0,0,0,51,320,1,0,0,0,53,
  	322,1,0,0,0,55,324,1,0,0,0,57,326,1,0,0,0,59,328,1,0,0,0,61,330,1,0,0,
  	0,63,332,1,0,0,0,65,334,1,0,0,0,67,336,1,0,0,0,69,338,1,0,0,0,71,340,
  	1,0,0,0,73,342,1,0,0,0,75,344,1,0,0,0,77,346,1,0,0,0,79,348,1,0,0,0,81,
  	350,1,0,0,0,83,352,1,0,0,0,85,354,1,0,0,0,87,356,1,0,0,0,89,358,1,0,0,
  	0,91,360,1,0,0,0,93,362,1,0,0,0,95,364,1,0,0,0,97,366,1,0,0,0,99,368,
  	1,0,0,0,101,370,1,0,0,0,103,376,1,0,0,0,105,378,1,0,0,0,107,409,1,0,0,
  	0,109,412,1,0,0,0,111,416,1,0,0,0,113,439,1,0,0,0,115,442,1,0,0,0,117,
  	446,1,0,0,0,119,457,1,0,0,0,121,460,1,0,0,0,123,466,1,0,0,0,125,475,1,
  	0,0,0,127,478,1,0,0,0,129,482,1,0,0,0,131,489,1,0,0,0,133,500,1,0,0,0,
  	135,514,1,0,0,0,137,525,1,0,0,0,139,530,1,0,0,0,141,536,1,0,0,0,143,538,
  	1,0,0,0,145,543,1,0,0,0,147,148,5,1094,0,0,148,149,5,1110,0,0,149,150,
  	5,1083,0,0,150,151,5,1100,0,0,151,2,1,0,0,0,152,153,5,1076,0,0,153,154,
  	5,1110,0,0,154,155,5,1103,0,0,155,4,1,0,0,0,156,157,5,1103,0,0,157,158,
  	5,1082,0,0,158,159,5,1097,0,0,159,160,5,1086,0,0,160,6,1,0,0,0,161,162,
  	5,1110,0,0,162,163,5,1085,0,0,163,164,5,1072,0,0,164,165,5,1082,0,0,165,
  	166,5,1096,0,0,166,167,5,1077,0,0,167,8,1,0,0,0,168,169,5,1087,0,0,169,
  	170,5,1086,0,0,170,171,5,1082,0,0,171,172,5,1080,0,0,172,10,1,0,0,0,173,
  	174,5,1074,0,0,174,175,5,1077,0,0,175,176,5,1088,0,0,176,177,5,1085,0,
  	0,177,178,5,1091,0,0,178,179,5,1090,0,0,179,180,5,1080,0,0,180,12,1,0,
  	0,0,181,182,5,1074,0,0,182,183,5,1110,0,0,183,184,5,1076,0,0,184,185,
  	5,1082,0,0,185,186,5,1083,0,0,186,187,5,1072,0,0,187,188,5,1089,0,0,188,
  	189,5,1090,0,0,189,190,5,1080,0,0,190,14,1,0,0,0,191,192,5,1089,0,0,192,
  	193,5,1090,0,0,193,194,5,1088,0,0,194,195,5,1091,0,0,195,196,5,1082,0,
  	0,196,197,5,1090,0,0,197,198,5,1091,0,0,198,199,5,1088,0,0,199,200,5,
  	1072,0,0,200,16,1,0,0,0,201,202,5,1074,0,0,202,203,5,1072,0,0,203,204,
  	5,1088,0,0,204,205,5,1110,0,0,205,206,5,1072,0,0,206,207,5,1094,0,0,207,
  	208,5,1110,0,0,208,209,5,1103,0,0,209,18,1,0,0,0,210,211,5,1103,0,0,211,
  	212,5,1082,0,0,212,20,1,0,0,0,213,214,5,1089,0,0,214,215,5,1077,0,0,215,
  	216,5,1082,0,0,216,217,5,1094,0,0,217,218,5,1110,0,0,218,219,5,1103,0,
  	0,219,22,1,0,0,0,220,221,5,1074,0,0,221,222,5,1079,0,0,222,223,5,1103,
  	0,0,223,224,5,1090,0,0,224,225,5,1080,0,0,225,24,1,0,0,0,226,227,5,1076,
  	0,0,227,228,5,1072,0,0,228,229,5,1090,0,0,229,230,5,1080,0,0,230,26,1,
  	0,0,0,231,232,5,1082,0,0,232,233,5,1086,0,0,233,234,5,1084,0,0,234,235,
  	5,1087,0,0,235,236,5,1086,0,0,236,237,5,1079,0,0,237,238,5,1080,0,0,238,
  	239,5,1094,0,0,239,240,5,1110,0,0,240,241,5,1103,0,0,241,28,1,0,0,0,242,
  	243,5,1074,0,0,243,244,5,1083,0,0,244,245,5,1072,0,0,245,246,5,1089,0,
  	0,246,247,5,1090,0,0,247,248,5,1080,0,0,248,249,5,1074,0,0,249,250,5,
  	1110,0,0,250,251,5,1089,0,0,251,252,5,1090,0,0,252,253,5,1100,0,0,253,
  	30,1,0,0,0,254,255,5,1079,0,0,255,256,5,1086,0,0,256,257,5,1074,0,0,257,
  	258,5,1085,0,0,258,259,5,1110,0,0,259,260,5,1096,0,0,260,261,5,1085,0,
  	0,261,262,5,1103,0,0,262,32,1,0,0,0,263,264,5,1074,0,0,264,265,5,1085,
  	0,0,265,266,5,1091,0,0,266,267,5,1090,0,0,267,268,5,1088,0,0,268,269,
  	5,1110,0,0,269,270,5,1096,0,0,270,271,5,1085,0,0,271,272,5,1103,0,0,272,
  	34,1,0,0,0,273,274,5,1084,0,0,274,275,5,1110,0,0,275,276,5,1089,0,0,276,
  	277,5,1094,0,0,277,278,5,1077,0,0,278,279,5,1074,0,0,279,280,5,1072,0,
  	0,280,36,1,0,0,0,281,282,5,1085,0,0,282,283,5,1077,0,0,283,38,1,0,0,0,
  	284,285,5,1072,0,0,285,286,5,1073,0,0,286,287,5,1086,0,0,287,40,1,0,0,
  	0,288,289,5,1110,0,0,289,42,1,0,0,0,290,291,5,1079,0,0,291,292,5,1084,
  	0,0,292,293,5,1110,0,0,293,294,5,1085,0,0,294,295,5,1085,0,0,295,296,
  	5,1072,0,0,296,44,1,0,0,0,297,298,5,1089,0,0,298,299,5,1090,0,0,299,300,
  	5,1072,0,0,300,301,5,1083,0,0,301,302,5,1072,0,0,302,46,1,0,0,0,303,304,
  	5,1089,0,0,304,305,5,1080,0,0,305,306,5,1085,0,0,306,307,5,1086,0,0,307,
  	308,5,1085,0,0,308,309,5,1110,0,0,309,310,5,1084,0,0,310,48,1,0,0,0,311,
  	312,5,1074,0,0,312,313,5,1080,0,0,313,314,5,1082,0,0,314,315,5,1086,0,
  	0,315,316,5,1085,0,0,316,317,5,1072,0,0,317,318,5,1090,0,0,318,319,5,
  	1080,0,0,319,50,1,0,0,0,320,321,5,61,0,0,321,52,1,0,0,0,322,323,5,62,
  	0,0,323,54,1,0,0,0,324,325,5,60,0,0,325,56,1,0,0,0,326,327,5,46,0,0,327,
  	58,1,0,0,0,328,329,5,43,0,0,329,60,1,0,0,0,330,331,5,45,0,0,331,62,1,
  	0,0,0,332,333,5,42,0,0,333,64,1,0,0,0,334,335,5,47,0,0,335,66,1,0,0,0,
  	336,337,5,37,0,0,337,68,1,0,0,0,338,339,5,94,0,0,339,70,1,0,0,0,340,341,
  	5,38,0,0,341,72,1,0,0,0,342,343,5,124,0,0,343,74,1,0,0,0,344,345,5,40,
  	0,0,345,76,1,0,0,0,346,347,5,41,0,0,347,78,1,0,0,0,348,349,5,91,0,0,349,
  	80,1,0,0,0,350,351,5,93,0,0,351,82,1,0,0,0,352,353,5,63,0,0,353,84,1,
  	0,0,0,354,355,5,58,0,0,355,86,1,0,0,0,356,357,5,126,0,0,357,88,1,0,0,
  	0,358,359,5,39,0,0,359,90,1,0,0,0,360,361,5,34,0,0,361,92,1,0,0,0,362,
  	363,5,33,0,0,363,94,1,0,0,0,364,365,5,44,0,0,365,96,1,0,0,0,366,367,5,
  	59,0,0,367,98,1,0,0,0,368,369,5,123,0,0,369,100,1,0,0,0,370,371,5,125,
  	0,0,371,102,1,0,0,0,372,377,3,105,52,0,373,377,3,111,55,0,374,377,3,117,
  	58,0,375,377,3,123,61,0,376,372,1,0,0,0,376,373,1,0,0,0,376,374,1,0,0,
  	0,376,375,1,0,0,0,377,104,1,0,0,0,378,382,3,107,53,0,379,381,3,109,54,
  	0,380,379,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,
  	407,1,0,0,0,384,382,1,0,0,0,385,386,5,1094,0,0,386,408,5,56,0,0,387,388,
  	5,1094,0,0,388,389,5,49,0,0,389,408,5,54,0,0,390,391,5,1094,0,0,391,392,
  	5,51,0,0,392,408,5,50,0,0,393,394,5,1094,0,0,394,395,5,54,0,0,395,408,
  	5,52,0,0,396,397,5,1087,0,0,397,408,5,56,0,0,398,399,5,1087,0,0,399,400,
  	5,49,0,0,400,408,5,54,0,0,401,402,5,1087,0,0,402,403,5,51,0,0,403,408,
  	5,50,0,0,404,405,5,1087,0,0,405,406,5,54,0,0,406,408,5,52,0,0,407,385,
  	1,0,0,0,407,387,1,0,0,0,407,390,1,0,0,0,407,393,1,0,0,0,407,396,1,0,0,
  	0,407,398,1,0,0,0,407,401,1,0,0,0,407,404,1,0,0,0,407,408,1,0,0,0,408,
  	106,1,0,0,0,409,410,3,141,70,0,410,108,1,0,0,0,411,413,5,95,0,0,412,411,
  	1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,415,3,141,70,0,415,110,1,
  	0,0,0,416,420,3,113,56,0,417,419,3,115,57,0,418,417,1,0,0,0,419,422,1,
  	0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,
  	423,424,5,46,0,0,424,428,3,113,56,0,425,427,3,115,57,0,426,425,1,0,0,
  	0,427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,437,1,0,0,0,430,
  	428,1,0,0,0,431,432,5,1076,0,0,432,433,5,51,0,0,433,438,5,50,0,0,434,
  	435,5,1076,0,0,435,436,5,54,0,0,436,438,5,52,0,0,437,431,1,0,0,0,437,
  	434,1,0,0,0,437,438,1,0,0,0,438,112,1,0,0,0,439,440,3,141,70,0,440,114,
  	1,0,0,0,441,443,5,95,0,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,
  	0,0,444,445,3,141,70,0,445,116,1,0,0,0,446,447,5,48,0,0,447,448,7,0,0,
  	0,448,452,3,119,59,0,449,451,3,121,60,0,450,449,1,0,0,0,451,454,1,0,0,
  	0,452,450,1,0,0,0,452,453,1,0,0,0,453,118,1,0,0,0,454,452,1,0,0,0,455,
  	458,7,1,0,0,456,458,3,141,70,0,457,455,1,0,0,0,457,456,1,0,0,0,458,120,
  	1,0,0,0,459,461,5,95,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,464,1,0,
  	0,0,462,465,7,1,0,0,463,465,3,141,70,0,464,462,1,0,0,0,464,463,1,0,0,
  	0,465,122,1,0,0,0,466,467,5,48,0,0,467,468,7,2,0,0,468,472,3,125,62,0,
  	469,471,3,127,63,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,
  	473,1,0,0,0,473,124,1,0,0,0,474,472,1,0,0,0,475,476,2,48,49,0,476,126,
  	1,0,0,0,477,479,5,95,0,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,
  	0,0,480,481,2,48,49,0,481,128,1,0,0,0,482,486,3,143,71,0,483,485,3,145,
  	72,0,484,483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,
  	487,130,1,0,0,0,488,486,1,0,0,0,489,495,5,34,0,0,490,494,8,3,0,0,491,
  	492,5,92,0,0,492,494,5,34,0,0,493,490,1,0,0,0,493,491,1,0,0,0,494,497,
  	1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,
  	0,498,499,5,34,0,0,499,132,1,0,0,0,500,501,5,47,0,0,501,506,5,42,0,0,
  	502,505,3,133,66,0,503,505,9,0,0,0,504,502,1,0,0,0,504,503,1,0,0,0,505,
  	508,1,0,0,0,506,507,1,0,0,0,506,504,1,0,0,0,507,509,1,0,0,0,508,506,1,
  	0,0,0,509,510,5,42,0,0,510,511,5,47,0,0,511,512,1,0,0,0,512,513,6,66,
  	0,0,513,134,1,0,0,0,514,515,5,47,0,0,515,520,5,47,0,0,516,519,3,135,67,
  	0,517,519,8,4,0,0,518,516,1,0,0,0,518,517,1,0,0,0,519,522,1,0,0,0,520,
  	518,1,0,0,0,520,521,1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,524,6,
  	67,0,0,524,136,1,0,0,0,525,526,7,5,0,0,526,527,1,0,0,0,527,528,6,68,0,
  	0,528,138,1,0,0,0,529,531,5,13,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,
  	532,1,0,0,0,532,533,5,10,0,0,533,534,1,0,0,0,534,535,6,69,0,0,535,140,
  	1,0,0,0,536,537,2,48,57,0,537,142,1,0,0,0,538,539,7,6,0,0,539,144,1,0,
  	0,0,540,544,3,143,71,0,541,544,7,7,0,0,542,544,3,143,71,0,543,540,1,0,
  	0,0,543,541,1,0,0,0,543,542,1,0,0,0,544,146,1,0,0,0,24,0,376,382,407,
  	412,420,428,437,442,452,457,460,464,472,478,486,493,495,504,506,518,520,
  	530,543,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsillexerLexerStaticData = staticData.release();
}

}

TsilLexer::TsilLexer(CharStream *input) : Lexer(input) {
  TsilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tsillexerLexerStaticData->atn, tsillexerLexerStaticData->decisionToDFA, tsillexerLexerStaticData->sharedContextCache);
}

TsilLexer::~TsilLexer() {
  delete _interpreter;
}

std::string TsilLexer::getGrammarFileName() const {
  return "TsilLexer.g4";
}

const std::vector<std::string>& TsilLexer::getRuleNames() const {
  return tsillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TsilLexer::getChannelNames() const {
  return tsillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TsilLexer::getModeNames() const {
  return tsillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TsilLexer::getVocabulary() const {
  return tsillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TsilLexer::getSerializedATN() const {
  return tsillexerLexerStaticData->serializedATN;
}

const atn::ATN& TsilLexer::getATN() const {
  return *tsillexerLexerStaticData->atn;
}




void TsilLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tsillexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tsillexerLexerOnceFlag, tsillexerLexerInitialize);
#endif
}
