
// Generated from TsilLexer.g4 by ANTLR 4.13.0


#include "TsilLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TsilLexerStaticData final {
  TsilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsilLexerStaticData(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData(TsilLexerStaticData&&) = delete;
  TsilLexerStaticData& operator=(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData& operator=(TsilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsillexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TsilLexerStaticData *tsillexerLexerStaticData = nullptr;

void tsillexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tsillexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tsillexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TsilLexerStaticData>(
    std::vector<std::string>{
      "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "KW_TRY", "KW_CATCH", "KW_THROW", "EQUAL", "GREATER", "LESSER", 
      "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", 
      "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", "TYPED_INTEGER", 
      "INTEGER", "INTEGER_START", "INTEGER_CONTINUE", "TYPED_FLOAT", "FLOAT", 
      "FLOAT_START", "FLOAT_CONTINUE", "HEX", "HEX_START", "HEX_CONTINUE", 
      "BIN", "BIN_START", "BIN_CONTINUE", "DIGIT", "ID", "ID_START", "ID_CONTINUE", 
      "STRING", "COMMENT", "LINE_COMMENT", "WS", "NL"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0446\\u0456\\u043B\\u044C'", "'\\u0434\\u0456\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0432\\u0456\\u0434\\u043A\\u043B\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u0432\\u0430\\u0440\\u0456\\u0430\\u0446\\u0456\\u044F'", "'\\u044F\\u043A'", 
      "'\\u0441\\u0435\\u043A\\u0446\\u0456\\u044F'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u043D\\u0435'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0456'", "'\\u0437\\u043C\\u0456\\u043D\\u043D\\u0430'", 
      "'\\u0441\\u0442\\u0430\\u043B\\u0430'", "'\\u0441\\u0438\\u043D\\u043E\\u043D\\u0456\\u043C'", 
      "'\\u0432\\u0438\\u043A\\u043E\\u043D\\u0430\\u0442\\u0438'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", 
      "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
      "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", 
      "'''", "'\"'", "'!'", "','", "';'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "KW_TRY", "KW_CATCH", "KW_THROW", "EQUAL", "GREATER", "LESSER", 
      "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", "AND", 
      "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", "TYPED_INTEGER", 
      "INTEGER", "TYPED_FLOAT", "FLOAT", "HEX", "BIN", "ID", "STRING", "COMMENT", 
      "LINE_COMMENT", "WS", "NL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,67,619,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
  	1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,
  	1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
  	1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
  	1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
  	1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,415,8,54,1,55,1,55,3,55,419,8,
  	55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,3,55,449,8,55,1,56,1,56,5,56,453,8,56,10,56,12,56,456,9,56,1,57,1,
  	57,1,58,3,58,461,8,58,1,58,1,58,1,59,1,59,3,59,467,8,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,497,8,59,
  	1,60,1,60,5,60,501,8,60,10,60,12,60,504,9,60,1,60,1,60,1,60,5,60,509,
  	8,60,10,60,12,60,512,9,60,1,61,1,61,1,62,3,62,517,8,62,1,62,1,62,1,63,
  	1,63,1,63,1,63,5,63,525,8,63,10,63,12,63,528,9,63,1,64,1,64,3,64,532,
  	8,64,1,65,3,65,535,8,65,1,65,1,65,3,65,539,8,65,1,66,1,66,1,66,1,66,5,
  	66,545,8,66,10,66,12,66,548,9,66,1,67,1,67,1,68,3,68,553,8,68,1,68,1,
  	68,1,69,1,69,1,70,1,70,5,70,561,8,70,10,70,12,70,564,9,70,1,71,1,71,1,
  	72,1,72,1,72,3,72,571,8,72,1,73,1,73,1,73,1,73,5,73,577,8,73,10,73,12,
  	73,580,9,73,1,73,1,73,1,74,1,74,1,74,1,74,5,74,588,8,74,10,74,12,74,591,
  	9,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,602,8,75,10,75,
  	12,75,605,9,75,1,75,1,75,1,76,1,76,1,76,1,76,1,77,3,77,614,8,77,1,77,
  	1,77,1,77,1,77,1,589,0,78,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
  	111,56,113,57,115,0,117,0,119,58,121,59,123,0,125,0,127,60,129,0,131,
  	0,133,61,135,0,137,0,139,0,141,62,143,0,145,0,147,63,149,64,151,65,153,
  	66,155,67,1,0,8,2,0,1064,1064,1096,1096,3,0,1040,1044,1072,1076,1168,
  	1169,2,0,1044,1044,1076,1076,9,0,65,90,95,95,97,122,1028,1028,1030,1031,
  	1040,1103,1108,1108,1110,1111,1168,1169,2,0,48,57,700,700,3,0,10,10,13,
  	13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,653,0,1,1,0,0,0,0,3,1,0,0,0,0,
  	5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
  	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
  	0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
  	1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
  	0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
  	0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
  	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
  	0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
  	0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
  	1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
  	1,0,0,0,0,113,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,127,1,0,0,0,0,133,
  	1,0,0,0,0,141,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,
  	1,0,0,0,0,155,1,0,0,0,1,157,1,0,0,0,3,162,1,0,0,0,5,166,1,0,0,0,7,171,
  	1,0,0,0,9,178,1,0,0,0,11,183,1,0,0,0,13,191,1,0,0,0,15,201,1,0,0,0,17,
  	211,1,0,0,0,19,220,1,0,0,0,21,223,1,0,0,0,23,230,1,0,0,0,25,236,1,0,0,
  	0,27,241,1,0,0,0,29,252,1,0,0,0,31,264,1,0,0,0,33,273,1,0,0,0,35,283,
  	1,0,0,0,37,291,1,0,0,0,39,294,1,0,0,0,41,298,1,0,0,0,43,300,1,0,0,0,45,
  	307,1,0,0,0,47,313,1,0,0,0,49,321,1,0,0,0,51,330,1,0,0,0,53,341,1,0,0,
  	0,55,349,1,0,0,0,57,356,1,0,0,0,59,358,1,0,0,0,61,360,1,0,0,0,63,362,
  	1,0,0,0,65,364,1,0,0,0,67,366,1,0,0,0,69,368,1,0,0,0,71,370,1,0,0,0,73,
  	372,1,0,0,0,75,374,1,0,0,0,77,376,1,0,0,0,79,378,1,0,0,0,81,380,1,0,0,
  	0,83,382,1,0,0,0,85,384,1,0,0,0,87,386,1,0,0,0,89,388,1,0,0,0,91,390,
  	1,0,0,0,93,392,1,0,0,0,95,394,1,0,0,0,97,396,1,0,0,0,99,398,1,0,0,0,101,
  	400,1,0,0,0,103,402,1,0,0,0,105,404,1,0,0,0,107,406,1,0,0,0,109,414,1,
  	0,0,0,111,416,1,0,0,0,113,450,1,0,0,0,115,457,1,0,0,0,117,460,1,0,0,0,
  	119,464,1,0,0,0,121,498,1,0,0,0,123,513,1,0,0,0,125,516,1,0,0,0,127,520,
  	1,0,0,0,129,531,1,0,0,0,131,534,1,0,0,0,133,540,1,0,0,0,135,549,1,0,0,
  	0,137,552,1,0,0,0,139,556,1,0,0,0,141,558,1,0,0,0,143,565,1,0,0,0,145,
  	570,1,0,0,0,147,572,1,0,0,0,149,583,1,0,0,0,151,597,1,0,0,0,153,608,1,
  	0,0,0,155,613,1,0,0,0,157,158,5,1094,0,0,158,159,5,1110,0,0,159,160,5,
  	1083,0,0,160,161,5,1100,0,0,161,2,1,0,0,0,162,163,5,1076,0,0,163,164,
  	5,1110,0,0,164,165,5,1103,0,0,165,4,1,0,0,0,166,167,5,1103,0,0,167,168,
  	5,1082,0,0,168,169,5,1097,0,0,169,170,5,1086,0,0,170,6,1,0,0,0,171,172,
  	5,1110,0,0,172,173,5,1085,0,0,173,174,5,1072,0,0,174,175,5,1082,0,0,175,
  	176,5,1096,0,0,176,177,5,1077,0,0,177,8,1,0,0,0,178,179,5,1087,0,0,179,
  	180,5,1086,0,0,180,181,5,1082,0,0,181,182,5,1080,0,0,182,10,1,0,0,0,183,
  	184,5,1074,0,0,184,185,5,1077,0,0,185,186,5,1088,0,0,186,187,5,1085,0,
  	0,187,188,5,1091,0,0,188,189,5,1090,0,0,189,190,5,1080,0,0,190,12,1,0,
  	0,0,191,192,5,1074,0,0,192,193,5,1110,0,0,193,194,5,1076,0,0,194,195,
  	5,1082,0,0,195,196,5,1083,0,0,196,197,5,1072,0,0,197,198,5,1089,0,0,198,
  	199,5,1090,0,0,199,200,5,1080,0,0,200,14,1,0,0,0,201,202,5,1089,0,0,202,
  	203,5,1090,0,0,203,204,5,1088,0,0,204,205,5,1091,0,0,205,206,5,1082,0,
  	0,206,207,5,1090,0,0,207,208,5,1091,0,0,208,209,5,1088,0,0,209,210,5,
  	1072,0,0,210,16,1,0,0,0,211,212,5,1074,0,0,212,213,5,1072,0,0,213,214,
  	5,1088,0,0,214,215,5,1110,0,0,215,216,5,1072,0,0,216,217,5,1094,0,0,217,
  	218,5,1110,0,0,218,219,5,1103,0,0,219,18,1,0,0,0,220,221,5,1103,0,0,221,
  	222,5,1082,0,0,222,20,1,0,0,0,223,224,5,1089,0,0,224,225,5,1077,0,0,225,
  	226,5,1082,0,0,226,227,5,1094,0,0,227,228,5,1110,0,0,228,229,5,1103,0,
  	0,229,22,1,0,0,0,230,231,5,1074,0,0,231,232,5,1079,0,0,232,233,5,1103,
  	0,0,233,234,5,1090,0,0,234,235,5,1080,0,0,235,24,1,0,0,0,236,237,5,1076,
  	0,0,237,238,5,1072,0,0,238,239,5,1090,0,0,239,240,5,1080,0,0,240,26,1,
  	0,0,0,241,242,5,1082,0,0,242,243,5,1086,0,0,243,244,5,1084,0,0,244,245,
  	5,1087,0,0,245,246,5,1086,0,0,246,247,5,1079,0,0,247,248,5,1080,0,0,248,
  	249,5,1094,0,0,249,250,5,1110,0,0,250,251,5,1103,0,0,251,28,1,0,0,0,252,
  	253,5,1074,0,0,253,254,5,1083,0,0,254,255,5,1072,0,0,255,256,5,1089,0,
  	0,256,257,5,1090,0,0,257,258,5,1080,0,0,258,259,5,1074,0,0,259,260,5,
  	1110,0,0,260,261,5,1089,0,0,261,262,5,1090,0,0,262,263,5,1100,0,0,263,
  	30,1,0,0,0,264,265,5,1079,0,0,265,266,5,1086,0,0,266,267,5,1074,0,0,267,
  	268,5,1085,0,0,268,269,5,1110,0,0,269,270,5,1096,0,0,270,271,5,1085,0,
  	0,271,272,5,1103,0,0,272,32,1,0,0,0,273,274,5,1074,0,0,274,275,5,1085,
  	0,0,275,276,5,1091,0,0,276,277,5,1090,0,0,277,278,5,1088,0,0,278,279,
  	5,1110,0,0,279,280,5,1096,0,0,280,281,5,1085,0,0,281,282,5,1103,0,0,282,
  	34,1,0,0,0,283,284,5,1084,0,0,284,285,5,1110,0,0,285,286,5,1089,0,0,286,
  	287,5,1094,0,0,287,288,5,1077,0,0,288,289,5,1074,0,0,289,290,5,1072,0,
  	0,290,36,1,0,0,0,291,292,5,1085,0,0,292,293,5,1077,0,0,293,38,1,0,0,0,
  	294,295,5,1072,0,0,295,296,5,1073,0,0,296,297,5,1086,0,0,297,40,1,0,0,
  	0,298,299,5,1110,0,0,299,42,1,0,0,0,300,301,5,1079,0,0,301,302,5,1084,
  	0,0,302,303,5,1110,0,0,303,304,5,1085,0,0,304,305,5,1085,0,0,305,306,
  	5,1072,0,0,306,44,1,0,0,0,307,308,5,1089,0,0,308,309,5,1090,0,0,309,310,
  	5,1072,0,0,310,311,5,1083,0,0,311,312,5,1072,0,0,312,46,1,0,0,0,313,314,
  	5,1089,0,0,314,315,5,1080,0,0,315,316,5,1085,0,0,316,317,5,1086,0,0,317,
  	318,5,1085,0,0,318,319,5,1110,0,0,319,320,5,1084,0,0,320,48,1,0,0,0,321,
  	322,5,1074,0,0,322,323,5,1080,0,0,323,324,5,1082,0,0,324,325,5,1086,0,
  	0,325,326,5,1085,0,0,326,327,5,1072,0,0,327,328,5,1090,0,0,328,329,5,
  	1080,0,0,329,50,1,0,0,0,330,331,5,1089,0,0,331,332,5,1087,0,0,332,333,
  	5,1088,0,0,333,334,5,1086,0,0,334,335,5,1073,0,0,335,336,5,1091,0,0,336,
  	337,5,1074,0,0,337,338,5,1072,0,0,338,339,5,1090,0,0,339,340,5,1080,0,
  	0,340,52,1,0,0,0,341,342,5,1079,0,0,342,343,5,1083,0,0,343,344,5,1086,
  	0,0,344,345,5,1074,0,0,345,346,5,1080,0,0,346,347,5,1090,0,0,347,348,
  	5,1080,0,0,348,54,1,0,0,0,349,350,5,1074,0,0,350,351,5,1087,0,0,351,352,
  	5,1072,0,0,352,353,5,1089,0,0,353,354,5,1090,0,0,354,355,5,1080,0,0,355,
  	56,1,0,0,0,356,357,5,61,0,0,357,58,1,0,0,0,358,359,5,62,0,0,359,60,1,
  	0,0,0,360,361,5,60,0,0,361,62,1,0,0,0,362,363,5,46,0,0,363,64,1,0,0,0,
  	364,365,5,43,0,0,365,66,1,0,0,0,366,367,5,45,0,0,367,68,1,0,0,0,368,369,
  	5,42,0,0,369,70,1,0,0,0,370,371,5,47,0,0,371,72,1,0,0,0,372,373,5,37,
  	0,0,373,74,1,0,0,0,374,375,5,94,0,0,375,76,1,0,0,0,376,377,5,38,0,0,377,
  	78,1,0,0,0,378,379,5,124,0,0,379,80,1,0,0,0,380,381,5,40,0,0,381,82,1,
  	0,0,0,382,383,5,41,0,0,383,84,1,0,0,0,384,385,5,91,0,0,385,86,1,0,0,0,
  	386,387,5,93,0,0,387,88,1,0,0,0,388,389,5,63,0,0,389,90,1,0,0,0,390,391,
  	5,58,0,0,391,92,1,0,0,0,392,393,5,126,0,0,393,94,1,0,0,0,394,395,5,39,
  	0,0,395,96,1,0,0,0,396,397,5,34,0,0,397,98,1,0,0,0,398,399,5,33,0,0,399,
  	100,1,0,0,0,400,401,5,44,0,0,401,102,1,0,0,0,402,403,5,59,0,0,403,104,
  	1,0,0,0,404,405,5,123,0,0,405,106,1,0,0,0,406,407,5,125,0,0,407,108,1,
  	0,0,0,408,415,3,111,55,0,409,415,3,113,56,0,410,415,3,119,59,0,411,415,
  	3,121,60,0,412,415,3,127,63,0,413,415,3,133,66,0,414,408,1,0,0,0,414,
  	409,1,0,0,0,414,410,1,0,0,0,414,411,1,0,0,0,414,412,1,0,0,0,414,413,1,
  	0,0,0,415,110,1,0,0,0,416,418,3,113,56,0,417,419,5,95,0,0,418,417,1,0,
  	0,0,418,419,1,0,0,0,419,448,1,0,0,0,420,421,5,1094,0,0,421,449,5,56,0,
  	0,422,423,5,1094,0,0,423,424,5,49,0,0,424,449,5,54,0,0,425,426,5,1094,
  	0,0,426,427,5,51,0,0,427,449,5,50,0,0,428,429,5,1094,0,0,429,430,5,54,
  	0,0,430,449,5,52,0,0,431,432,5,1087,0,0,432,449,5,56,0,0,433,434,5,1087,
  	0,0,434,435,5,49,0,0,435,449,5,54,0,0,436,437,5,1087,0,0,437,438,5,51,
  	0,0,438,449,5,50,0,0,439,440,5,1087,0,0,440,441,5,54,0,0,441,449,5,52,
  	0,0,442,443,5,1076,0,0,443,444,5,51,0,0,444,449,5,50,0,0,445,446,5,1076,
  	0,0,446,447,5,54,0,0,447,449,5,52,0,0,448,420,1,0,0,0,448,422,1,0,0,0,
  	448,425,1,0,0,0,448,428,1,0,0,0,448,431,1,0,0,0,448,433,1,0,0,0,448,436,
  	1,0,0,0,448,439,1,0,0,0,448,442,1,0,0,0,448,445,1,0,0,0,449,112,1,0,0,
  	0,450,454,3,115,57,0,451,453,3,117,58,0,452,451,1,0,0,0,453,456,1,0,0,
  	0,454,452,1,0,0,0,454,455,1,0,0,0,455,114,1,0,0,0,456,454,1,0,0,0,457,
  	458,3,139,69,0,458,116,1,0,0,0,459,461,5,95,0,0,460,459,1,0,0,0,460,461,
  	1,0,0,0,461,462,1,0,0,0,462,463,3,139,69,0,463,118,1,0,0,0,464,466,3,
  	121,60,0,465,467,5,95,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,496,1,0,
  	0,0,468,469,5,1094,0,0,469,497,5,56,0,0,470,471,5,1094,0,0,471,472,5,
  	49,0,0,472,497,5,54,0,0,473,474,5,1094,0,0,474,475,5,51,0,0,475,497,5,
  	50,0,0,476,477,5,1094,0,0,477,478,5,54,0,0,478,497,5,52,0,0,479,480,5,
  	1087,0,0,480,497,5,56,0,0,481,482,5,1087,0,0,482,483,5,49,0,0,483,497,
  	5,54,0,0,484,485,5,1087,0,0,485,486,5,51,0,0,486,497,5,50,0,0,487,488,
  	5,1087,0,0,488,489,5,54,0,0,489,497,5,52,0,0,490,491,5,1076,0,0,491,492,
  	5,51,0,0,492,497,5,50,0,0,493,494,5,1076,0,0,494,495,5,54,0,0,495,497,
  	5,52,0,0,496,468,1,0,0,0,496,470,1,0,0,0,496,473,1,0,0,0,496,476,1,0,
  	0,0,496,479,1,0,0,0,496,481,1,0,0,0,496,484,1,0,0,0,496,487,1,0,0,0,496,
  	490,1,0,0,0,496,493,1,0,0,0,497,120,1,0,0,0,498,502,3,123,61,0,499,501,
  	3,125,62,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,
  	0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,506,5,46,0,0,506,510,3,123,
  	61,0,507,509,3,125,62,0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,
  	0,510,511,1,0,0,0,511,122,1,0,0,0,512,510,1,0,0,0,513,514,3,139,69,0,
  	514,124,1,0,0,0,515,517,5,95,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,
  	518,1,0,0,0,518,519,3,139,69,0,519,126,1,0,0,0,520,521,5,48,0,0,521,522,
  	7,0,0,0,522,526,3,129,64,0,523,525,3,131,65,0,524,523,1,0,0,0,525,528,
  	1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,128,1,0,0,0,528,526,1,0,0,
  	0,529,532,7,1,0,0,530,532,3,139,69,0,531,529,1,0,0,0,531,530,1,0,0,0,
  	532,130,1,0,0,0,533,535,5,95,0,0,534,533,1,0,0,0,534,535,1,0,0,0,535,
  	538,1,0,0,0,536,539,7,1,0,0,537,539,3,139,69,0,538,536,1,0,0,0,538,537,
  	1,0,0,0,539,132,1,0,0,0,540,541,5,48,0,0,541,542,7,2,0,0,542,546,3,135,
  	67,0,543,545,3,137,68,0,544,543,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,
  	0,546,547,1,0,0,0,547,134,1,0,0,0,548,546,1,0,0,0,549,550,2,48,49,0,550,
  	136,1,0,0,0,551,553,5,95,0,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,
  	1,0,0,0,554,555,2,48,49,0,555,138,1,0,0,0,556,557,2,48,57,0,557,140,1,
  	0,0,0,558,562,3,143,71,0,559,561,3,145,72,0,560,559,1,0,0,0,561,564,1,
  	0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,142,1,0,0,0,564,562,1,0,0,0,
  	565,566,7,3,0,0,566,144,1,0,0,0,567,571,3,143,71,0,568,571,7,4,0,0,569,
  	571,3,143,71,0,570,567,1,0,0,0,570,568,1,0,0,0,570,569,1,0,0,0,571,146,
  	1,0,0,0,572,578,5,34,0,0,573,577,8,5,0,0,574,575,5,92,0,0,575,577,5,34,
  	0,0,576,573,1,0,0,0,576,574,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,
  	579,1,0,0,0,579,581,1,0,0,0,580,578,1,0,0,0,581,582,5,34,0,0,582,148,
  	1,0,0,0,583,584,5,47,0,0,584,589,5,42,0,0,585,588,3,149,74,0,586,588,
  	9,0,0,0,587,585,1,0,0,0,587,586,1,0,0,0,588,591,1,0,0,0,589,590,1,0,0,
  	0,589,587,1,0,0,0,590,592,1,0,0,0,591,589,1,0,0,0,592,593,5,42,0,0,593,
  	594,5,47,0,0,594,595,1,0,0,0,595,596,6,74,0,0,596,150,1,0,0,0,597,598,
  	5,47,0,0,598,603,5,47,0,0,599,602,3,151,75,0,600,602,8,6,0,0,601,599,
  	1,0,0,0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,
  	0,604,606,1,0,0,0,605,603,1,0,0,0,606,607,6,75,0,0,607,152,1,0,0,0,608,
  	609,7,7,0,0,609,610,1,0,0,0,610,611,6,76,0,0,611,154,1,0,0,0,612,614,
  	5,13,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,10,
  	0,0,616,617,1,0,0,0,617,618,6,77,0,0,618,156,1,0,0,0,26,0,414,418,448,
  	454,460,466,496,502,510,516,526,531,534,538,546,552,562,570,576,578,587,
  	589,601,603,613,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsillexerLexerStaticData = staticData.release();
}

}

TsilLexer::TsilLexer(CharStream *input) : Lexer(input) {
  TsilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tsillexerLexerStaticData->atn, tsillexerLexerStaticData->decisionToDFA, tsillexerLexerStaticData->sharedContextCache);
}

TsilLexer::~TsilLexer() {
  delete _interpreter;
}

std::string TsilLexer::getGrammarFileName() const {
  return "TsilLexer.g4";
}

const std::vector<std::string>& TsilLexer::getRuleNames() const {
  return tsillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TsilLexer::getChannelNames() const {
  return tsillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TsilLexer::getModeNames() const {
  return tsillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TsilLexer::getVocabulary() const {
  return tsillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TsilLexer::getSerializedATN() const {
  return tsillexerLexerStaticData->serializedATN;
}

const atn::ATN& TsilLexer::getATN() const {
  return *tsillexerLexerStaticData->atn;
}




void TsilLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tsillexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tsillexerLexerOnceFlag, tsillexerLexerInitialize);
#endif
}
