
// Generated from TsilLexer.g4 by ANTLR 4.13.0


#include "TsilLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TsilLexerStaticData final {
  TsilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsilLexerStaticData(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData(TsilLexerStaticData&&) = delete;
  TsilLexerStaticData& operator=(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData& operator=(TsilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsillexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TsilLexerStaticData *tsillexerLexerStaticData = nullptr;

void tsillexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tsillexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tsillexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TsilLexerStaticData>(
    std::vector<std::string>{
      "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "KW_TRY", "KW_CATCH", "KW_THROW", "KW_GOTO", "EQUAL", "GREATER", 
      "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", 
      "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", "TYPED_INTEGER", 
      "INTEGER", "INTEGER_START", "INTEGER_CONTINUE", "TYPED_FLOAT", "FLOAT", 
      "FLOAT_START", "FLOAT_CONTINUE", "HEX", "HEX_START", "HEX_CONTINUE", 
      "BIN", "BIN_START", "BIN_CONTINUE", "DIGIT", "ID", "ID_START", "ID_CONTINUE", 
      "STRING", "COMMENT", "LINE_COMMENT", "WS", "NL"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0446\\u0456\\u043B\\u044C'", "'\\u0434\\u0456\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0432\\u0456\\u0434\\u043A\\u043B\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u0432\\u0430\\u0440\\u0456\\u0430\\u0446\\u0456\\u044F'", "'\\u044F\\u043A'", 
      "'\\u0441\\u0435\\u043A\\u0446\\u0456\\u044F'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u043D\\u0435'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0456'", "'\\u0437\\u043C\\u0456\\u043D\\u043D\\u0430'", 
      "'\\u0441\\u0442\\u0430\\u043B\\u0430'", "'\\u0441\\u0438\\u043D\\u043E\\u043D\\u0456\\u043C'", 
      "'\\u0432\\u0438\\u043A\\u043E\\u043D\\u0430\\u0442\\u0438'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0438\\u0431\\u043D\\u0443\\u0442\\u0438'", 
      "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
      "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", 
      "'''", "'\"'", "'!'", "','", "';'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_IMMUT", "KW_SYNONYM", 
      "KW_EXEC", "KW_TRY", "KW_CATCH", "KW_THROW", "KW_GOTO", "EQUAL", "GREATER", 
      "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", "POWER", 
      "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", "BRACKET_CLOSE", 
      "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", "EXCLAMATION", 
      "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", "TYPED_INTEGER", 
      "INTEGER", "TYPED_FLOAT", "FLOAT", "HEX", "BIN", "ID", "STRING", "COMMENT", 
      "LINE_COMMENT", "WS", "NL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,68,633,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
  	2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
  	1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
  	1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
  	1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
  	1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
  	1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,
  	1,55,1,55,1,55,1,55,1,55,3,55,427,8,55,1,56,1,56,3,56,431,8,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,
  	56,462,8,56,1,57,1,57,5,57,466,8,57,10,57,12,57,469,9,57,1,58,1,58,1,
  	59,3,59,474,8,59,1,59,1,59,1,60,1,60,3,60,480,8,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,511,8,60,
  	1,61,1,61,5,61,515,8,61,10,61,12,61,518,9,61,1,61,1,61,1,61,5,61,523,
  	8,61,10,61,12,61,526,9,61,1,62,1,62,1,63,3,63,531,8,63,1,63,1,63,1,64,
  	1,64,1,64,1,64,5,64,539,8,64,10,64,12,64,542,9,64,1,65,1,65,3,65,546,
  	8,65,1,66,3,66,549,8,66,1,66,1,66,3,66,553,8,66,1,67,1,67,1,67,1,67,5,
  	67,559,8,67,10,67,12,67,562,9,67,1,68,1,68,1,69,3,69,567,8,69,1,69,1,
  	69,1,70,1,70,1,71,1,71,5,71,575,8,71,10,71,12,71,578,9,71,1,72,1,72,1,
  	73,1,73,1,73,3,73,585,8,73,1,74,1,74,1,74,1,74,5,74,591,8,74,10,74,12,
  	74,594,9,74,1,74,1,74,1,75,1,75,1,75,1,75,5,75,602,8,75,10,75,12,75,605,
  	9,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,5,76,616,8,76,10,76,
  	12,76,619,9,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,3,78,628,8,78,1,78,
  	1,78,1,78,1,78,1,603,0,79,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
  	111,56,113,57,115,58,117,0,119,0,121,59,123,60,125,0,127,0,129,61,131,
  	0,133,0,135,62,137,0,139,0,141,0,143,63,145,0,147,0,149,64,151,65,153,
  	66,155,67,157,68,1,0,9,3,0,1044,1044,1055,1055,1062,1062,2,0,1064,1064,
  	1096,1096,2,0,1040,1045,1072,1077,2,0,1044,1044,1076,1076,9,0,65,90,95,
  	95,97,122,1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,
  	2,0,48,57,700,700,3,0,10,10,13,13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,
  	669,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
  	0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
  	107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,
  	121,1,0,0,0,0,123,1,0,0,0,0,129,1,0,0,0,0,135,1,0,0,0,0,143,1,0,0,0,0,
  	149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,1,
  	159,1,0,0,0,3,164,1,0,0,0,5,168,1,0,0,0,7,173,1,0,0,0,9,180,1,0,0,0,11,
  	185,1,0,0,0,13,193,1,0,0,0,15,203,1,0,0,0,17,213,1,0,0,0,19,222,1,0,0,
  	0,21,225,1,0,0,0,23,232,1,0,0,0,25,238,1,0,0,0,27,243,1,0,0,0,29,254,
  	1,0,0,0,31,266,1,0,0,0,33,275,1,0,0,0,35,285,1,0,0,0,37,293,1,0,0,0,39,
  	296,1,0,0,0,41,300,1,0,0,0,43,302,1,0,0,0,45,309,1,0,0,0,47,315,1,0,0,
  	0,49,323,1,0,0,0,51,332,1,0,0,0,53,343,1,0,0,0,55,351,1,0,0,0,57,358,
  	1,0,0,0,59,368,1,0,0,0,61,370,1,0,0,0,63,372,1,0,0,0,65,374,1,0,0,0,67,
  	376,1,0,0,0,69,378,1,0,0,0,71,380,1,0,0,0,73,382,1,0,0,0,75,384,1,0,0,
  	0,77,386,1,0,0,0,79,388,1,0,0,0,81,390,1,0,0,0,83,392,1,0,0,0,85,394,
  	1,0,0,0,87,396,1,0,0,0,89,398,1,0,0,0,91,400,1,0,0,0,93,402,1,0,0,0,95,
  	404,1,0,0,0,97,406,1,0,0,0,99,408,1,0,0,0,101,410,1,0,0,0,103,412,1,0,
  	0,0,105,414,1,0,0,0,107,416,1,0,0,0,109,418,1,0,0,0,111,426,1,0,0,0,113,
  	428,1,0,0,0,115,463,1,0,0,0,117,470,1,0,0,0,119,473,1,0,0,0,121,477,1,
  	0,0,0,123,512,1,0,0,0,125,527,1,0,0,0,127,530,1,0,0,0,129,534,1,0,0,0,
  	131,545,1,0,0,0,133,548,1,0,0,0,135,554,1,0,0,0,137,563,1,0,0,0,139,566,
  	1,0,0,0,141,570,1,0,0,0,143,572,1,0,0,0,145,579,1,0,0,0,147,584,1,0,0,
  	0,149,586,1,0,0,0,151,597,1,0,0,0,153,611,1,0,0,0,155,622,1,0,0,0,157,
  	627,1,0,0,0,159,160,5,1094,0,0,160,161,5,1110,0,0,161,162,5,1083,0,0,
  	162,163,5,1100,0,0,163,2,1,0,0,0,164,165,5,1076,0,0,165,166,5,1110,0,
  	0,166,167,5,1103,0,0,167,4,1,0,0,0,168,169,5,1103,0,0,169,170,5,1082,
  	0,0,170,171,5,1097,0,0,171,172,5,1086,0,0,172,6,1,0,0,0,173,174,5,1110,
  	0,0,174,175,5,1085,0,0,175,176,5,1072,0,0,176,177,5,1082,0,0,177,178,
  	5,1096,0,0,178,179,5,1077,0,0,179,8,1,0,0,0,180,181,5,1087,0,0,181,182,
  	5,1086,0,0,182,183,5,1082,0,0,183,184,5,1080,0,0,184,10,1,0,0,0,185,186,
  	5,1074,0,0,186,187,5,1077,0,0,187,188,5,1088,0,0,188,189,5,1085,0,0,189,
  	190,5,1091,0,0,190,191,5,1090,0,0,191,192,5,1080,0,0,192,12,1,0,0,0,193,
  	194,5,1074,0,0,194,195,5,1110,0,0,195,196,5,1076,0,0,196,197,5,1082,0,
  	0,197,198,5,1083,0,0,198,199,5,1072,0,0,199,200,5,1089,0,0,200,201,5,
  	1090,0,0,201,202,5,1080,0,0,202,14,1,0,0,0,203,204,5,1089,0,0,204,205,
  	5,1090,0,0,205,206,5,1088,0,0,206,207,5,1091,0,0,207,208,5,1082,0,0,208,
  	209,5,1090,0,0,209,210,5,1091,0,0,210,211,5,1088,0,0,211,212,5,1072,0,
  	0,212,16,1,0,0,0,213,214,5,1074,0,0,214,215,5,1072,0,0,215,216,5,1088,
  	0,0,216,217,5,1110,0,0,217,218,5,1072,0,0,218,219,5,1094,0,0,219,220,
  	5,1110,0,0,220,221,5,1103,0,0,221,18,1,0,0,0,222,223,5,1103,0,0,223,224,
  	5,1082,0,0,224,20,1,0,0,0,225,226,5,1089,0,0,226,227,5,1077,0,0,227,228,
  	5,1082,0,0,228,229,5,1094,0,0,229,230,5,1110,0,0,230,231,5,1103,0,0,231,
  	22,1,0,0,0,232,233,5,1074,0,0,233,234,5,1079,0,0,234,235,5,1103,0,0,235,
  	236,5,1090,0,0,236,237,5,1080,0,0,237,24,1,0,0,0,238,239,5,1076,0,0,239,
  	240,5,1072,0,0,240,241,5,1090,0,0,241,242,5,1080,0,0,242,26,1,0,0,0,243,
  	244,5,1082,0,0,244,245,5,1086,0,0,245,246,5,1084,0,0,246,247,5,1087,0,
  	0,247,248,5,1086,0,0,248,249,5,1079,0,0,249,250,5,1080,0,0,250,251,5,
  	1094,0,0,251,252,5,1110,0,0,252,253,5,1103,0,0,253,28,1,0,0,0,254,255,
  	5,1074,0,0,255,256,5,1083,0,0,256,257,5,1072,0,0,257,258,5,1089,0,0,258,
  	259,5,1090,0,0,259,260,5,1080,0,0,260,261,5,1074,0,0,261,262,5,1110,0,
  	0,262,263,5,1089,0,0,263,264,5,1090,0,0,264,265,5,1100,0,0,265,30,1,0,
  	0,0,266,267,5,1079,0,0,267,268,5,1086,0,0,268,269,5,1074,0,0,269,270,
  	5,1085,0,0,270,271,5,1110,0,0,271,272,5,1096,0,0,272,273,5,1085,0,0,273,
  	274,5,1103,0,0,274,32,1,0,0,0,275,276,5,1074,0,0,276,277,5,1085,0,0,277,
  	278,5,1091,0,0,278,279,5,1090,0,0,279,280,5,1088,0,0,280,281,5,1110,0,
  	0,281,282,5,1096,0,0,282,283,5,1085,0,0,283,284,5,1103,0,0,284,34,1,0,
  	0,0,285,286,5,1084,0,0,286,287,5,1110,0,0,287,288,5,1089,0,0,288,289,
  	5,1094,0,0,289,290,5,1077,0,0,290,291,5,1074,0,0,291,292,5,1072,0,0,292,
  	36,1,0,0,0,293,294,5,1085,0,0,294,295,5,1077,0,0,295,38,1,0,0,0,296,297,
  	5,1072,0,0,297,298,5,1073,0,0,298,299,5,1086,0,0,299,40,1,0,0,0,300,301,
  	5,1110,0,0,301,42,1,0,0,0,302,303,5,1079,0,0,303,304,5,1084,0,0,304,305,
  	5,1110,0,0,305,306,5,1085,0,0,306,307,5,1085,0,0,307,308,5,1072,0,0,308,
  	44,1,0,0,0,309,310,5,1089,0,0,310,311,5,1090,0,0,311,312,5,1072,0,0,312,
  	313,5,1083,0,0,313,314,5,1072,0,0,314,46,1,0,0,0,315,316,5,1089,0,0,316,
  	317,5,1080,0,0,317,318,5,1085,0,0,318,319,5,1086,0,0,319,320,5,1085,0,
  	0,320,321,5,1110,0,0,321,322,5,1084,0,0,322,48,1,0,0,0,323,324,5,1074,
  	0,0,324,325,5,1080,0,0,325,326,5,1082,0,0,326,327,5,1086,0,0,327,328,
  	5,1085,0,0,328,329,5,1072,0,0,329,330,5,1090,0,0,330,331,5,1080,0,0,331,
  	50,1,0,0,0,332,333,5,1089,0,0,333,334,5,1087,0,0,334,335,5,1088,0,0,335,
  	336,5,1086,0,0,336,337,5,1073,0,0,337,338,5,1091,0,0,338,339,5,1074,0,
  	0,339,340,5,1072,0,0,340,341,5,1090,0,0,341,342,5,1080,0,0,342,52,1,0,
  	0,0,343,344,5,1079,0,0,344,345,5,1083,0,0,345,346,5,1086,0,0,346,347,
  	5,1074,0,0,347,348,5,1080,0,0,348,349,5,1090,0,0,349,350,5,1080,0,0,350,
  	54,1,0,0,0,351,352,5,1074,0,0,352,353,5,1087,0,0,353,354,5,1072,0,0,354,
  	355,5,1089,0,0,355,356,5,1090,0,0,356,357,5,1080,0,0,357,56,1,0,0,0,358,
  	359,5,1089,0,0,359,360,5,1090,0,0,360,361,5,1088,0,0,361,362,5,1080,0,
  	0,362,363,5,1073,0,0,363,364,5,1085,0,0,364,365,5,1091,0,0,365,366,5,
  	1090,0,0,366,367,5,1080,0,0,367,58,1,0,0,0,368,369,5,61,0,0,369,60,1,
  	0,0,0,370,371,5,62,0,0,371,62,1,0,0,0,372,373,5,60,0,0,373,64,1,0,0,0,
  	374,375,5,46,0,0,375,66,1,0,0,0,376,377,5,43,0,0,377,68,1,0,0,0,378,379,
  	5,45,0,0,379,70,1,0,0,0,380,381,5,42,0,0,381,72,1,0,0,0,382,383,5,47,
  	0,0,383,74,1,0,0,0,384,385,5,37,0,0,385,76,1,0,0,0,386,387,5,94,0,0,387,
  	78,1,0,0,0,388,389,5,38,0,0,389,80,1,0,0,0,390,391,5,124,0,0,391,82,1,
  	0,0,0,392,393,5,40,0,0,393,84,1,0,0,0,394,395,5,41,0,0,395,86,1,0,0,0,
  	396,397,5,91,0,0,397,88,1,0,0,0,398,399,5,93,0,0,399,90,1,0,0,0,400,401,
  	5,63,0,0,401,92,1,0,0,0,402,403,5,58,0,0,403,94,1,0,0,0,404,405,5,126,
  	0,0,405,96,1,0,0,0,406,407,5,39,0,0,407,98,1,0,0,0,408,409,5,34,0,0,409,
  	100,1,0,0,0,410,411,5,33,0,0,411,102,1,0,0,0,412,413,5,44,0,0,413,104,
  	1,0,0,0,414,415,5,59,0,0,415,106,1,0,0,0,416,417,5,123,0,0,417,108,1,
  	0,0,0,418,419,5,125,0,0,419,110,1,0,0,0,420,427,3,113,56,0,421,427,3,
  	115,57,0,422,427,3,121,60,0,423,427,3,123,61,0,424,427,3,129,64,0,425,
  	427,3,135,67,0,426,420,1,0,0,0,426,421,1,0,0,0,426,422,1,0,0,0,426,423,
  	1,0,0,0,426,424,1,0,0,0,426,425,1,0,0,0,427,112,1,0,0,0,428,430,3,115,
  	57,0,429,431,5,95,0,0,430,429,1,0,0,0,430,431,1,0,0,0,431,461,1,0,0,0,
  	432,433,5,1094,0,0,433,462,5,56,0,0,434,435,5,1094,0,0,435,436,5,49,0,
  	0,436,462,5,54,0,0,437,438,5,1094,0,0,438,439,5,51,0,0,439,462,5,50,0,
  	0,440,441,5,1094,0,0,441,442,5,54,0,0,442,462,5,52,0,0,443,444,5,1087,
  	0,0,444,462,5,56,0,0,445,446,5,1087,0,0,446,447,5,49,0,0,447,462,5,54,
  	0,0,448,449,5,1087,0,0,449,450,5,51,0,0,450,462,5,50,0,0,451,452,5,1087,
  	0,0,452,453,5,54,0,0,453,462,5,52,0,0,454,455,5,1076,0,0,455,456,5,51,
  	0,0,456,462,5,50,0,0,457,458,5,1076,0,0,458,459,5,54,0,0,459,462,5,52,
  	0,0,460,462,7,0,0,0,461,432,1,0,0,0,461,434,1,0,0,0,461,437,1,0,0,0,461,
  	440,1,0,0,0,461,443,1,0,0,0,461,445,1,0,0,0,461,448,1,0,0,0,461,451,1,
  	0,0,0,461,454,1,0,0,0,461,457,1,0,0,0,461,460,1,0,0,0,462,114,1,0,0,0,
  	463,467,3,117,58,0,464,466,3,119,59,0,465,464,1,0,0,0,466,469,1,0,0,0,
  	467,465,1,0,0,0,467,468,1,0,0,0,468,116,1,0,0,0,469,467,1,0,0,0,470,471,
  	3,141,70,0,471,118,1,0,0,0,472,474,5,95,0,0,473,472,1,0,0,0,473,474,1,
  	0,0,0,474,475,1,0,0,0,475,476,3,141,70,0,476,120,1,0,0,0,477,479,3,123,
  	61,0,478,480,5,95,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,510,1,0,0,0,
  	481,482,5,1094,0,0,482,511,5,56,0,0,483,484,5,1094,0,0,484,485,5,49,0,
  	0,485,511,5,54,0,0,486,487,5,1094,0,0,487,488,5,51,0,0,488,511,5,50,0,
  	0,489,490,5,1094,0,0,490,491,5,54,0,0,491,511,5,52,0,0,492,493,5,1087,
  	0,0,493,511,5,56,0,0,494,495,5,1087,0,0,495,496,5,49,0,0,496,511,5,54,
  	0,0,497,498,5,1087,0,0,498,499,5,51,0,0,499,511,5,50,0,0,500,501,5,1087,
  	0,0,501,502,5,54,0,0,502,511,5,52,0,0,503,504,5,1076,0,0,504,505,5,51,
  	0,0,505,511,5,50,0,0,506,507,5,1076,0,0,507,508,5,54,0,0,508,511,5,52,
  	0,0,509,511,7,0,0,0,510,481,1,0,0,0,510,483,1,0,0,0,510,486,1,0,0,0,510,
  	489,1,0,0,0,510,492,1,0,0,0,510,494,1,0,0,0,510,497,1,0,0,0,510,500,1,
  	0,0,0,510,503,1,0,0,0,510,506,1,0,0,0,510,509,1,0,0,0,511,122,1,0,0,0,
  	512,516,3,125,62,0,513,515,3,127,63,0,514,513,1,0,0,0,515,518,1,0,0,0,
  	516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,0,0,519,520,
  	5,46,0,0,520,524,3,125,62,0,521,523,3,127,63,0,522,521,1,0,0,0,523,526,
  	1,0,0,0,524,522,1,0,0,0,524,525,1,0,0,0,525,124,1,0,0,0,526,524,1,0,0,
  	0,527,528,3,141,70,0,528,126,1,0,0,0,529,531,5,95,0,0,530,529,1,0,0,0,
  	530,531,1,0,0,0,531,532,1,0,0,0,532,533,3,141,70,0,533,128,1,0,0,0,534,
  	535,5,48,0,0,535,536,7,1,0,0,536,540,3,131,65,0,537,539,3,133,66,0,538,
  	537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,130,1,
  	0,0,0,542,540,1,0,0,0,543,546,7,2,0,0,544,546,3,141,70,0,545,543,1,0,
  	0,0,545,544,1,0,0,0,546,132,1,0,0,0,547,549,5,95,0,0,548,547,1,0,0,0,
  	548,549,1,0,0,0,549,552,1,0,0,0,550,553,7,2,0,0,551,553,3,141,70,0,552,
  	550,1,0,0,0,552,551,1,0,0,0,553,134,1,0,0,0,554,555,5,48,0,0,555,556,
  	7,3,0,0,556,560,3,137,68,0,557,559,3,139,69,0,558,557,1,0,0,0,559,562,
  	1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,136,1,0,0,0,562,560,1,0,0,
  	0,563,564,2,48,49,0,564,138,1,0,0,0,565,567,5,95,0,0,566,565,1,0,0,0,
  	566,567,1,0,0,0,567,568,1,0,0,0,568,569,2,48,49,0,569,140,1,0,0,0,570,
  	571,2,48,57,0,571,142,1,0,0,0,572,576,3,145,72,0,573,575,3,147,73,0,574,
  	573,1,0,0,0,575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,144,1,
  	0,0,0,578,576,1,0,0,0,579,580,7,4,0,0,580,146,1,0,0,0,581,585,3,145,72,
  	0,582,585,7,5,0,0,583,585,3,145,72,0,584,581,1,0,0,0,584,582,1,0,0,0,
  	584,583,1,0,0,0,585,148,1,0,0,0,586,592,5,34,0,0,587,591,8,6,0,0,588,
  	589,5,92,0,0,589,591,5,34,0,0,590,587,1,0,0,0,590,588,1,0,0,0,591,594,
  	1,0,0,0,592,590,1,0,0,0,592,593,1,0,0,0,593,595,1,0,0,0,594,592,1,0,0,
  	0,595,596,5,34,0,0,596,150,1,0,0,0,597,598,5,47,0,0,598,603,5,42,0,0,
  	599,602,3,151,75,0,600,602,9,0,0,0,601,599,1,0,0,0,601,600,1,0,0,0,602,
  	605,1,0,0,0,603,604,1,0,0,0,603,601,1,0,0,0,604,606,1,0,0,0,605,603,1,
  	0,0,0,606,607,5,42,0,0,607,608,5,47,0,0,608,609,1,0,0,0,609,610,6,75,
  	0,0,610,152,1,0,0,0,611,612,5,47,0,0,612,617,5,47,0,0,613,616,3,153,76,
  	0,614,616,8,7,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,619,1,0,0,0,617,
  	615,1,0,0,0,617,618,1,0,0,0,618,620,1,0,0,0,619,617,1,0,0,0,620,621,6,
  	76,0,0,621,154,1,0,0,0,622,623,7,8,0,0,623,624,1,0,0,0,624,625,6,77,0,
  	0,625,156,1,0,0,0,626,628,5,13,0,0,627,626,1,0,0,0,627,628,1,0,0,0,628,
  	629,1,0,0,0,629,630,5,10,0,0,630,631,1,0,0,0,631,632,6,78,0,0,632,158,
  	1,0,0,0,26,0,426,430,461,467,473,479,510,516,524,530,540,545,548,552,
  	560,566,576,584,590,592,601,603,615,617,627,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsillexerLexerStaticData = staticData.release();
}

}

TsilLexer::TsilLexer(CharStream *input) : Lexer(input) {
  TsilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tsillexerLexerStaticData->atn, tsillexerLexerStaticData->decisionToDFA, tsillexerLexerStaticData->sharedContextCache);
}

TsilLexer::~TsilLexer() {
  delete _interpreter;
}

std::string TsilLexer::getGrammarFileName() const {
  return "TsilLexer.g4";
}

const std::vector<std::string>& TsilLexer::getRuleNames() const {
  return tsillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TsilLexer::getChannelNames() const {
  return tsillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TsilLexer::getModeNames() const {
  return tsillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TsilLexer::getVocabulary() const {
  return tsillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TsilLexer::getSerializedATN() const {
  return tsillexerLexerStaticData->serializedATN;
}

const atn::ATN& TsilLexer::getATN() const {
  return *tsillexerLexerStaticData->atn;
}




void TsilLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tsillexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tsillexerLexerOnceFlag, tsillexerLexerInitialize);
#endif
}
