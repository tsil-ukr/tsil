взяти визначення ./ПМ;
взяти визначення ./КЦ;
взяти визначення біб/цілеспрямовано;

дія надрукувати_допомогу() {
  біб::надрукувати("Ціль 0.38.0");
}

дія скомпілювати(виділяч: адреса<біб::Виділяч>,
                 опції_програми: цілеспрямовано::Опції<ю8>,
                 опції_команди: цілеспрямовано::Опції<ю8>,
                 вхід: ю8,
                 опції_входу: цілеспрямовано::Опції<ю8>,
                 вихід: ю8,
                 опції_виходу: цілеспрямовано::Опції<ю8>,
                 знищити_залишки: логічне): ц32 {
  змінна пм_модуль = ПМ::створити_модуль("а1", ПМ::ПРОЦЕСОР_Х86_64, ПМ::СИСТЕМА_ЛІНУКС_ГНУ);

  змінна компілятор = КЦ::створити_компілятор(виділяч, пм_модуль);

  якщо КЦ::отримати_поточну_директорію_процесу(компілятор, компілятор.кореневий_шлях::адреса) == ні {
    // потім: помилка
  }

  змінна помилка: адреса<КЦ::Помилка> = пусто;

  якщо КЦ::взяти_файл_ю8(компілятор, КЦ::Шлях { вхід.розмір, вхід.дані }, помилка::адреса) == ні {
    змінна текст_коду = помилка.місцезнаходження.текст_коду;

    якщо помилка.місцезнаходження != пусто {
      біб::вивести_ю8(ю8 { текст_коду.шлях.розмір, текст_коду.шлях.дані });
      біб::вивести(":");
      біб::вивести_позитивне(помилка.місцезнаходження.рядок);
      біб::вивести(":");
      біб::вивести_позитивне(помилка.місцезнаходження.стовпець);
      біб::вивести(" помилка: ");
    }

    змінна повідомлення_ю8 = КЦ::отримати_ю8_з_т8(компілятор, помилка.повідомлення);
    біб::надрукувати_ю8(повідомлення_ю8);
    КЦ::звільнити_памʼять(компілятор, повідомлення_ю8.дані);

    якщо помилка.місцезнаходження != пусто {
      змінна витнутний_текст = КЦ::розбирач::витнути_значення_ю8(
        ю8 { помилка.місцезнаходження.текст_коду.оригінальне_значення.розмір, помилка.місцезнаходження.текст_коду.оригінальне_значення.дані },
        текст_коду.місцезнаходження_оригінального_значення.дані[помилка.місцезнаходження.позиція_в_тексті],
        100
      );

      змінна позитивне_ю8 = біб::перетворити_позитивне_на_ю8(компілятор.виділяч, помилка.місцезнаходження.рядок);
      біб::вивести_ю8(позитивне_ю8);
      біб::вивести("| ");
      біб::надрукувати_ю8(витнутний_текст.витнуте_значення);
      змінна п: позитивне = 0;
      поки п < (витнутний_текст.початок_підкреслення + позитивне_ю8.розмір + 2) {
        біб::вивести(" ");
        п += 1;
      }
      біб::надрукувати("∧");
      біб::звільнити_памʼять(виділяч, позитивне_ю8.дані);
    }

    якщо знищити_залишки {
      КЦ::знищити_помилку(компілятор, помилка);
      КЦ::знищити_компілятор(компілятор);
    }

    вернути 1;
  }

  змінна лл = ю8 { 0, пусто };
  ПМ::отримати_лл(пм_модуль, лл.розмір::адреса, лл.дані::адреса);

  якщо КЦ::записати_файл(компілятор, КЦ::Шлях { вихід.розмір, вихід.дані }, КЦ::Байти { лл.розмір, лл.дані }) {
  } інакше {
    біб::вивести("Не вдалось записати у файл ");
    біб::надрукувати_ю8(вхід);
  }

  якщо знищити_залишки {
    біб::звільнити_памʼять(виділяч, лл.дані);
    КЦ::знищити_компілятор(компілятор);
    ПМ::знищити_модуль(пм_модуль);
  }
}

зовнішня дія розпочати(кількість_аргументів: позитивне, аргументи: памʼять<КЦ::Байти>): ц32 {
  змінна статус_виходу: ц32 = 0;
  змінна виділяч = біб::отримати_системний_виділяч();

  змінна доступні_команди = цілеспрямовано::ДоступніКомандиДляРозбору<ю8> { 2, біб::виділити_памʼять<ю8>(виділяч, 2) };
  доступні_команди.дані[0] = ю8"скомпілювати";
  доступні_команди.дані[1] = ю8"допомога";

  змінна розібрана_команда = цілеспрямовано::зробити_розібрану_команду<ю8>();

  змінна успіх_розбору_команди = цілеспрямовано::розібрати_команду<ю8>(
    виділяч,
    цілеспрямовано::АргументиДляРозбору<ю8> { кількість_аргументів - 1, аргументи[1]::адреса як памʼять<ю8> },
    доступні_команди,
    ю8"--",
    ю8"=",
    розібрана_команда::адреса
  );

  якщо успіх_розбору_команди == ні {
    біб::надрукувати("Не вдалось розібрати команду!");
    вернути 1;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"") {
    надрукувати_допомогу();
    стрибнути вихід;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"допомога") {
    надрукувати_допомогу();
    стрибнути вихід;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"скомпілювати") {
    якщо розібрана_команда.входи.розмір < 1 {
      біб::надрукувати("Недостатньо вхідних!");
      статус_виходу = 1;
      стрибнути вихід;
    }

    якщо розібрана_команда.виходи.розмір == 0 {
      змінна п: позитивне = 0;
      поки п < розібрана_команда.входи.розмір {
        змінна вхід = розібрана_команда.входи.дані[п];

        змінна ю8_лл = ю8 { 3, біб::виділити_памʼять<п8>(виділяч, 3) };
        ю8_лл.дані[0] = 46;
        ю8_лл.дані[1] = 108;
        ю8_лл.дані[2] = 108;
        змінна вихід = біб::обʼєднати_ю8(виділяч, вхід.значення, ю8_лл);
        біб::звільнити_памʼять(виділяч, ю8_лл.дані);

        змінна статус_компіляції = скомпілювати(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          вихід,
          цілеспрямовано::Опції<ю8> { 0, пусто },
          ні
        );

        якщо статус_компіляції != 0 {
          статус_виходу = статус_компіляції;
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    } інакше {
      якщо розібрана_команда.входи.розмір > 1 {
        біб::надрукувати("Команда скомпілювати з вказаними виходами може мати лише один вхід!");
        статус_виходу = 1;
        стрибнути вихід;
      }

      змінна вхід = розібрана_команда.входи.дані[0];

      змінна п: позитивне = 0;
      поки п < розібрана_команда.виходи.розмір {
        змінна вихід = розібрана_команда.виходи.дані[п];

        змінна статус_компіляції = скомпілювати(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          вихід.значення,
          вихід.опції,
          ні
        );

        якщо статус_компіляції != 0 {
          статус_виходу = статус_компіляції;
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    }
  } інакше {
    біб::надрукувати("Невідома команда!");
    статус_виходу = 1;
    стрибнути вихід;
  }

вихід:
  цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
  біб::звільнити_памʼять(виділяч, доступні_команди.дані);
  вернути статус_виходу;
}