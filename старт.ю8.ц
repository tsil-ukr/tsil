взяти визначення ./ПМ;
взяти визначення ./КЦ;
взяти визначення біб/цілеспрямовано;

дія надрукувати_допомогу() {
  біб::надрукувати("Ціль 0.38.0");
}

зовнішня дія розпочати(кількість_аргументів: позитивне, аргументи: памʼять<КЦ::Байти>): ц32 {
  змінна виділяч = біб::отримати_системний_виділяч();

  змінна доступні_команди = цілеспрямовано::ДоступніКомандиДляРозбору<ю8> { 2, біб::виділити_памʼять<ю8>(виділяч, 2) };
  доступні_команди.дані[0] = ю8"скомпілювати";
  доступні_команди.дані[1] = ю8"допомога";

  змінна розібрана_команда = цілеспрямовано::зробити_розібрану_команду<ю8>();

  змінна успіх_розбору_команди = цілеспрямовано::розібрати_команду<ю8>(
    виділяч,
    цілеспрямовано::АргументиДляРозбору<ю8> { кількість_аргументів - 1, аргументи[1]::адреса як памʼять<ю8> },
    доступні_команди,
    ю8"--",
    ю8"=",
    розібрана_команда::адреса
  );

  якщо успіх_розбору_команди == ні {
    біб::надрукувати("Не вдалось розібрати команду!");
    цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
    біб::звільнити_памʼять(виділяч, доступні_команди.дані);
    вернути 1;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"") {
    надрукувати_допомогу();
    вернути 0;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"допомога") {
    надрукувати_допомогу();
    вернути 0;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"скомпілювати") {
    змінна п: позитивне = 0;

    поки п < розібрана_команда.входи.розмір {
      змінна пп: позитивне = 0;

      поки пп < розібрана_команда.виходи.розмір {
        змінна вхід = розібрана_команда.входи.дані[п];
        змінна вихід = розібрана_команда.виходи.дані[пп];

        змінна пм_модуль = ПМ::створити_модуль("а1", ПМ::ПРОЦЕСОР_Х86_64, ПМ::СИСТЕМА_ЛІНУКС_ГНУ);

        змінна компілятор = КЦ::створити_компілятор(виділяч, пм_модуль);

        якщо КЦ::отримати_поточну_директорію_процесу(компілятор, компілятор.кореневий_шлях::адреса) == ні {
          // потім: помилка
        }

        змінна помилка: адреса<КЦ::Помилка> = пусто;

        якщо КЦ::взяти_файл_ю8(компілятор, КЦ::Шлях { вхід.значення.розмір, вхід.значення.дані }, помилка::адреса) == ні {
          змінна текст_коду = помилка.місцезнаходження.текст_коду;

          якщо помилка.місцезнаходження != пусто {
            біб::вивести_ю8(ю8 { текст_коду.шлях.розмір, текст_коду.шлях.дані });
            біб::вивести(":");
            біб::вивести_позитивне(помилка.місцезнаходження.рядок);
            біб::вивести(":");
            біб::вивести_позитивне(помилка.місцезнаходження.стовпець);
            біб::вивести(" помилка: ");
          }

          змінна повідомлення_ю8 = КЦ::отримати_ю8_з_т8(компілятор, помилка.повідомлення);
          біб::надрукувати_ю8(повідомлення_ю8);
          КЦ::звільнити_памʼять(компілятор, повідомлення_ю8.дані);

          якщо помилка.місцезнаходження != пусто {
            змінна витнутний_текст = КЦ::розбирач::витнути_значення_ю8(
              ю8 { помилка.місцезнаходження.текст_коду.оригінальне_значення.розмір, помилка.місцезнаходження.текст_коду.оригінальне_значення.дані },
              текст_коду.місцезнаходження_оригінального_значення.дані[помилка.місцезнаходження.позиція_в_тексті],
              100
            );

            змінна позитивне_ю8 = біб::перетворити_позитивне_на_ю8(компілятор.виділяч, помилка.місцезнаходження.рядок);
            біб::вивести_ю8(позитивне_ю8);
            біб::вивести("| ");
            біб::надрукувати_ю8(витнутний_текст.витнуте_значення);
            змінна п: позитивне = 0;
            поки п < (витнутний_текст.початок_підкреслення + позитивне_ю8.розмір + 2) {
              біб::вивести(" ");
              п += 1;
            }
            біб::надрукувати("∧");

            біб::звільнити_памʼять(виділяч, позитивне_ю8.дані);
          }

          цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
          біб::звільнити_памʼять(виділяч, доступні_команди.дані);
          КЦ::знищити_помилку(компілятор, помилка);
          КЦ::знищити_компілятор(компілятор);
          вернути 1;
        }

        змінна лл = ю8 { 0, пусто };
        ПМ::отримати_лл(пм_модуль, лл.розмір::адреса, лл.дані::адреса);

        якщо КЦ::записати_файл(компілятор, КЦ::Шлях { вихід.значення.розмір, вихід.значення.дані }, КЦ::Байти { лл.розмір, лл.дані }) {
        } інакше {
          біб::вивести("Не вдалось записати у файл ");
          біб::надрукувати_ю8(вхід.значення);
        }

        КЦ::знищити_компілятор(компілятор);

        пп += 1;
      }

      п += 1;
    }

    цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
    біб::звільнити_памʼять(виділяч, доступні_команди.дані);

    вернути 0;
  } інакше {
    біб::надрукувати("Невідома команда!");
    цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
    біб::звільнити_памʼять(виділяч, доступні_команди.дані);
    вернути 1;
  }

  вернути 0;
}