взяти біб друк;
взяти біб юнікод;

зовнішня дія прочитати_файл(шлях: памʼять<п8>): памʼять<п8>;

синонім ВидТокенаКІНЕЦЬ = 0;
синонім ВидТокенаІдентифікатор = 1;
синонім ВидТокенаВідкритаФігурна = 2;
синонім ВидТокенаЗакритаФігурна = 3;
синонім ВидТокенаКлючовеСловоСтруктура = 4;

синонім ЮНІКОД_ВІДКРИТА_ФІГУРНА = 123;
синонім ЮНІКОД_ЗАКРИТА_ФІГУРНА = 125;

структура Місцезнаходження {
  початок_рядок: позитивне;
  початок_колонка: позитивне;
  кінець_рядок: позитивне;
  кінець_колонка: позитивне;
}

структура Токен {
  вид: позитивне;
  дані: памʼять<п8>;
  місцезнаходження: Місцезнаходження;
}

дія токенізувати(значення: памʼять<п8>): памʼять<Токен> {
  ціль розмір_значення = біб::юнікод::дізнатись_розмір_ю8_сі(значення);
  змінна значення_ю32 = виділити<п32>(розмір_значення + 1);
  значення_ю32[розмір_значення] = 0;
  ціль розмір_значення_ю32 = біб::юнікод::ю8_в_ю32(значення, розмір_значення, значення_ю32);

  змінна токени = виділити<Токен>(0);
  змінна розмір_токенів: позитивне = 0;

  змінна пх: позитивне = 0;
  змінна значення_символа: п32 = значення_ю32[пх];
  поки значення_символа != 0 {
    біб::друк_позитивне(значення_символа);

    якщо значення_символа == ЮНІКОД_ВІДКРИТА_ФІГУРНА {
      розмір_токенів = розмір_токенів + 1;
      токени = перевиділити<Токен>(токени, розмір_токенів);
      токени[розмір_токенів - 1] = Токен { ВидТокенаВідкритаФігурна };
    } інакше якщо значення_символа == ЮНІКОД_ЗАКРИТА_ФІГУРНА {
      розмір_токенів = розмір_токенів + 1;
      токени = перевиділити<Токен>(токени, розмір_токенів);
      токени[розмір_токенів - 1] = Токен { ВидТокенаЗакритаФігурна };
    } інакше {
      біб::вивести_ю8(ю8"Невідомий символ: ");
      біб::друк_позитивне(значення_символа);
      вернути пусто;
    }

    пх = пх + 1;
    значення_символа = значення_ю32[пх];
  }

  розмір_токенів = розмір_токенів + 1;
  токени = перевиділити<Токен>(токени, розмір_токенів);
  токени[розмір_токенів - 1] = Токен { ВидТокенаКІНЕЦЬ };
  вернути токени;
}

дія старт(): ц32 {
  ціль дані_файлу = прочитати_файл(ю8"тест2.ц");
  якщо дані_файлу == пусто {
    біб::друк_ю8(ю8"не вдалось прочитати файл");
    вернути 1;
  }
  ціль токени = токенізувати(дані_файлу);

  якщо токени == пусто {
    вернути 1;
  }

  змінна позиція_токена: позитивне = 0;
  змінна токен = токени[позиція_токена];
  поки токен.вид != ВидТокенаКІНЕЦЬ {
    біб::друк_позитивне(токен.вид);

    позиція_токена = позиція_токена + 1;
    токен = токени[позиція_токена];
  }

  вернути 0;
}