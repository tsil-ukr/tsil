взяти визначення ./ПМ;
взяти визначення ЛЛВМ;
взяти біб Виділяч;
взяти біб Кодування;
взяти біб Реєстр;

// потім: позбутись великої кількості однотипних дій

секція ПМ {
  структура Модуль {
    виділяч: адреса<біб::Виділяч>;
    типи: адреса<біб::Реєстр<т8, адреса<Тип>>>;
    глобальні: адреса<біб::Реєстр<т8, адреса<Значення>>>;
    тип_ніщо: адреса<Тип>;
    тип_адреса: адреса<Тип>;
    тип_логічне: адреса<Тип>;
    тип_н8: адреса<Тип>;
    тип_н16: адреса<Тип>;
    тип_н32: адреса<Тип>;
    тип_н64: адреса<Тип>;
    тип_ц8: адреса<Тип>;
    тип_ц16: адреса<Тип>;
    тип_ц32: адреса<Тип>;
    тип_ц64: адреса<Тип>;
    тип_р32: адреса<Тип>;
    тип_р64: адреса<Тип>;
    значення_пусто: адреса<Значення>;
    значення_так: адреса<Значення>;
    значення_ні: адреса<Значення>;
  }

  стала ВидТипуНіщо = 0;
  стала ВидТипуАдреса = 1;
  стала ВидТипуЛогічне = 2;
  стала ВидТипуН8 = 3;
  стала ВидТипуН16 = 4;
  стала ВидТипуН32 = 5;
  стала ВидТипуН64 = 6;
  стала ВидТипуЦ8 = 7;
  стала ВидТипуЦ16 = 8;
  стала ВидТипуЦ32 = 9;
  стала ВидТипуЦ64 = 10;
  стала ВидТипуР32 = 11;
  стала ВидТипуР64 = 12;
  стала ВидТипуІнструкція = 13;
  стала ВидТипуСтруктура = 14;
  стала ВидТипуМасив = 15;

  структура ДаніТипуСтруктура {
    назва: т8;
    параметри: Параметри;
  }

  структура ДаніТипуМасив {
    тип_елементу: адреса<Тип>;
    розмір: натуральне;
  }

  структура ДаніТипуІнструкція {
    параметри: Параметри;
    тип_результату: адреса<Тип>;
  }

  структура Тип {
    вид: натуральне;
    дані: ДаніТипуСтруктура 
        | ДаніТипуМасив
        | ДаніТипуІнструкція;
    дані_компіляції: невідома_адреса;
  }

  структура Вказівки {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура Кроки {
    розмір: натуральне;
    дані: памʼять<адреса<Крок>>;
    вмісткість: натуральне;
  }

  стала ВидЗначенняПусто = 0;
  стала ВидЗначенняТак = 1;
  стала ВидЗначенняНі = 2;
  стала ВидЗначенняНатуральне = 3;
  стала ВидЗначенняЦіле = 4;
  стала ВидЗначенняРаціональне = 5;
  стала ВидЗначенняІнструкція = 6;
  стала ВидЗначенняВказівка = 7;
  стала ВидЗначенняГлобальна = 8;
  стала ВидЗначенняКонстантаДаних = 9;
  стала ВидЗначенняОбʼєкт = 10;
  стала ВидЗначенняПустийОбʼєкт = 11;

  стала ВидВказівкиНакопичити = 1;
  стала ВидВказівкиДодати = 2;
  стала ВидВказівкиВідняти = 3;
  стала ВидВказівкиПомножити = 4;
  стала ВидВказівкиПоділити = 5;
  стала ВидВказівкиОстача = 6;
  стала ВидВказівкиРівно = 7;
  стала ВидВказівкиНеРівно = 8;
  стала ВидВказівкиБільше = 9;
  стала ВидВказівкиМенше = 10;
  стала ВидВказівкиБільшеРівно = 10;
  стала ВидВказівкиМеншеРівно = 11;
  стала ВидВказівкиЗсунутиВліво = 12;
  стала ВидВказівкиЗсунутиВправо = 13;
  стала ВидВказівкиДвійковеІ = 14;
  стала ВидВказівкиДвійковеАБО = 15;
  стала ВидВказівкиДвійковеВиключнеАБО = 16;
  стала ВидВказівкиДвійковеЗаперечення = 17;
  стала ВидВказівкиПеретворити = 18;
  стала ВидВказівкиЯк = 19;
  стала ВидВказівкиОтриматиАдресуЕлемента = 20;
  стала ВидВказівкиОтриматиЗначення = 21;
  стала ВидВказівкиЗаписати = 22;
  стала ВидВказівкиПрочитати = 23;
  стала ВидВказівкиВернути = 24;
  стала ВидВказівкиВиконати = 100;
  стала ВидВказівкиСтрибнути = 101;
  стала ВидВказівкиСтрибнутиЯкщо = 102;

  структура ДаніОдинарноїВказівки {
    значення: адреса<Значення>;
  }

  структура ДаніДвійноїВказівки {
    ліво: адреса<Значення>;
    право: адреса<Значення>;
  }

  структура ДаніВказівкиВиконати {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиНакопичити {
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиПеретворити {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиЯк {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиОтриматиАдресуЕлемента {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_позицій: натуральне;
    позиції: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиОтриматиЗначення {
    значення: адреса<Значення>;
    позиція: натуральне;
  }

  структура ДаніВказівкиЗаписати {
    значення: адреса<Значення>;
    куди: адреса<Значення>;
  }

  структура ДаніВказівкиПрочитати {
    тип: адреса<Тип>;
    звідки: адреса<Значення>;
  }

  структура ДаніВказівкиВернути {
    значення: адреса<Значення>;
  }

  структура ДаніВказівкиСтрибнути {
    куди: адреса<Крок>;
  }

  структура ДаніВказівкиСтрибнутиЯкщо {
    умова: адреса<Значення>;
    куди: адреса<Крок>;
    інакше_куди: адреса<Крок>;
  }

  структура ДаніЗначенняВказівка {
    крок: адреса<Крок>;
    вид: натуральне;
    дані: ДаніОдинарноїВказівки
        | ДаніДвійноїВказівки
        | ДаніВказівкиВиконати
        | ДаніВказівкиНакопичити
        | ДаніВказівкиПеретворити
        | ДаніВказівкиЯк
        | ДаніВказівкиОтриматиАдресуЕлемента
        | ДаніВказівкиОтриматиЗначення
        | ДаніВказівкиЗаписати
        | ДаніВказівкиПрочитати
        | ДаніВказівкиВернути
        | ДаніВказівкиСтрибнути
        | ДаніВказівкиСтрибнутиЯкщо;
  }

  структура ДаніЗначенняГлобальна {
    видимість: натуральне;
  }

  структура ДаніЗначенняНатуральне {
    значення: н64;
  }

  структура ДаніЗначенняЦіле {
    значення: ц64;
  }

  структура ДаніЗначенняРаціональне {
    значення: р64;
  }

  структура ДаніЗначенняКонстантаДаних {
    розмір: натуральне;
    дані: памʼять<н8>;
  }

  структура ДаніЗначенняОбʼєкт {
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ЗначенняАргументів {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура ДаніЗначенняІнструкція {
    модуль: адреса<Модуль>;
    видимість: натуральне;
    назва: т8;
    тип: адреса<Тип>;
    кроки: Кроки;
    значення_аргументів: ЗначенняАргументів;
  }

  структура Значення {
    вид: натуральне;
    тип: адреса<Тип>;
    дані: ДаніЗначенняВказівка 
        | ДаніЗначенняГлобальна 
        | ДаніЗначенняНатуральне 
        | ДаніЗначенняЦіле 
        | ДаніЗначенняРаціональне
        | ДаніЗначенняКонстантаДаних
        | ДаніЗначенняОбʼєкт
        | ДаніЗначенняІнструкція;
    дані_компіляції: невідома_адреса;
  }

  структура Крок {
    інструкція: адреса<Інструкція>;
    назва: т8;
    вказівки: Вказівки;
    дані_компіляції: невідома_адреса;
  }

  дія покласти_крок(інструкція: адреса<Інструкція>, крок: адреса<Крок>) {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;

    якщо дані_інструкції.кроки.розмір == дані_інструкції.кроки.вмісткість {
      дані_інструкції.кроки.вмісткість += 1;
      дані_інструкції.кроки.дані = біб::перевиділити_памʼять<адреса<Крок>>(дані_інструкції.модуль.виділяч, дані_інструкції.кроки.дані, дані_інструкції.кроки.вмісткість);
    }

    дані_інструкції.кроки.дані[дані_інструкції.кроки.розмір] = крок;
    дані_інструкції.кроки.розмір += 1;
  }

  місцева дія покласти_параметр(модуль: адреса<Модуль>, параметри: адреса<Параметри>, параметр: Параметр) {
    якщо параметри.розмір == параметри.вмісткість {
      параметри.вмісткість += 1;
      параметри.дані = біб::перевиділити_памʼять<Параметр>(модуль.виділяч, параметри.дані, параметри.вмісткість);
    }

    параметри.дані[параметри.розмір] = параметр;
    параметри.розмір += 1;
  }

  місцева дія створити_модуль(назва: т8, архітектура: натуральне, постачальник: натуральне, система: натуральне) -> адреса<Модуль> {
    змінна виділяч = біб::отримати_системний_виділяч();
    
    змінна модуль = біб::виділити<Модуль>(виділяч);

    модуль.виділяч = виділяч;
    модуль.типи = біб::виділити_текстовий_реєстр<адреса<Тип>>(модуль.виділяч, 0, пусто);
    модуль.глобальні = біб::виділити_текстовий_реєстр<адреса<Значення>>(модуль.виділяч, 0, пусто);
    
    модуль.тип_ніщо = біб::виділити<Тип>(виділяч);
    модуль.тип_ніщо.вид = ВидТипуНіщо;
    модуль.тип_ніщо.дані_компіляції = пусто;

    модуль.тип_адреса = біб::виділити<Тип>(виділяч);
    модуль.тип_адреса.вид = ВидТипуАдреса;
    модуль.тип_адреса.дані_компіляції = пусто;

    модуль.тип_н8 = біб::виділити<Тип>(виділяч);
    модуль.тип_н8.вид = ВидТипуН8;
    модуль.тип_н8.дані_компіляції = пусто;

    модуль.тип_н16 = біб::виділити<Тип>(виділяч);
    модуль.тип_н16.вид = ВидТипуН16;
    модуль.тип_н16.дані_компіляції = пусто;

    модуль.тип_н32 = біб::виділити<Тип>(виділяч);
    модуль.тип_н32.вид = ВидТипуН32;
    модуль.тип_н32.дані_компіляції = пусто;

    модуль.тип_н64 = біб::виділити<Тип>(виділяч);
    модуль.тип_н64.вид = ВидТипуН64;
    модуль.тип_н64.дані_компіляції = пусто;

    модуль.тип_ц8 = біб::виділити<Тип>(виділяч);
    модуль.тип_ц8.вид = ВидТипуЦ8;
    модуль.тип_ц8.дані_компіляції = пусто;

    модуль.тип_ц16 = біб::виділити<Тип>(виділяч);
    модуль.тип_ц16.вид = ВидТипуЦ16;
    модуль.тип_ц16.дані_компіляції = пусто;

    модуль.тип_ц32 = біб::виділити<Тип>(виділяч);
    модуль.тип_ц32.вид = ВидТипуЦ32;
    модуль.тип_ц32.дані_компіляції = пусто;

    модуль.тип_ц64 = біб::виділити<Тип>(виділяч);
    модуль.тип_ц64.вид = ВидТипуЦ64;
    модуль.тип_ц64.дані_компіляції = пусто;

    модуль.тип_р32 = біб::виділити<Тип>(виділяч);
    модуль.тип_р32.вид = ВидТипуР32;
    модуль.тип_р32.дані_компіляції = пусто;

    модуль.тип_р64 = біб::виділити<Тип>(виділяч);
    модуль.тип_р64.вид = ВидТипуР64;
    модуль.тип_р64.дані_компіляції = пусто;

    модуль.значення_пусто = біб::виділити<Значення>(виділяч);
    модуль.значення_пусто.вид = ВидЗначенняПусто;
    модуль.значення_пусто.тип = модуль.тип_адреса;
    
    модуль.значення_так = біб::виділити<Значення>(виділяч);
    модуль.значення_так.вид = ВидЗначенняТак;
    модуль.значення_так.тип = модуль.тип_логічне;
 
    модуль.значення_ні = біб::виділити<Значення>(виділяч);
    модуль.значення_ні.вид = ВидЗначенняНі;
    модуль.значення_ні.тип = модуль.тип_логічне;

    вернути модуль;
  }

  місцева дія створити_інструкцію(модуль: адреса<Модуль>, видимість: натуральне, назва: т8, параметри: Параметри, тип_результату: адреса<Тип>) -> адреса<Інструкція> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    змінна значення_аргументів = біб::виділити_памʼять<адреса<Значення>>(модуль.виділяч, параметри.розмір);
    змінна п: натуральне = 0;
    поки п < параметри.розмір {
      значення_аргументів[п] = пусто як адреса<Значення>;
      
      п += 1;
    }

    змінна дані_інструкції = ДаніЗначенняІнструкція {
      модуль = модуль,
      видимість = видимість,
      назва = назва,
      тип = створити_тип_інструкції(модуль, параметри, тип_результату),
      кроки = Кроки { 0, пусто, 0 },
      значення_аргументів = ЗначенняАргументів { параметри.розмір, значення_аргументів, параметри.розмір },
    };

    пм_значення.вид = ВидЗначенняІнструкція;
    пм_значення.тип = дані_інструкції.тип;
    пм_значення.дані = дані_інструкції;
    пм_значення.дані_компіляції = пусто;

    біб::змінити_в_реєстрі<т8, адреса<Значення>>(модуль.глобальні, назва, пм_значення);

    вернути пм_значення як адреса<Інструкція>;
  }

  місцева дія отримати_тип_інструкції(інструкція: адреса<Інструкція>) -> адреса<Тип> {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;
    
    вернути дані_інструкції.тип;
  }

  місцева дія створити_тип_інструкції(модуль: адреса<Модуль>, параметри: Параметри, тип_результату: адреса<Тип>) -> адреса<Тип> {
    змінна тип = біб::виділити<Тип>(модуль.виділяч);

    тип.вид = ВидТипуІнструкція;
    тип.дані = ДаніТипуІнструкція { параметри, тип_результату };
    тип.дані_компіляції = пусто;

    вернути тип;
  }

  місцева дія отримати_значення_аргумента_інструкції(інструкція: адреса<Інструкція>, позиція: натуральне) -> адреса<Значення> {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;
    
    вернути дані_інструкції.значення_аргументів.дані[позиція];
  }

  місцева дія створити_крок(інструкція: адреса<Інструкція>, назва: т8) -> адреса<Крок> {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;

    змінна крок = біб::виділити<Крок>(дані_інструкції.модуль.виділяч);

    крок.інструкція = інструкція;
    крок.назва = назва;
    крок.вказівки = Вказівки { 0, пусто, 0 };
    крок.дані_компіляції = пусто;

    покласти_крок(інструкція, крок);
    
    вернути крок;
  }

  місцева дія перевірити_чи_крок_закінчується_стрибком(крок: адреса<Крок>) -> логічне {
    якщо крок.вказівки.розмір > 0 {
      якщо крок.вказівки.дані[крок.вказівки.розмір - 1].вид == ВидВказівкиСтрибнути {
        вернути так;
      }
    }

    вернути ні;
  }

  місцева дія створити_структуру(модуль: адреса<Модуль>, назва: т8, параметри: Параметри) -> адреса<Тип> {
    змінна тип = біб::виділити<Тип>(модуль.виділяч);

    тип.вид = ВидТипуСтруктура;
    тип.дані = ДаніТипуСтруктура { назва, параметри };
    тип.дані_компіляції = пусто;

    біб::змінити_в_реєстрі<т8, адреса<Тип>>(модуль.типи, назва, тип);

    вернути тип;
  }

  місцева дія заповнити_параметри_структури(тип: адреса<Тип>, параметри: Параметри) {
    якщо тип.вид != ВидТипуСтруктура {
      вернути;
    }

    змінна дані = тип.дані як ДаніТипуСтруктура;
    дані.параметри = параметри; 
    
    тип.дані = дані;
  }

  дія отримати_модуль_з_інструкції(інструкція: адреса<Інструкція>) -> адреса<Модуль> {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;

    вернути дані_інструкції.модуль;
  }

  дія покласти_вказівку(крок: адреса<Крок>, вказівка: адреса<Значення>) {
    якщо крок.вказівки.розмір == крок.вказівки.вмісткість {
      крок.вказівки.вмісткість += 1;
      крок.вказівки.дані = біб::перевиділити_памʼять<адреса<Значення>>(отримати_модуль_з_інструкції(крок.інструкція).виділяч, крок.вказівки.дані, крок.вказівки.вмісткість);
    }

    крок.вказівки.дані[крок.вказівки.розмір] = вказівка;
    крок.вказівки.розмір += 1;
  }

  місцева дія виконати_дію(крок: адреса<Крок>, тип: адреса<Тип>, значення: адреса<Значення>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВиконати,
      дані = ДаніВказівкиВиконати { тип, значення, кількість_аргументів, аргументи }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія отримати_розмір_типу_для_виділення(модуль: адреса<Модуль>, тип: адреса<Тип>) -> натуральне {
    якщо тип.вид == ВидТипуЛогічне {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуН8 {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуН16 {
      вернути 2;
    } інакше якщо тип.вид == ВидТипуН32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуН64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуЦ8 {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуЦ16 {
      вернути 2;
    } інакше якщо тип.вид == ВидТипуЦ32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуЦ64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуР32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуР64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуАдреса {
      вернути 8;
    }

    вернути 0;
  }

  місцева дія створити_глобальну(модуль: адреса<Модуль>, назва: т8, видимість: натуральне, тип: адреса<Тип>) -> адреса<Значення> {
    змінна значення = біб::виділити<Значення>(модуль.виділяч);

    значення.тип = тип;
    значення.дані = ДаніЗначенняГлобальна { видимість };
    значення.дані_компіляції = пусто;

    біб::змінити_в_реєстрі<т8, адреса<Значення>>(модуль.глобальні, назва, значення);

    вернути значення;
  }

  місцева дія отримати_значення_пусто(модуль: адреса<Модуль>) -> адреса<Значення> {
    вернути модуль.значення_пусто;
  }

  місцева дія отримати_тип_ніщо(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ніщо;
  }

  місцева дія отримати_тип_адреса(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_адреса;
  }

  місцева дія отримати_тип_логічне(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_логічне;
  }

  місцева дія отримати_тип_ц8(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц8;
  }

  місцева дія отримати_тип_ц16(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц16;
  }

  місцева дія отримати_тип_ц32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц32;
  }

  місцева дія отримати_тип_ц64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц64;
  }

  місцева дія отримати_тип_н8(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н8;
  }

  місцева дія отримати_тип_н16(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н16;
  }

  місцева дія отримати_тип_н32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н32;
  }

  місцева дія отримати_тип_н64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н64;
  }

  місцева дія отримати_тип_р32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_р32;
  }

  місцева дія отримати_тип_р64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_р64;
  }

  місцева дія створити_логічне(модуль: адреса<Модуль>, значення: логічне) -> адреса<Значення> {
    якщо значення {
      вернути модуль.значення_так;
    }

    вернути модуль.значення_ні;
  }

  місцева дія створити_ц8(модуль: адреса<Модуль>, значення: ц8) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняЦіле;
    пм_значення.тип = модуль.тип_ц8;
    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_ц16(модуль: адреса<Модуль>, значення: ц16) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняЦіле;
    пм_значення.тип = модуль.тип_ц16;
    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_ц32(модуль: адреса<Модуль>, значення: ц32) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняЦіле;
    пм_значення.тип = модуль.тип_ц32;
    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_ц64(модуль: адреса<Модуль>, значення: ц64) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняЦіле;
    пм_значення.тип = модуль.тип_ц64;
    пм_значення.дані = ДаніЗначенняЦіле { значення };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_п8(модуль: адреса<Модуль>, значення: п8) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняНатуральне;
    пм_значення.тип = модуль.тип_н8;
    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_п16(модуль: адреса<Модуль>, значення: п16) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняНатуральне;
    пм_значення.тип = модуль.тип_н16;
    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_п32(модуль: адреса<Модуль>, значення: п32) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняНатуральне;
    пм_значення.тип = модуль.тип_н32;
    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_п64(модуль: адреса<Модуль>, значення: п64) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняНатуральне;
    пм_значення.тип = модуль.тип_н64;
    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_д32(модуль: адреса<Модуль>, значення: д32) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняРаціональне;
    пм_значення.тип = модуль.тип_р32;
    пм_значення.дані = ДаніЗначенняРаціональне { р64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_д64(модуль: адреса<Модуль>, значення: д64) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняРаціональне;
    пм_значення.тип = модуль.тип_р64;
    пм_значення.дані = ДаніЗначенняРаціональне { р64(значення) };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_константу_даних(модуль: адреса<Модуль>, розмір: натуральне, дані: памʼять<н8>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняКонстантаДаних;
    пм_значення.тип = модуль.тип_адреса;
    пм_значення.дані = ДаніЗначенняКонстантаДаних { розмір, дані };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_обʼєкт(модуль: адреса<Модуль>, тип: адреса<Тип>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняОбʼєкт;
    пм_значення.тип = тип;
    пм_значення.дані = ДаніЗначенняОбʼєкт { кількість_аргументів, аргументи };
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія створити_пусте_значення(модуль: адреса<Модуль>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    пм_значення.вид = ВидЗначенняПустийОбʼєкт;
    пм_значення.тип = тип;
    пм_значення.дані_компіляції = пусто;

    вернути пм_значення;
  }

  місцева дія вказівка_накопичити(крок: адреса<Крок>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНакопичити,
      дані = ДаніВказівкиНакопичити { тип }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_адреса(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_адреса(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія покласти_вказівку_перетворити(крок: адреса<Крок>, значення: адреса<Значення>, очікуваний_тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПеретворити,
      дані = ДаніВказівкиПеретворити { значення, очікуваний_тип }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;  
  }

  місцева дія перетворити_логічне_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_логічне_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_логічне_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_логічне_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_логічне_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_логічне_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_логічне_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_логічне_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_логічне_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_логічне_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_логічне_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц8_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц8_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц8_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц8_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц8_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц8_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц8_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц8_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц8_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц8_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц8_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц16_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц16_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц16_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц16_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц16_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц16_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц16_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц16_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц16_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц16_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц16_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц32_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц32_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц64_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц64_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п8_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п8_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п8_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п8_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п8_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п8_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п8_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п8_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п8_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п8_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п8_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п16_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п16_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п16_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п16_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п16_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п16_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п16_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п16_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п16_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п16_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п16_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п32_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п32_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п64_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п64_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_д32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_д32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_д32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_д32_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_д32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_д32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_д32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_д32_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_д32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_д32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_д32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_д64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_д64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_д64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_д64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_д64_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_д64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_д64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_д64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_д64_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_д64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_д64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_адресу_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_адресу_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_адресу_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_адресу_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_адресу_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_адресу_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_адресу_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_адресу_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_адресу_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_адресу_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_адресу_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія вказівка_як(крок: адреса<Крок>, значення: адреса<Значення>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЯк,
      дані = ДаніВказівкиЯк { значення, тип }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_отримати_адресу_елемента(крок: адреса<Крок>, тип: адреса<Тип>, значення: адреса<Значення>, кількість_позицій: натуральне, позиції: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОтриматиАдресуЕлемента,
      дані = ДаніВказівкиОтриматиАдресуЕлемента { тип, значення, кількість_позицій, позиції }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_отримати_значення(крок: адреса<Крок>, значення: адреса<Значення>, позиція: натуральне) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = значення.тип;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОтриматиЗначення,
      дані = ДаніВказівкиОтриматиЗначення { значення, позиція }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_стрибнути(крок: адреса<Крок>, куди: адреса<Крок>) -> адреса<Стрибок> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиСтрибнути,
      дані = ДаніВказівкиСтрибнути { куди }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення як адреса<Стрибок>;
  }

  місцева дія змінити_крок_стрибка(стрибок: адреса<Стрибок>, куди: адреса<Крок>) {
    змінна пм_значення = стрибок як адреса<Значення>;

    якщо пм_значення.вид == ВидЗначенняВказівка {
      змінна пм_дані = пм_значення.дані як ДаніЗначенняВказівка;

      якщо пм_дані.вид == ВидВказівкиСтрибнути {
        змінна пм_дані_стрибка = пм_дані.дані як ДаніВказівкиСтрибнути;
    
        пм_дані_стрибка.куди = куди;
  
        пм_дані.дані = пм_дані_стрибка;
        пм_значення.дані = пм_дані;
      }
    }
  }

  місцева дія вказівка_стрибнути_якщо(крок: адреса<Крок>, значення: адреса<Значення>, якщо_так: адреса<Крок>, якщо_ні: адреса<Крок>) -> адреса<Стрибок> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиСтрибнутиЯкщо,
      дані = ДаніВказівкиСтрибнутиЯкщо { значення, якщо_так, якщо_ні }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення як адреса<Стрибок>;
  }

  місцева дія вказівка_записати(крок: адреса<Крок>, значення: адреса<Значення>, куди: адреса<Значення>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗаписати,
      дані = ДаніВказівкиЗаписати { значення, куди }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  місцева дія вказівка_прочитати(крок: адреса<Крок>, тип: адреса<Тип>, звідки: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = тип;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПрочитати,
      дані = ДаніВказівкиПрочитати { тип, звідки }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_вернути(крок: адреса<Крок>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВернути,
      дані = ДаніВказівкиВернути { пусто }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  місцева дія вказівка_вернути_значення(крок: адреса<Крок>, значення: адреса<Значення>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВернути,
      дані = ДаніВказівкиВернути { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  дія отримати_ю8_з_т8(значення: т8) -> ю8 {
    змінна результат = ю8 { 0, пусто };

    змінна позиція_помилки: позитивне = 0;

    якщо біб::перекодувати_т8_в_ю8(біб::отримати_системний_виділяч(), значення, ні, результат::адреса, пусто, позиція_помилки::адреса) == ні {
      // потім: обробити помилку
    }

    вернути результат;
  }

  дія перебрати_реєстр_глобальних(реєстр: адреса<біб::Реєстр<т8, адреса<Значення>>>, аргумент: невідома_адреса, ключ: т8, значення: адреса<Значення>) -> логічне {
    змінна ллвм_модуль = аргумент як адреса<ЛЛВМ::Модуль>;

    якщо значення.вид == ВидЗначенняІнструкція {
      біб::надрукувати(ключ);

      змінна дані_інструкції = значення.дані як ДаніЗначенняІнструкція;

      змінна функція = ЛЛВМ::створити_функцію(
        ллвм_модуль, 
        ВИДИМІСТЬ_ЗОВНІШНЯ,
        отримати_ю8_з_т8(ключ), 
        0, 
        пусто, 
        пусто
      );

      значення.дані_компіляції = функція;
    }

    вернути так;
  }

  місцева дія отримати_лл(модуль: адреса<Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне {
    ЛЛВМ::ініціалізувати();
    
    змінна ллвм_модуль = ЛЛВМ::створити_модуль(отримати_ю8_з_т8("привіт"), АРХІТЕКТУРА_ІКС86_64, СИСТЕМА_ЛІНУКС);
    біб::надрукувати("отримати_лл");

    біб::перебрати_реєстр<т8, адреса<Значення>>(
      модуль.глобальні,
      перебрати_реєстр_глобальних,
      ллвм_модуль::адреса
    );

    біб::надрукувати("отримати_лл");

    ЛЛВМ::отримати_ір(ллвм_модуль, вихід_розміру, вихід_даних);

    біб::надрукувати_ю8(ю8 { вихід_розміру::вміст, вихід_даних::вміст });
    біб::надрукувати("отримати_лл");

    ЛЛВМ::знищити_модуль(ллвм_модуль);
    ЛЛВМ::деініціалізувати();

    вернути так;
  }

  місцева дія отримати_обджект(модуль: адреса<Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне {
    вихід_розміру::вміст = 0;
    вихід_даних::вміст = пусто як памʼять<н8>;

    вернути так;
  }

  місцева дія знищити_модуль(модуль: адреса<Модуль>) {

  }
}