взяти визначення ./ПМ;
взяти визначення ЛЛВМ;
взяти біб Виділяч;
взяти біб Кодування;
взяти біб Реєстр;

// потім: позбутись великої кількості однотипних дій

секція ПМ {
  структура Модуль {
    виділяч: адреса<біб::Виділяч>;
    типи: адреса<біб::Реєстр<т8, адреса<Тип>>>;
    глобальні: адреса<біб::Реєстр<т8, адреса<Значення>>>;
    тип_ніщо: адреса<Тип>;
    тип_адреса: адреса<Тип>;
    тип_логічне: адреса<Тип>;
    тип_н8: адреса<Тип>;
    тип_н16: адреса<Тип>;
    тип_н32: адреса<Тип>;
    тип_н64: адреса<Тип>;
    тип_ц8: адреса<Тип>;
    тип_ц16: адреса<Тип>;
    тип_ц32: адреса<Тип>;
    тип_ц64: адреса<Тип>;
    тип_р32: адреса<Тип>;
    тип_р64: адреса<Тип>;
    значення_пусто: адреса<Значення>;
    значення_так: адреса<Значення>;
    значення_ні: адреса<Значення>;
  }

  стала ВидТипуНіщо = 0;
  стала ВидТипуАдреса = 1;
  стала ВидТипуЛогічне = 2;
  стала ВидТипуН8 = 3;
  стала ВидТипуН16 = 4;
  стала ВидТипуН32 = 5;
  стала ВидТипуН64 = 6;
  стала ВидТипуЦ8 = 7;
  стала ВидТипуЦ16 = 8;
  стала ВидТипуЦ32 = 9;
  стала ВидТипуЦ64 = 10;
  стала ВидТипуР32 = 11;
  стала ВидТипуР64 = 12;
  стала ВидТипуІнструкція = 13;
  стала ВидТипуСтруктура = 14;
  стала ВидТипуМасив = 15;

  структура ДаніТипуСтруктура {
    назва: т8;
    параметри: Параметри;
  }

  структура ДаніТипуМасив {
    тип_елемента: адреса<Тип>;
    розмір: натуральне;
  }

  структура ДаніТипуІнструкція {
    параметри: Параметри;
    тип_результату: адреса<Тип>;
  }

  структура Тип {
    модуль: адреса<Модуль>;
    вид: натуральне;
    дані: ДаніТипуСтруктура 
        | ДаніТипуМасив
        | ДаніТипуІнструкція;
    дані_компіляції: невідома_адреса;
  }

  структура Вказівки {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура Кроки {
    розмір: натуральне;
    дані: памʼять<адреса<Крок>>;
    вмісткість: натуральне;
  }

  стала ВидЗначенняПусто = 0;
  стала ВидЗначенняТак = 1;
  стала ВидЗначенняНі = 2;
  стала ВидЗначенняНатуральне = 3;
  стала ВидЗначенняЦіле = 4;
  стала ВидЗначенняРаціональне = 5;
  стала ВидЗначенняІнструкція = 6;
  стала ВидЗначенняВказівка = 7;
  стала ВидЗначенняГлобальна = 8;
  стала ВидЗначенняКонстантаДаних = 9;
  стала ВидЗначенняОбʼєкт = 10;
  стала ВидЗначенняПустийОбʼєкт = 11;
  стала ВидЗначенняАргумент = 12;

  стала ВидВказівкиНакопичити = 1;
  стала ВидВказівкиДодати = 2;
  стала ВидВказівкиВідняти = 3;
  стала ВидВказівкиПомножити = 4;
  стала ВидВказівкиПоділити = 5;
  стала ВидВказівкиОстача = 6;
  стала ВидВказівкиРівно = 7;
  стала ВидВказівкиНеРівно = 8;
  стала ВидВказівкиБільше = 9;
  стала ВидВказівкиМенше = 10;
  стала ВидВказівкиБільшеРівно = 11;
  стала ВидВказівкиМеншеРівно = 12;
  стала ВидВказівкиЗсунутиВліво = 13;
  стала ВидВказівкиЗсунутиВправо = 14;
  стала ВидВказівкиДвійковеІ = 15;
  стала ВидВказівкиДвійковеАБО = 16;
  стала ВидВказівкиДвійковеВиключнеАБО = 17;
  стала ВидВказівкиДвійковеЗаперечення = 18;
  стала ВидВказівкиПеретворити = 19;
  стала ВидВказівкиЯк = 20;
  стала ВидВказівкиОтриматиАдресуЕлемента = 21;
  стала ВидВказівкиОтриматиЗначення = 22;
  стала ВидВказівкиЗаписати = 23;
  стала ВидВказівкиПрочитати = 24;
  стала ВидВказівкиВернути = 25;
  стала ВидВказівкиВиконати = 100;
  стала ВидВказівкиСтрибнути = 101;
  стала ВидВказівкиСтрибнутиЯкщо = 102;

  структура ДаніОдинарноїВказівки {
    значення: адреса<Значення>;
  }

  структура ДаніДвійноїВказівки {
    ліво: адреса<Значення>;
    право: адреса<Значення>;
  }

  структура ДаніВказівкиВиконати {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиНакопичити {
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиПеретворити {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиЯк {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиОтриматиАдресуЕлемента {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_позицій: натуральне;
    позиції: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиОтриматиЗначення {
    значення: адреса<Значення>;
    позиція: натуральне;
  }

  структура ДаніВказівкиЗаписати {
    значення: адреса<Значення>;
    куди: адреса<Значення>;
  }

  структура ДаніВказівкиПрочитати {
    тип: адреса<Тип>;
    звідки: адреса<Значення>;
  }

  структура ДаніВказівкиВернути {
    значення: адреса<Значення>;
  }

  структура ДаніВказівкиСтрибнути {
    куди: адреса<Крок>;
  }

  структура ДаніВказівкиСтрибнутиЯкщо {
    умова: адреса<Значення>;
    куди: адреса<Крок>;
    інакше_куди: адреса<Крок>;
  }

  структура ДаніЗначенняВказівка {
    крок: адреса<Крок>;
    вид: натуральне;
    дані: ДаніОдинарноїВказівки
        | ДаніДвійноїВказівки
        | ДаніВказівкиВиконати
        | ДаніВказівкиНакопичити
        | ДаніВказівкиПеретворити
        | ДаніВказівкиЯк
        | ДаніВказівкиОтриматиАдресуЕлемента
        | ДаніВказівкиОтриматиЗначення
        | ДаніВказівкиЗаписати
        | ДаніВказівкиПрочитати
        | ДаніВказівкиВернути
        | ДаніВказівкиСтрибнути
        | ДаніВказівкиСтрибнутиЯкщо;
  }

  структура ДаніЗначенняГлобальна {
    видимість: натуральне;
  }

  структура ДаніЗначенняНатуральне {
    значення: н64;
  }

  структура ДаніЗначенняЦіле {
    значення: ц64;
  }

  структура ДаніЗначенняРаціональне {
    значення: р64;
  }

  структура ДаніЗначенняКонстантаДаних {
    розмір: натуральне;
    дані: памʼять<н8>;
  }

  структура ДаніЗначенняОбʼєкт {
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ДаніЗначенняАргумент {
    позиція: натуральне;
    інструкція: адреса<Значення>;
  }

  структура ЗначенняАргументів {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура ДаніЗначенняІнструкція {
    модуль: адреса<Модуль>;
    видимість: натуральне;
    назва: т8;
    тип: адреса<Тип>;
    кроки: Кроки;
    значення_аргументів: ЗначенняАргументів;
  }

  структура Значення {
    модуль: адреса<Модуль>;
    вид: натуральне;
    тип: адреса<Тип>;
    дані: ДаніЗначенняВказівка 
        | ДаніЗначенняГлобальна 
        | ДаніЗначенняНатуральне 
        | ДаніЗначенняЦіле 
        | ДаніЗначенняРаціональне
        | ДаніЗначенняКонстантаДаних
        | ДаніЗначенняОбʼєкт
        | ДаніЗначенняІнструкція
        | ДаніЗначенняАргумент;
    дані_компіляції: невідома_адреса;
  }

  структура Крок {
    інструкція: адреса<Інструкція>;
    назва: т8;
    вказівки: Вказівки;
    дані_компіляції: невідома_адреса;
  }

  дія покласти_крок(інструкція: адреса<Інструкція>, крок: адреса<Крок>) {
    змінна пм_значення = інструкція як адреса<Значення>;
    змінна дані_інструкції = пм_значення.дані як ДаніЗначенняІнструкція;

    якщо дані_інструкції.кроки.розмір == дані_інструкції.кроки.вмісткість {
      дані_інструкції.кроки.вмісткість += 1;
      дані_інструкції.кроки.дані = біб::перевиділити_памʼять<адреса<Крок>>(дані_інструкції.модуль.виділяч, дані_інструкції.кроки.дані, дані_інструкції.кроки.вмісткість);
    }

    дані_інструкції.кроки.дані[дані_інструкції.кроки.розмір] = крок;
    дані_інструкції.кроки.розмір += 1;

    пм_значення.дані = дані_інструкції;
  }

  місцева дія покласти_параметр(модуль: адреса<Модуль>, параметри: адреса<Параметри>, параметр: Параметр) {
    якщо параметри.розмір == параметри.вмісткість {
      параметри.вмісткість += 1;
      параметри.дані = біб::перевиділити_памʼять<Параметр>(модуль.виділяч, параметри.дані, параметри.вмісткість);
    }

    параметри.дані[параметри.розмір] = параметр;
    параметри.розмір += 1;
  }

  дія виділити_тип(модуль: адреса<Модуль>, вид: натуральне) -> адреса<Тип> {
    змінна тип = біб::виділити<Тип>(модуль.виділяч);

    тип.модуль = модуль;
    тип.вид = вид;
    тип.дані_компіляції = пусто;

    вернути тип;
  }

  дія виділити_значення(модуль: адреса<Модуль>, вид: натуральне, тип: адреса<Тип>) -> адреса<Значення> {
    змінна значення = біб::виділити<Значення>(модуль.виділяч);

    значення.модуль = модуль;
    значення.вид = вид;
    значення.тип = тип;
    значення.дані_компіляції = пусто;

    вернути значення;
  }

  місцева дія створити_модуль(назва: т8, архітектура: натуральне, постачальник: натуральне, система: натуральне) -> адреса<Модуль> {
    змінна виділяч = біб::отримати_системний_виділяч();
    
    змінна модуль = біб::виділити<Модуль>(виділяч);

    модуль.виділяч = виділяч;
    модуль.типи = біб::виділити_текстовий_реєстр<адреса<Тип>>(модуль.виділяч, 0, пусто);
    модуль.глобальні = біб::виділити_текстовий_реєстр<адреса<Значення>>(модуль.виділяч, 0, пусто);
    
    модуль.тип_ніщо = виділити_тип(модуль, ВидТипуНіщо);
    модуль.тип_адреса = виділити_тип(модуль, ВидТипуАдреса);
    модуль.тип_логічне = виділити_тип(модуль, ВидТипуЛогічне);
    модуль.тип_н8 = виділити_тип(модуль, ВидТипуН8);
    модуль.тип_н16 = виділити_тип(модуль, ВидТипуН16);
    модуль.тип_н32 = виділити_тип(модуль, ВидТипуН32);
    модуль.тип_н64 = виділити_тип(модуль, ВидТипуН64);
    модуль.тип_ц8 = виділити_тип(модуль, ВидТипуЦ8);
    модуль.тип_ц16 = виділити_тип(модуль, ВидТипуЦ16);
    модуль.тип_ц32 = виділити_тип(модуль, ВидТипуЦ32);
    модуль.тип_ц64 = виділити_тип(модуль, ВидТипуЦ64);
    модуль.тип_р32 = виділити_тип(модуль, ВидТипуР32);
    модуль.тип_р64 = виділити_тип(модуль, ВидТипуР64);

    модуль.значення_пусто = виділити_значення(модуль, ВидЗначенняПусто, модуль.тип_адреса);
    модуль.значення_так = виділити_значення(модуль, ВидЗначенняТак, модуль.тип_логічне);
    модуль.значення_ні = виділити_значення(модуль, ВидЗначенняНі, модуль.тип_логічне);

    вернути модуль;
  }

  місцева дія створити_інструкцію(модуль: адреса<Модуль>, видимість: натуральне, назва: т8, параметри: Параметри, тип_результату: адреса<Тип>) -> адреса<Інструкція> {
    змінна тип_інструкції = створити_тип_інструкції(модуль, параметри, тип_результату);
    змінна значення_інструкції = виділити_значення(модуль, ВидЗначенняІнструкція, тип_інструкції);

    змінна значення_аргументів = біб::виділити_памʼять<адреса<Значення>>(модуль.виділяч, параметри.розмір);
    змінна п: натуральне = 0;
    поки п < параметри.розмір {
      значення_аргументів[п] = виділити_значення(модуль, ВидЗначенняАргумент, параметри.дані[п].тип);
      значення_аргументів[п].дані = ДаніЗначенняАргумент { п, значення_інструкції };
      
      п += 1;
    }

    значення_інструкції.дані = ДаніЗначенняІнструкція {
      модуль = модуль,
      видимість = видимість,
      назва = назва,
      тип = тип_інструкції,
      кроки = Кроки { 0, пусто, 0 },
      значення_аргументів = ЗначенняАргументів { параметри.розмір, значення_аргументів, параметри.розмір },
    };

    біб::змінити_в_реєстрі<т8, адреса<Значення>>(модуль.глобальні, назва, значення_інструкції);

    вернути значення_інструкції як адреса<Інструкція>;
  }

  місцева дія отримати_тип_інструкції(інструкція: адреса<Інструкція>) -> адреса<Тип> {
    змінна значення_інструкції = інструкція як адреса<Значення>;
    змінна дані_інструкції = значення_інструкції.дані як ДаніЗначенняІнструкція;
    
    вернути дані_інструкції.тип;
  }

  місцева дія створити_тип_інструкції(модуль: адреса<Модуль>, параметри: Параметри, тип_результату: адреса<Тип>) -> адреса<Тип> {
    змінна тип = виділити_тип(модуль, ВидТипуІнструкція);

    тип.дані = ДаніТипуІнструкція { параметри, тип_результату };

    вернути тип;
  }

  місцева дія отримати_значення_аргумента_інструкції(інструкція: адреса<Інструкція>, позиція: натуральне) -> адреса<Значення> {
    змінна значення_інструкції = інструкція як адреса<Значення>;
    змінна дані_інструкції = значення_інструкції.дані як ДаніЗначенняІнструкція;

    вернути дані_інструкції.значення_аргументів.дані[позиція];
  }

  місцева дія створити_крок(інструкція: адреса<Інструкція>, назва: т8) -> адреса<Крок> {
    змінна значення_інструкції = інструкція як адреса<Значення>;
    змінна дані_інструкції = значення_інструкції.дані як ДаніЗначенняІнструкція;

    змінна крок = біб::виділити<Крок>(дані_інструкції.модуль.виділяч);

    крок.інструкція = інструкція;
    крок.назва = назва;
    крок.вказівки = Вказівки { 0, пусто, 0 };
    крок.дані_компіляції = пусто;

    покласти_крок(інструкція, крок);
    
    вернути крок;
  }

  місцева дія перевірити_чи_крок_закінчується_стрибком(крок: адреса<Крок>) -> логічне {
    якщо крок.вказівки.розмір > 0 {
      якщо крок.вказівки.дані[крок.вказівки.розмір - 1].вид == ВидВказівкиСтрибнути {
        вернути так;
      }
    }

    вернути ні;
  }

  місцева дія створити_структуру(модуль: адреса<Модуль>, назва: т8, параметри: Параметри) -> адреса<Тип> {
    змінна тип = виділити_тип(модуль, ВидТипуСтруктура);

    тип.дані = ДаніТипуСтруктура { назва, параметри };

    біб::змінити_в_реєстрі<т8, адреса<Тип>>(модуль.типи, назва, тип);

    вернути тип;
  }

  місцева дія заповнити_параметри_структури(тип: адреса<Тип>, параметри: Параметри) {
    якщо тип.вид != ВидТипуСтруктура {
      вернути;
    }

    змінна дані = тип.дані як ДаніТипуСтруктура;
    дані.параметри = параметри; 
    
    тип.дані = дані;
  }

  дія отримати_модуль_з_інструкції(інструкція: адреса<Інструкція>) -> адреса<Модуль> {
    змінна значення_інструкції = інструкція як адреса<Значення>;
    змінна дані_інструкції = значення_інструкції.дані як ДаніЗначенняІнструкція;

    вернути дані_інструкції.модуль;
  }

  дія покласти_вказівку(крок: адреса<Крок>, вказівка: адреса<Значення>) {
    якщо крок.вказівки.розмір == крок.вказівки.вмісткість {
      крок.вказівки.вмісткість += 1;
      крок.вказівки.дані = біб::перевиділити_памʼять<адреса<Значення>>(отримати_модуль_з_інструкції(крок.інструкція).виділяч, крок.вказівки.дані, крок.вказівки.вмісткість);
    }

    крок.вказівки.дані[крок.вказівки.розмір] = вказівка;
    крок.вказівки.розмір += 1;
  }

  місцева дія виконати_дію(крок: адреса<Крок>, тип: адреса<Тип>, значення: адреса<Значення>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна модуль = отримати_модуль_з_інструкції(крок.інструкція);
    змінна дані_типу_інструкція = тип.дані як ДаніТипуІнструкція;

    змінна значення_вказівки = виділити_значення(модуль, ВидЗначенняВказівка, дані_типу_інструкція.тип_результату);

    значення_вказівки.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВиконати,
      дані = ДаніВказівкиВиконати { тип, значення, кількість_аргументів, аргументи }
    };

    покласти_вказівку(крок, значення_вказівки);

    вернути значення_вказівки;
  }

  місцева дія отримати_розмір_типу_для_виділення(модуль: адреса<Модуль>, тип: адреса<Тип>) -> натуральне {
    якщо тип == пусто {
      вернути 0;
    }

    якщо тип.вид == ВидТипуЛогічне {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуН8 {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуН16 {
      вернути 2;
    } інакше якщо тип.вид == ВидТипуН32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуН64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуЦ8 {
      вернути 1;
    } інакше якщо тип.вид == ВидТипуЦ16 {
      вернути 2;
    } інакше якщо тип.вид == ВидТипуЦ32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуЦ64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуР32 {
      вернути 4;
    } інакше якщо тип.вид == ВидТипуР64 {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуАдреса {
      вернути 8;
    } інакше якщо тип.вид == ВидТипуСтруктура {
      змінна дані_структури = тип.дані як ДаніТипуСтруктура;

      змінна розмір: натуральне = 0;
      змінна п: натуральне = 0;
      поки п < дані_структури.параметри.розмір {
        змінна розмір_параметра = отримати_розмір_типу_для_виділення(модуль, дані_структури.параметри.дані[п].тип);
        
        якщо розмір_параметра < 8 {
          розмір_параметра = 8;
        }
        
        розмір += розмір_параметра;
        п += 1;
      }

      вернути розмір;
    }

    вернути 0;
  }

  місцева дія створити_глобальну(модуль: адреса<Модуль>, назва: т8, видимість: натуральне, тип: адреса<Тип>) -> адреса<Значення> {
    змінна значення_глобальної = виділити_значення(модуль, ВидЗначенняГлобальна, тип);

    значення_глобальної.дані = ДаніЗначенняГлобальна { видимість };

    біб::змінити_в_реєстрі<т8, адреса<Значення>>(модуль.глобальні, назва, значення_глобальної);

    вернути значення_глобальної;
  }

  місцева дія отримати_значення_пусто(модуль: адреса<Модуль>) -> адреса<Значення> {
    вернути модуль.значення_пусто;
  }

  місцева дія отримати_тип_ніщо(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ніщо;
  }

  місцева дія отримати_тип_адреса(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_адреса;
  }

  місцева дія отримати_тип_логічне(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_логічне;
  }

  місцева дія отримати_тип_ц8(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц8;
  }

  місцева дія отримати_тип_ц16(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц16;
  }

  місцева дія отримати_тип_ц32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц32;
  }

  місцева дія отримати_тип_ц64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_ц64;
  }

  місцева дія отримати_тип_н8(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н8;
  }

  місцева дія отримати_тип_н16(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н16;
  }

  місцева дія отримати_тип_н32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н32;
  }

  місцева дія отримати_тип_н64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_н64;
  }

  місцева дія отримати_тип_р32(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_р32;
  }

  місцева дія отримати_тип_р64(модуль: адреса<Модуль>) -> адреса<Тип> {
    вернути модуль.тип_р64;
  }

  місцева дія створити_логічне(модуль: адреса<Модуль>, значення: логічне) -> адреса<Значення> {
    якщо значення {
      вернути модуль.значення_так;
    }

    вернути модуль.значення_ні;
  }

  місцева дія створити_ц8(модуль: адреса<Модуль>, значення: ц8) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняЦіле, модуль.тип_ц8);

    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_ц16(модуль: адреса<Модуль>, значення: ц16) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняЦіле, модуль.тип_ц16);

    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_ц32(модуль: адреса<Модуль>, значення: ц32) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняЦіле, модуль.тип_ц32);

    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_ц64(модуль: адреса<Модуль>, значення: ц64) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняЦіле, модуль.тип_ц64);

    пм_значення.дані = ДаніЗначенняЦіле { ц64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_п8(модуль: адреса<Модуль>, значення: п8) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняНатуральне, модуль.тип_н8);

    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_п16(модуль: адреса<Модуль>, значення: п16) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняНатуральне, модуль.тип_н16);

    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_п32(модуль: адреса<Модуль>, значення: п32) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняНатуральне, модуль.тип_н32);

    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_п64(модуль: адреса<Модуль>, значення: п64) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняНатуральне, модуль.тип_н64);

    пм_значення.дані = ДаніЗначенняНатуральне { н64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_д32(модуль: адреса<Модуль>, значення: д32) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняРаціональне, модуль.тип_р32);

    пм_значення.дані = ДаніЗначенняРаціональне { р64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_д64(модуль: адреса<Модуль>, значення: д64) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняРаціональне, модуль.тип_р64);

    пм_значення.дані = ДаніЗначенняРаціональне { р64(значення) };

    вернути пм_значення;
  }

  місцева дія створити_константу_даних(модуль: адреса<Модуль>, розмір: натуральне, дані: памʼять<н8>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняКонстантаДаних, модуль.тип_адреса);

    пм_значення.дані = ДаніЗначенняКонстантаДаних { розмір, дані };

    вернути пм_значення;
  }

  місцева дія створити_обʼєкт(модуль: адреса<Модуль>, тип: адреса<Тип>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняОбʼєкт, тип);

    пм_значення.дані = ДаніЗначенняОбʼєкт { кількість_аргументів, аргументи };

    вернути пм_значення;
  }

  місцева дія створити_пусте_значення(модуль: адреса<Модуль>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення(модуль, ВидЗначенняПустийОбʼєкт, тип);

    вернути пм_значення;
  }
  
  дія виділити_значення_вказівки(крок: адреса<Крок>, тип: адреса<Тип>, дані: ДаніЗначенняВказівка) -> адреса<Значення> {
    змінна модуль = отримати_модуль_з_інструкції(крок.інструкція);

    змінна пм_значення = виділити_значення(модуль, ВидЗначенняВказівка, тип);

    пм_значення.дані = дані;

    вернути пм_значення;
  }

  місцева дія вказівка_накопичити(крок: адреса<Крок>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНакопичити,
      дані = ДаніВказівкиНакопичити { тип }
    });

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_додати_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДодати,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_відняти_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВідняти,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_помножити_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПомножити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_поділити_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПоділити,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_остача_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОстача,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_рівно_адреса(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_не_рівно_адреса(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиНеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМенше,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_більше_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиБільшеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_д32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_менше_рівно_д64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиМеншеРівно,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вліво_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВліво,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_зсунути_вправо_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗсунутиВправо,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_і_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеІ,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_або_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_логічне(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_ц64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п8(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п16(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п32(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_виключне_або_п64(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, ліво.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеВиключнеАБО,
      дані = ДаніДвійноїВказівки { ліво, право }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_двійкове_заперечення_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиДвійковеЗаперечення,
      дані = ДаніОдинарноїВказівки { значення }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія покласти_вказівку_перетворити(крок: адреса<Крок>, значення: адреса<Значення>, очікуваний_тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = виділити_значення_вказівки(крок, значення.тип, ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПеретворити,
      дані = ДаніВказівкиПеретворити { значення, очікуваний_тип }
    });
    
    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія перетворити_логічне_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_логічне_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_логічне_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_логічне_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_логічне_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_логічне_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_логічне_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_логічне_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_логічне_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_логічне_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_логічне_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц8_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц8_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц8_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц8_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц8_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц8_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц8_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц8_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц8_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц8_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц8_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц16_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц16_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц16_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц16_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц16_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц16_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц16_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц16_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц16_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц16_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц16_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_ц32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц32_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц32_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_ц64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_ц64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_ц64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_ц64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_ц64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_ц64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_ц64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_ц64_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_ц64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_ц64_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_ц64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п8_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п8_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п8_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п8_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п8_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п8_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п8_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п8_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п8_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п8_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п8_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п16_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п16_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п16_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п16_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п16_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п16_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п16_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п16_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п16_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п16_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п16_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п32_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_п32_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_п64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_п64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_п64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_п64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_п64_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_п64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_п64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_п64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_п64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_п64_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_п64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_д32_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_д32_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_д32_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_д32_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_д32_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_д32_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_д32_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_д32_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_д32_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_д32_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія перетворити_д32_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_д64_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_д64_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_д64_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_д64_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_д64_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_д64_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_д64_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_д64_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_д64_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_д64_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_д64_на_адресу(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_адреса);
  }

  місцева дія перетворити_адресу_на_логічне(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_логічне);
  }

  місцева дія перетворити_адресу_на_ц8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц8);
  }

  місцева дія перетворити_адресу_на_ц16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц16);
  }

  місцева дія перетворити_адресу_на_ц32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц32);
  }

  місцева дія перетворити_адресу_на_ц64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_ц64);
  }

  місцева дія перетворити_адресу_на_п8(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н8);
  }

  місцева дія перетворити_адресу_на_п16(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н16);
  }

  місцева дія перетворити_адресу_на_п32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н32);
  }

  місцева дія перетворити_адресу_на_п64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_н64);
  }

  місцева дія перетворити_адресу_на_д32(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р32);
  }

  місцева дія перетворити_адресу_на_д64(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення> {
    вернути покласти_вказівку_перетворити(крок, значення, отримати_модуль_з_інструкції(крок.інструкція).тип_р64);
  }

  місцева дія вказівка_як(крок: адреса<Крок>, значення: адреса<Значення>, тип: адреса<Тип>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЯк,
      дані = ДаніВказівкиЯк { значення, тип }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_отримати_адресу_елемента(крок: адреса<Крок>, тип: адреса<Тип>, значення: адреса<Значення>, кількість_позицій: натуральне, позиції: памʼять<адреса<Значення>>) -> адреса<Значення> {
    змінна модуль = отримати_модуль_з_інструкції(крок.інструкція);
    
    змінна пм_значення = біб::виділити<Значення>(модуль.виділяч);

    змінна копія_позиції = біб::виділити_памʼять<адреса<Значення>>(модуль.виділяч, кількість_позицій);

    змінна п: натуральне = 0;
    поки п < кількість_позицій {
      копія_позиції[п] = позиції[п];
      
      п += 1;
    }

    пм_значення.модуль = модуль;
    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОтриматиАдресуЕлемента,
      дані = ДаніВказівкиОтриматиАдресуЕлемента { тип, значення, кількість_позицій, копія_позиції }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_отримати_значення(крок: адреса<Крок>, значення: адреса<Значення>, позиція: натуральне) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = значення.тип;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиОтриматиЗначення,
      дані = ДаніВказівкиОтриматиЗначення { значення, позиція }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_стрибнути(крок: адреса<Крок>, куди: адреса<Крок>) -> адреса<Стрибок> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиСтрибнути,
      дані = ДаніВказівкиСтрибнути { куди }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення як адреса<Стрибок>;
  }

  місцева дія змінити_крок_стрибка(стрибок: адреса<Стрибок>, куди: адреса<Крок>) {
    змінна пм_значення = стрибок як адреса<Значення>;

    якщо пм_значення.вид == ВидЗначенняВказівка {
      змінна пм_дані = пм_значення.дані як ДаніЗначенняВказівка;

      якщо пм_дані.вид == ВидВказівкиСтрибнути {
        змінна пм_дані_стрибка = пм_дані.дані як ДаніВказівкиСтрибнути;
    
        пм_дані_стрибка.куди = куди;
  
        пм_дані.дані = пм_дані_стрибка;
        пм_значення.дані = пм_дані;
      }
    }
  }

  місцева дія вказівка_стрибнути_якщо(крок: адреса<Крок>, значення: адреса<Значення>, якщо_так: адреса<Крок>, якщо_ні: адреса<Крок>) -> адреса<Стрибок> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_адреса;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиСтрибнутиЯкщо,
      дані = ДаніВказівкиСтрибнутиЯкщо { значення, якщо_так, якщо_ні }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення як адреса<Стрибок>;
  }

  місцева дія вказівка_записати(крок: адреса<Крок>, значення: адреса<Значення>, куди: адреса<Значення>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиЗаписати,
      дані = ДаніВказівкиЗаписати { значення, куди }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  місцева дія вказівка_прочитати(крок: адреса<Крок>, тип: адреса<Тип>, звідки: адреса<Значення>) -> адреса<Значення> {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = тип;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиПрочитати,
      дані = ДаніВказівкиПрочитати { тип, звідки }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути пм_значення;
  }

  місцева дія вказівка_вернути(крок: адреса<Крок>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВернути,
      дані = ДаніВказівкиВернути { пусто }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  місцева дія вказівка_вернути_значення(крок: адреса<Крок>, значення: адреса<Значення>) {
    змінна пм_значення = біб::виділити<Значення>(отримати_модуль_з_інструкції(крок.інструкція).виділяч);

    пм_значення.вид = ВидЗначенняВказівка;
    пм_значення.тип = отримати_модуль_з_інструкції(крок.інструкція).тип_ніщо;
    пм_значення.дані = ДаніЗначенняВказівка {
      крок = крок,
      вид = ВидВказівкиВернути,
      дані = ДаніВказівкиВернути { значення }
    };
    пм_значення.дані_компіляції = пусто;

    покласти_вказівку(крок, пм_значення);

    вернути;
  }

  дія отримати_ю8_з_т8(значення: т8) -> ю8 {
    змінна результат = ю8 { 0, пусто };

    змінна позиція_помилки: позитивне = 0;

    якщо біб::перекодувати_т8_в_ю8(біб::отримати_системний_виділяч(), значення, ні, результат::адреса, пусто, позиція_помилки::адреса) == ні {
      // потім: обробити помилку
    }

    вернути результат;
  }

  дія скомпілювати_тип(ллвм_модуль: адреса<ЛЛВМ::Модуль>, тип: адреса<Тип>) -> логічне;
  дія скомпілювати_значення(ллвм_модуль: адреса<ЛЛВМ::Модуль>, значення: адреса<Значення>) -> логічне;

  дія скомпілювати_параметри(модуль: адреса<Модуль>, ллвм_модуль: адреса<ЛЛВМ::Модуль>, параметри: Параметри, вихід: адреса<памʼять<адреса<ЛЛВМ::Тип>>>) -> логічне {
    змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;

    якщо параметри.розмір > 0 {
      ллвм_параметри = біб::виділити_памʼять<адреса<ЛЛВМ::Тип>>(модуль.виділяч, параметри.розмір);
      
      змінна п: натуральне = 0;
      поки п < параметри.розмір {
        якщо параметри.дані[п].тип == пусто {
          ллвм_параметри[п] = ЛЛВМ::тип_войд();
        } інакше {
          якщо не скомпілювати_тип(ллвм_модуль, параметри.дані[п].тип) {
            біб::звільнити_памʼять(модуль.виділяч, ллвм_параметри);
            вернути ні;
          }

          ллвм_параметри[п] = параметри.дані[п].тип.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        п += 1;
      }
    }

    вихід::вміст = ллвм_параметри;

    вернути так;
  }

  дія скомпілювати_тип(ллвм_модуль: адреса<ЛЛВМ::Модуль>, тип: адреса<Тип>) -> логічне {
    якщо тип == пусто {
      вернути так;
    }

    якщо тип.дані_компіляції == пусто {
      якщо тип.вид == ВидТипуНіщо {
        тип.дані_компіляції = ЛЛВМ::тип_войд();
      } інакше якщо тип.вид == ВидТипуАдреса {
        тип.дані_компіляції = ЛЛВМ::тип_пойнтер();
      } інакше якщо тип.вид == ВидТипуЛогічне {
        тип.дані_компіляції = ЛЛВМ::тип_і1();
      } інакше якщо тип.вид == ВидТипуЦ8 {
        тип.дані_компіляції = ЛЛВМ::тип_і8();
      } інакше якщо тип.вид == ВидТипуЦ16 {
        тип.дані_компіляції = ЛЛВМ::тип_і16();
      } інакше якщо тип.вид == ВидТипуЦ32 {
        тип.дані_компіляції = ЛЛВМ::тип_і32();
      } інакше якщо тип.вид == ВидТипуЦ64 {
        тип.дані_компіляції = ЛЛВМ::тип_і64();
      } інакше якщо тип.вид == ВидТипуН8 {
        тип.дані_компіляції = ЛЛВМ::тип_і8();
      } інакше якщо тип.вид == ВидТипуН16 {
        тип.дані_компіляції = ЛЛВМ::тип_і16();
      } інакше якщо тип.вид == ВидТипуН32 {
        тип.дані_компіляції = ЛЛВМ::тип_і32();
      } інакше якщо тип.вид == ВидТипуН64 {
        тип.дані_компіляції = ЛЛВМ::тип_і64();
      } інакше якщо тип.вид == ВидТипуР32 {
        тип.дані_компіляції = ЛЛВМ::тип_флоат();
      } інакше якщо тип.вид == ВидТипуР64 {
        тип.дані_компіляції = ЛЛВМ::тип_даубл();
      } інакше якщо тип.вид == ВидТипуІнструкція {
        змінна дані_типу_інструкція = тип.дані як ДаніТипуІнструкція;

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(тип.модуль, ллвм_модуль, дані_типу_інструкція.параметри, ллвм_параметри::адреса);

        змінна ллвм_тип_результату = ЛЛВМ::тип_войд();
        якщо дані_типу_інструкція.тип_результату != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_інструкція.тип_результату) {
            вернути ні;
          }

          ллвм_тип_результату = дані_типу_інструкція.тип_результату.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        тип.дані_компіляції = ЛЛВМ::тип_функція(
          дані_типу_інструкція.параметри.розмір, 
          ллвм_параметри, 
          ллвм_тип_результату
        );

        біб::звільнити_памʼять(тип.модуль.виділяч, ллвм_параметри);
      } інакше якщо тип.вид == ВидТипуСтруктура {
        змінна дані_типу_структура = тип.дані як ДаніТипуСтруктура;

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(тип.модуль, ллвм_модуль, дані_типу_структура.параметри, ллвм_параметри::адреса);

        змінна назва_ю8 = отримати_ю8_з_т8(дані_типу_структура.назва);

        тип.дані_компіляції = ЛЛВМ::тип(
          назва_ю8,
          дані_типу_структура.параметри.розмір, 
          ллвм_параметри
        );

        біб::звільнити_памʼять(тип.модуль.виділяч, ллвм_параметри);
        біб::звільнити_памʼять(тип.модуль.виділяч, назва_ю8.дані);
      } інакше якщо тип.вид == ВидТипуМасив {
        змінна дані_типу_масив = тип.дані як ДаніТипуМасив;

        змінна ллвм_тип_елемента = ЛЛВМ::тип_войд();
        якщо дані_типу_масив.тип_елемента != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_масив.тип_елемента) {
            вернути ні;
          }

          ллвм_тип_елемента = дані_типу_масив.тип_елемента.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }
        
        тип.дані_компіляції = ЛЛВМ::тип_аррай(
          ллвм_тип_елемента,
          дані_типу_масив.розмір
        );
      } інакше {
        // потім: обробити помилку
      }
    }

    вернути так;
  }

  дія скомпілювати_значення(ллвм_модуль: адреса<ЛЛВМ::Модуль>, значення: адреса<Значення>) -> логічне {
    якщо значення.дані_компіляції == пусто {
      якщо не скомпілювати_тип(ллвм_модуль, значення.тип) {
        вернути ні;
      }

      змінна модуль = значення.модуль;

      якщо значення.вид == ВидЗначенняПусто {
        значення.дані_компіляції = ЛЛВМ::нулл();
      } якщо значення.вид == ВидЗначенняТак {
        значення.дані_компіляції = ЛЛВМ::і1(1);
      } якщо значення.вид == ВидЗначенняНі {
        значення.дані_компіляції = ЛЛВМ::і1(0);
      } якщо значення.вид == ВидЗначенняНатуральне {
        змінна дані_значення_натуральне = значення.дані як ДаніЗначенняНатуральне;

        якщо значення.тип.вид == ВидТипуН8 {  
          значення.дані_компіляції = ЛЛВМ::і8(н8(дані_значення_натуральне.значення));  
        } інакше якщо значення.тип.вид == ВидТипуН16 {  
          значення.дані_компіляції = ЛЛВМ::і16(н16(дані_значення_натуральне.значення));  
        } інакше якщо значення.тип.вид == ВидТипуН32 {  
          значення.дані_компіляції = ЛЛВМ::і32(н32(дані_значення_натуральне.значення));  
        } інакше якщо значення.тип.вид == ВидТипуН64 {  
          значення.дані_компіляції = ЛЛВМ::і64(н64(дані_значення_натуральне.значення));  
        } інакше {
          // потім: обробити помилку
        }
      } якщо значення.вид == ВидЗначенняЦіле {
        змінна дані_значення_ціле = значення.дані як ДаніЗначенняЦіле;

        якщо значення.тип.вид == ВидТипуЦ8 {  
          значення.дані_компіляції = ЛЛВМ::і8ц(ц8(дані_значення_ціле.значення));  
        } інакше якщо значення.тип.вид == ВидТипуЦ16 {  
          значення.дані_компіляції = ЛЛВМ::і16ц(ц16(дані_значення_ціле.значення));  
        } інакше якщо значення.тип.вид == ВидТипуЦ32 {  
          значення.дані_компіляції = ЛЛВМ::і32ц(ц32(дані_значення_ціле.значення));  
        } інакше якщо значення.тип.вид == ВидТипуЦ64 {  
          значення.дані_компіляції = ЛЛВМ::і64ц(ц64(дані_значення_ціле.значення));  
        } інакше {
          // потім: обробити помилку
        }
      } якщо значення.вид == ВидЗначенняРаціональне {
        змінна дані_значення_раціональне = значення.дані як ДаніЗначенняРаціональне;

        якщо значення.тип.вид == ВидТипуР32 {  
          значення.дані_компіляції = ЛЛВМ::флоат(р32(дані_значення_раціональне.значення));  
        } інакше якщо значення.тип.вид == ВидТипуР64 {  
          значення.дані_компіляції = ЛЛВМ::даубл(р64(дані_значення_раціональне.значення));  
        } інакше {
          // потім: обробити помилку
        }
      } інакше якщо значення.вид == ВидЗначенняІнструкція {
        змінна дані_інструкції = значення.дані як ДаніЗначенняІнструкція;
        змінна дані_типу_інструкція = дані_інструкції.тип.дані як ДаніТипуІнструкція;
        
        змінна назва_ю8 = отримати_ю8_з_т8(дані_інструкції.назва);

        змінна ллвм_параметри: памʼять<адреса<ЛЛВМ::Тип>> = пусто;
        скомпілювати_параметри(значення.модуль, ллвм_модуль, дані_типу_інструкція.параметри, ллвм_параметри::адреса);

        змінна ллвм_тип_результату = ЛЛВМ::тип_войд();
        якщо дані_типу_інструкція.тип_результату != пусто {
          якщо не скомпілювати_тип(ллвм_модуль, дані_типу_інструкція.тип_результату) {
            вернути ні;
          }

          ллвм_тип_результату = дані_типу_інструкція.тип_результату.дані_компіляції як адреса<ЛЛВМ::Тип>;
        }

        змінна функція = ЛЛВМ::створити_функцію(
          ллвм_модуль, 
          ВИДИМІСТЬ_ЗОВНІШНЯ,
          назва_ю8, 
          дані_типу_інструкція.параметри.розмір, 
          ллвм_параметри, 
          ллвм_тип_результату
        );
  
        значення.дані_компіляції = функція;

        змінна п: натуральне = 0;

        п = 0;

        змінна скомпільовано_значення_аргументів = ні;

        поки п < дані_інструкції.кроки.розмір {
          змінна крок = дані_інструкції.кроки.дані[п];

          якщо крок.дані_компіляції == пусто {
            змінна назва_ю8 = отримати_ю8_з_т8(крок.назва);

            змінна ллвм_базовий_блок = ЛЛВМ::створити_базовий_блок(функція, назва_ю8);

            біб::звільнити_памʼять(значення.модуль.виділяч, назва_ю8.дані);

            крок.дані_компіляції = ллвм_базовий_блок;

            якщо не скомпільовано_значення_аргументів {
              змінна па: натуральне = 0;
              поки па < дані_інструкції.значення_аргументів.розмір {
                якщо не скомпілювати_значення(ллвм_модуль, дані_інструкції.значення_аргументів.дані[па]) {
                  вернути ні;
                }
      
                па += 1;
              }
              
              скомпільовано_значення_аргументів = так;
            }

            змінна пп: натуральне = 0;

            поки пп < крок.вказівки.розмір {
              змінна вказівка = крок.вказівки.дані[пп];

              якщо не скомпілювати_значення(ллвм_модуль, вказівка) {
                вернути ні;
              }

              пп += 1;
            }
          }

          п += 1;
        }

        біб::звільнити_памʼять(дані_інструкції.модуль.виділяч, назва_ю8.дані);
        біб::звільнити_памʼять(дані_інструкції.модуль.виділяч, ллвм_параметри);
      } інакше якщо значення.вид == ВидЗначенняВказівка {
        змінна дані_значення_вказівка = значення.дані як ДаніЗначенняВказівка;

          біб::надрукувати_позитивне(дані_значення_вказівка.вид);

        якщо дані_значення_вказівка.вид == ВидВказівкиНакопичити {
          змінна дані_вказівки_накопичити = дані_значення_вказівка.дані як ДаніВказівкиНакопичити;
          
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_накопичити.тип) {
            вернути ні;
          }
          
          змінна ллвм_значення_накопичити = ЛЛВМ::інст_аллока(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_накопичити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
          );

          значення.дані_компіляції = ллвм_значення_накопичити;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиДодати {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_додати: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_додати = ЛЛВМ::інст_адд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення_додати = ЛЛВМ::інст_фадд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_додати;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиВідняти {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_відняти: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_відняти = ЛЛВМ::інст_саб(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення_відняти = ЛЛВМ::інст_фсаб(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_відняти;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиПомножити {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення_помножити: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення_помножити = ЛЛВМ::інст_мул(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення_помножити = ЛЛВМ::інст_фмул(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення_помножити;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиПоділити {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_удів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_сдів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фдів(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиОстача {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_урем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_срем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фрем(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпекʼю(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиНеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуне(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиБільше {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпугт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсгт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпугт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиМенше {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпулт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпслт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпулт(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиБільшеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпуге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуге(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиМеншеРівно {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іцмпуле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іцмпсле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_р32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_р64 {
            ллвм_значення = ЛЛВМ::інст_фцмпуле(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиЗсунутиВліво {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_шл(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_шл(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиЗсунутиВправо {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_лшр(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_ашр(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиДвійковеІ {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_анд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_анд(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиДвійковеАБО {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_ор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_ор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиДвійковеВиключнеАБО {
          змінна дані_двійної_вказівки = дані_значення_вказівка.дані як ДаніДвійноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.ліво) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_двійної_вказівки.право) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_двійної_вказівки.ліво.тип == модуль.тип_адреса
           або дані_двійної_вказівки.ліво.тип == модуль.тип_логічне
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н8
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н16
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н32
           або дані_двійної_вказівки.ліво.тип == модуль.тип_н64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          } інакше якщо дані_двійної_вказівки.ліво.тип == модуль.тип_ц8
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц16
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц32
                    або дані_двійної_вказівки.ліво.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_двійної_вказівки.ліво.дані_компіляції як адреса<ЛЛВМ::Значення>,
              дані_двійної_вказівки.право.дані_компіляції як адреса<ЛЛВМ::Значення>
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиДвійковеЗаперечення {
          змінна дані_одинарної_вказівки = дані_значення_вказівка.дані як ДаніОдинарноїВказівки;

          якщо не скомпілювати_значення(ллвм_модуль, дані_одинарної_вказівки.значення) {
            вернути ні;
          }
          
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_одинарної_вказівки.значення.тип == модуль.тип_логічне {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і1(255)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_н8 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц8 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і8(255)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_н16 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц16 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і16(65535)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_н32 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц32 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і32(4294967295)
            );
          } інакше якщо дані_одинарної_вказівки.значення.тип == модуль.тип_н64 або дані_одинарної_вказівки.значення.тип == модуль.тип_ц64 {
            ллвм_значення = ЛЛВМ::інст_іксор(
              дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
              дані_одинарної_вказівки.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
              ЛЛВМ::і64(18446744073709551615)
            );
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиПеретворити {
          змінна дані_вказівки_перетворити = дані_значення_вказівка.дані як ДаніВказівкиПеретворити;
            
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_перетворити.значення) {
            вернути ні;
          }
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_перетворити.тип) {
            вернути ні;
          }
            
          змінна ллвм_значення: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_вказівки_перетворити.значення.тип == модуль.тип_адреса {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне 
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_птртуінт(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_логічне {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне  {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>; 
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_н8 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_н16 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_н32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_зекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_н64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_уітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц8 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц16 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_секст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_ц64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_адреса {
              ллвм_значення = ЛЛВМ::інст_інттуптр(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
                      або дані_вказівки_перетворити.тип == модуль.тип_н8 або дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_н16 або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_н32 або дані_вказівки_перетворити.тип == модуль.тип_ц32 {
              ллвм_значення = ЛЛВМ::інст_трунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_н64 або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 або дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_сітуфп(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_р32 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
             або дані_вказівки_перетворити.тип == модуль.тип_н8
             або дані_вказівки_перетворити.тип == модуль.тип_н16
             або дані_вказівки_перетворити.тип == модуль.тип_н32
             або дані_вказівки_перетворити.тип == модуль.тип_н64 {
              ллвм_значення = ЛЛВМ::інст_фптууі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_фптусі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = ЛЛВМ::інст_фпекст(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            }
          } інакше якщо дані_вказівки_перетворити.значення.тип == модуль.тип_р64 {
            якщо дані_вказівки_перетворити.тип == модуль.тип_логічне
             або дані_вказівки_перетворити.тип == модуль.тип_н8
             або дані_вказівки_перетворити.тип == модуль.тип_н16
             або дані_вказівки_перетворити.тип == модуль.тип_н32
             або дані_вказівки_перетворити.тип == модуль.тип_н64 {
              ллвм_значення = ЛЛВМ::інст_фптууі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_ц8
                      або дані_вказівки_перетворити.тип == модуль.тип_ц16
                      або дані_вказівки_перетворити.тип == модуль.тип_ц32
                      або дані_вказівки_перетворити.тип == модуль.тип_ц64 {
              ллвм_значення = ЛЛВМ::інст_фптусі(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р32 {
              ллвм_значення = ЛЛВМ::інст_фптрунк(
                дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
                дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
                дані_вказівки_перетворити.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
              );
            } інакше якщо дані_вказівки_перетворити.тип == модуль.тип_р64 {
              ллвм_значення = дані_вказівки_перетворити.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
            }
          }

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиЯк {
          змінна дані_вказівки_як = дані_значення_вказівка.дані як ДаніВказівкиЯк;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_як.значення) {
            вернути ні;
          }
          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_як.тип) {
            вернути ні;
          }

          змінна ллвм_значення = ЛЛВМ::інст_біткаст(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_як.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_як.тип.дані_компіляції як адреса<ЛЛВМ::Тип>
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиОтриматиАдресуЕлемента {
          змінна дані_вказівки_отримати_адресу_елемента = дані_значення_вказівка.дані як ДаніВказівкиОтриматиАдресуЕлемента;

          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.тип) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.значення) {
            вернути ні;
          }
          
          змінна ллвм_позиції = біб::виділити_памʼять<адреса<ЛЛВМ::Значення>>(модуль.виділяч, дані_вказівки_отримати_адресу_елемента.кількість_позицій);

          змінна п: натуральне = 0;
          поки п < дані_вказівки_отримати_адресу_елемента.кількість_позицій {
            якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_адресу_елемента.позиції[п]) {
              вернути ні;
            }

            ллвм_позиції[п] = дані_вказівки_отримати_адресу_елемента.позиції[п].дані_компіляції як адреса<ЛЛВМ::Значення>;

            п += 1;
          }

          змінна ллвм_значення = ЛЛВМ::інст_гетелементптр(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_отримати_адресу_елемента.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
            дані_вказівки_отримати_адресу_елемента.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_отримати_адресу_елемента.кількість_позицій,
            ллвм_позиції
          );

          біб::звільнити_памʼять(модуль.виділяч, ллвм_позиції);

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиОтриматиЗначення {
          змінна дані_вказівки_отримати_значення = дані_значення_вказівка.дані як ДаніВказівкиОтриматиЗначення;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_отримати_значення.значення) {
            вернути ні;
          }

          змінна ллвм_значення = ЛЛВМ::екстракт_валуе(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_отримати_значення.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_отримати_значення.позиція,
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиЗаписати {
          змінна дані_вказівки_записати = дані_значення_вказівка.дані як ДаніВказівкиЗаписати;

          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_записати.куди) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_записати.значення) {
            вернути ні;
          }

          змінна ллвм_значення_записати = ЛЛВМ::інст_сторе(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_записати.значення.дані_компіляції як адреса<ЛЛВМ::Значення>,
            дані_вказівки_записати.куди.дані_компіляції як адреса<ЛЛВМ::Значення>
          );

          значення.дані_компіляції = ллвм_значення_записати;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиПрочитати {
          змінна дані_вказівки_прочитати = дані_значення_вказівка.дані як ДаніВказівкиПрочитати;

          якщо не скомпілювати_тип(ллвм_модуль, дані_вказівки_прочитати.тип) {
            вернути ні;
          }
          якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_прочитати.звідки) {
            вернути ні;
          }

          змінна ллвм_значення_прочитати = ЛЛВМ::інст_лоад(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            дані_вказівки_прочитати.тип.дані_компіляції як адреса<ЛЛВМ::Тип>,
            дані_вказівки_прочитати.звідки.дані_компіляції як адреса<ЛЛВМ::Значення>
          );

          значення.дані_компіляції = ллвм_значення_прочитати;
        } інакше якщо дані_значення_вказівка.вид == ВидВказівкиВернути {
          змінна дані_вказівки_вернути = дані_значення_вказівка.дані як ДаніВказівкиВернути;
          
          змінна ллвм_значення_вернути: адреса<ЛЛВМ::Значення> = пусто;

          якщо дані_вказівки_вернути.значення != пусто {
            якщо не скомпілювати_значення(ллвм_модуль, дані_вказівки_вернути.значення) {
              вернути ні;
            }

            ллвм_значення_вернути = дані_вказівки_вернути.значення.дані_компіляції як адреса<ЛЛВМ::Значення>;
          }

          змінна ллвм_значення = ЛЛВМ::інст_рет(
            дані_значення_вказівка.крок.дані_компіляції як адреса<ЛЛВМ::БазовийБлок>,
            ллвм_значення_вернути
          );

          значення.дані_компіляції = ллвм_значення;
        } інакше {
          // потім: обробити помилку
        }
      } інакше якщо значення.вид == ВидЗначенняГлобальна {
      
      } інакше якщо значення.вид == ВидЗначенняКонстантаДаних {
      
      } інакше якщо значення.вид == ВидЗначенняОбʼєкт {
      
      } інакше якщо значення.вид == ВидЗначенняПустийОбʼєкт {
      
      } інакше якщо значення.вид == ВидЗначенняАргумент {
        змінна дані_значення_аргумент = значення.дані як ДаніЗначенняАргумент;
        змінна дані_інструкції = дані_значення_аргумент.інструкція.дані як ДаніЗначенняІнструкція;

        змінна ллвм_значення_аргумента = ЛЛВМ::отримати_аргумент_функції(
          дані_значення_аргумент.інструкція.дані_компіляції як адреса<ЛЛВМ::Функція>,
          дані_значення_аргумент.позиція
        );

        значення.дані_компіляції = ллвм_значення_аргумента;
      } інакше {
        // потім: обробити помилку
      }
    }

    вернути так;
  }

  дія перебрати_реєстр_глобальних(реєстр: адреса<біб::Реєстр<т8, адреса<Значення>>>, аргумент: невідома_адреса, ключ: т8, значення: адреса<Значення>) -> логічне {
    змінна ллвм_модуль = аргумент як адреса<ЛЛВМ::Модуль>;

    скомпілювати_значення(ллвм_модуль, значення);

    вернути так;
  }

  місцева дія отримати_лл(модуль: адреса<Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне {
    ЛЛВМ::ініціалізувати();
    
    змінна ллвм_модуль = ЛЛВМ::створити_модуль(отримати_ю8_з_т8("привіт"), АРХІТЕКТУРА_ІКС86_64, СИСТЕМА_ЛІНУКС);

    біб::перебрати_реєстр<т8, адреса<Значення>>(
      модуль.глобальні,
      перебрати_реєстр_глобальних,
      ллвм_модуль
    );

    ЛЛВМ::отримати_ір(ллвм_модуль, вихід_розміру, вихід_даних);

    ЛЛВМ::знищити_модуль(ллвм_модуль);
    ЛЛВМ::деініціалізувати();

    вернути так;
  }

  місцева дія отримати_обджект(модуль: адреса<Модуль>, вихід_розміру: адреса<натуральне>, вихід_даних: адреса<памʼять<н8>>) -> логічне {
    вихід_розміру::вміст = 0;
    вихід_даних::вміст = пусто як памʼять<н8>;

    вернути так;
  }

  місцева дія знищити_модуль(модуль: адреса<Модуль>) {

  }
}