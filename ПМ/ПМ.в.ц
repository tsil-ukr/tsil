взяти біб Виділяч;
взяти біб Реєстр;

секція ПМ {
  структура Назва {
    значення: т8;
  }

  структура СховищеНазв {
    розмір: натуральне;
    дані: памʼять<адреса<Назва>>;
    вмісткість: натуральне;
  }

  місцева дія створити_сховище_назв() -> адреса<СховищеНазв>;
  місцева дія знищити_сховище_назв(сховище: адреса<СховищеНазв>);
  місцева дія отримати_назву(сховище: адреса<СховищеНазв>, значення: т8) -> адреса<Назва>;
  місцева дія отримати_назву_без_копіювання(сховище: адреса<СховищеНазв>, значення: т8) -> адреса<Назва>;
}

секція ПМ {
  стала ВИДИМІСТЬ_ВНУТРІШНЯ = 1;
  стала ВИДИМІСТЬ_МІСЦЕВА = 2;
  стала ВИДИМІСТЬ_ЗОВНІШНЯ = 3;

  стала АРХІТЕКТУРА_ІКС86_64 = 2;
  стала АРХІТЕКТУРА_АРМ64 = 3;
  
  стала СИСТЕМА_ЛІНУКС = 2;
  стала СИСТЕМА_ФРІБСД = 3;
  стала СИСТЕМА_ДАРВІН = 4;
  стала СИСТЕМА_ВІНДОС = 5;

  структура Модуль;
  структура Інструкція;
  структура Крок;
  структура Стрибок;
  структура Значення;
  структура Тип;

  структура Параметр {
    тип: адреса<Тип>;
  }

  структура Параметри {
    розмір: натуральне;
    дані: памʼять<Параметр>;
    вмісткість: натуральне;
  }

  структура Модуль {
    виділяч: адреса<біб::Виділяч>;
    типи: адреса<біб::Реєстр<адреса<Назва>, адреса<Тип>>>;
    глобальні: адреса<біб::Реєстр<адреса<Назва>, адреса<Значення>>>;
    тип_ніщо: адреса<Тип>;
    тип_адреса: адреса<Тип>;
    тип_логічне: адреса<Тип>;
    тип_п8: адреса<Тип>;
    тип_п16: адреса<Тип>;
    тип_п32: адреса<Тип>;
    тип_п64: адреса<Тип>;
    тип_ц8: адреса<Тип>;
    тип_ц16: адреса<Тип>;
    тип_ц32: адреса<Тип>;
    тип_ц64: адреса<Тип>;
    тип_д32: адреса<Тип>;
    тип_д64: адреса<Тип>;
    значення_пусто: адреса<Значення>;
    значення_так: адреса<Значення>;
    значення_ні: адреса<Значення>;
  }

  стала ВидТипуНеподільний = 0;
  стала ВидТипуІнструкція = 13;
  стала ВидТипуСтруктура = 14;
  стала ВидТипуМасив = 15;

  структура ДаніТипуСтруктура {
    назва: адреса<Назва>;
    параметри: Параметри;
  }

  структура ДаніТипуМасив {
    тип_елемента: адреса<Тип>;
    розмір: натуральне;
  }

  структура ДаніТипуІнструкція {
    параметри: Параметри;
    тип_результату: адреса<Тип>;
  }

  структура Тип {
    модуль: адреса<Модуль>;
    вид: натуральне;
    дані: ДаніТипуСтруктура 
        | ДаніТипуМасив
        | ДаніТипуІнструкція;
    дані_компіляції: невідома_адреса;
  }

  структура Вказівки {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура Кроки {
    розмір: натуральне;
    дані: памʼять<адреса<Крок>>;
    вмісткість: натуральне;
  }

  стала ВидЗначенняЧисло = 13;
  стала ВидЗначенняІнструкція = 6;
  стала ВидЗначенняВказівка = 7;
  стала ВидЗначенняГлобальна = 8;
  стала ВидЗначенняГлобальнаКонстантаДаних = 9;
  стала ВидЗначенняОбʼєкт = 10;
  стала ВидЗначенняПустийОбʼєкт = 11;
  стала ВидЗначенняАргумент = 12;

  стала ВидВказівкиНакопичити = 1;
  стала ВидВказівкиДодати = 2;
  стала ВидВказівкиВідняти = 3;
  стала ВидВказівкиПомножити = 4;
  стала ВидВказівкиПоділити = 5;
  стала ВидВказівкиОстача = 6;
  стала ВидВказівкиРівно = 7;
  стала ВидВказівкиНеРівно = 8;
  стала ВидВказівкиБільше = 9;
  стала ВидВказівкиМенше = 10;
  стала ВидВказівкиБільшеРівно = 11;
  стала ВидВказівкиМеншеРівно = 12;
  стала ВидВказівкиЗсунутиВліво = 13;
  стала ВидВказівкиЗсунутиВправо = 14;
  стала ВидВказівкиДвійковеІ = 15;
  стала ВидВказівкиДвійковеАБО = 16;
  стала ВидВказівкиДвійковеВиключнеАБО = 17;
  стала ВидВказівкиДвійковеЗаперечення = 18;
  стала ВидВказівкиПеретворити = 19;
  стала ВидВказівкиЯк = 20;
  стала ВидВказівкиОтриматиАдресуЕлемента = 21;
  стала ВидВказівкиОтриматиЗначенняЕлемента = 22;
  стала ВидВказівкиЗаписати = 23;
  стала ВидВказівкиПрочитати = 24;
  стала ВидВказівкиВернути = 25;
  стала ВидВказівкиВиконати = 100;
  стала ВидВказівкиСтрибнути = 101;
  стала ВидВказівкиСтрибнутиЯкщо = 102;

  структура ДаніОдинарноїВказівки {
    значення: адреса<Значення>;
  }

  структура ДаніДвійноїВказівки {
    ліво: адреса<Значення>;
    право: адреса<Значення>;
  }

  структура ДаніВказівкиВиконати {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиНакопичити {
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиПеретворити {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиЯк {
    значення: адреса<Значення>;
    тип: адреса<Тип>;
  }

  структура ДаніВказівкиОтриматиАдресуЕлемента {
    тип: адреса<Тип>;
    значення: адреса<Значення>;
    кількість_позицій: натуральне;
    позиції: памʼять<адреса<Значення>>;
  }

  структура ДаніВказівкиОтриматиЗначенняЕлемента {
    значення: адреса<Значення>;
    позиція: натуральне;
  }

  структура ДаніВказівкиЗаписати {
    значення: адреса<Значення>;
    куди: адреса<Значення>;
  }

  структура ДаніВказівкиПрочитати {
    тип: адреса<Тип>;
    звідки: адреса<Значення>;
  }

  структура ДаніВказівкиВернути {
    значення: адреса<Значення>;
  }

  структура ДаніВказівкиСтрибнути {
    куди: адреса<Крок>;
  }

  структура ДаніВказівкиСтрибнутиЯкщо {
    умова: адреса<Значення>;
    куди: адреса<Крок>;
    інакше_куди: адреса<Крок>;
  }

  структура ДаніЗначенняВказівка {
    крок: адреса<Крок>;
    вид: натуральне;
    дані: ДаніОдинарноїВказівки
        | ДаніДвійноїВказівки
        | ДаніВказівкиВиконати
        | ДаніВказівкиНакопичити
        | ДаніВказівкиПеретворити
        | ДаніВказівкиЯк
        | ДаніВказівкиОтриматиАдресуЕлемента
        | ДаніВказівкиОтриматиЗначенняЕлемента
        | ДаніВказівкиЗаписати
        | ДаніВказівкиПрочитати
        | ДаніВказівкиВернути
        | ДаніВказівкиСтрибнути
        | ДаніВказівкиСтрибнутиЯкщо;
  }

  структура ДаніЗначенняГлобальна {
    видимість: натуральне;
    назва: адреса<Назва>;
  }

  структура ДаніЗначенняГлобальнаКонстантаДаних {
    розмір: натуральне;
    дані: памʼять<п8>;
  }

  структура ДаніЗначенняОбʼєкт {
    кількість_аргументів: натуральне;
    аргументи: памʼять<адреса<Значення>>;
  }

  структура ДаніЗначенняАргумент {
    позиція: натуральне;
    інструкція: адреса<Значення>;
  }

  структура ЗначенняАргументів {
    розмір: натуральне;
    дані: памʼять<адреса<Значення>>;
    вмісткість: натуральне;
  }

  структура ДаніЗначенняІнструкція {
    модуль: адреса<Модуль>;
    видимість: натуральне;
    назва: адреса<Назва>;
    тип: адреса<Тип>;
    кроки: Кроки;
    значення_аргументів: ЗначенняАргументів;
  }

  структура Значення {
    модуль: адреса<Модуль>;
    вид: натуральне;
    тип: адреса<Тип>;
    дані: логічне
        | п8
        | п16
        | п32
        | п64
        | ц8
        | ц16
        | ц32
        | ц64
        | д32
        | д64
        | ДаніЗначенняВказівка
        | ДаніЗначенняГлобальна
        | ДаніЗначенняГлобальнаКонстантаДаних
        | ДаніЗначенняОбʼєкт
        | ДаніЗначенняІнструкція
        | ДаніЗначенняАргумент;
    дані_компіляції: невідома_адреса;
  }

  структура Крок {
    інструкція: адреса<Інструкція>;
    назва: адреса<Назва>;
    вказівки: Вказівки;
    дані_компіляції: невідома_адреса;
  }

  місцева дія покласти_параметр(модуль: адреса<Модуль>,
                                параметри: адреса<Параметри>,
                                параметр: Параметр);

  місцева дія створити_модуль(назва: адреса<Назва>,
                              архітектура: натуральне,
                              система: натуральне) -> адреса<Модуль>;

  місцева дія створити_інструкцію(модуль: адреса<Модуль>,
                                  видимість: натуральне,
                                  назва: адреса<Назва>,
                                  параметри: Параметри,
                                  тип_результату: адреса<Тип>) -> адреса<Інструкція>;

  місцева дія отримати_тип_інструкції(інструкція: адреса<Інструкція>) -> адреса<Тип>;

  // параметри НЕ буде клоновано
  місцева дія створити_тип_інструкції(модуль: адреса<Модуль>,
                                      параметри: Параметри,
                                      тип_результату: адреса<Тип>) -> адреса<Тип>;

  місцева дія отримати_значення_аргумента_інструкції(інструкція: адреса<Інструкція>,
                                                     позиція: натуральне) -> адреса<Значення>;

  місцева дія створити_крок(інструкція: адреса<Інструкція>,
                            назва: адреса<Назва>) -> адреса<Крок>;

  місцева дія перевірити_чи_крок_закінчується_стрибком(крок: адреса<Крок>): логічне;

  місцева дія створити_структуру(модуль: адреса<Модуль>,
                                 назва: адреса<Назва>,
                                 параметри: Параметри) -> адреса<Тип>;

  // параметри НЕ буде клоновано
  місцева дія заповнити_параметри_структури(тип: адреса<Тип>,
                                            параметри: Параметри);

  // аргументи НЕ буде клоновано
  місцева дія виконати_дію(крок: адреса<Крок>,
                           тип: адреса<Тип>,
                           значення: адреса<Значення>,
                           кількість_аргументів: натуральне,
                           аргументи: памʼять<адреса<Значення>>) -> адреса<Значення>;

  місцева дія отримати_розмір_типу_для_виділення(модуль: адреса<Модуль>,
                                                 тип: адреса<Тип>): натуральне;

  місцева дія створити_глобальну(модуль: адреса<Модуль>,
                                 назва: адреса<Назва>,
                                 видимість: натуральне,
                                 тип: адреса<Тип>) -> адреса<Значення>;

  місцева дія отримати_значення_пусто(модуль: адреса<Модуль>) -> адреса<Значення>;
  місцева дія отримати_тип_ніщо(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_адреса(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_логічне(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_ц8(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_ц16(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_ц32(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_ц64(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_п8(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_п16(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_п32(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_п64(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_д32(модуль: адреса<Модуль>) -> адреса<Тип>;
  місцева дія отримати_тип_д64(модуль: адреса<Модуль>) -> адреса<Тип>;

  місцева дія створити_логічне(модуль: адреса<Модуль>, значення: логічне) -> адреса<Значення>;
  місцева дія створити_ц8(модуль: адреса<Модуль>, значення: ц8) -> адреса<Значення>;
  місцева дія створити_ц16(модуль: адреса<Модуль>, значення: ц16) -> адреса<Значення>;
  місцева дія створити_ц32(модуль: адреса<Модуль>, значення: ц32) -> адреса<Значення>;
  місцева дія створити_ц64(модуль: адреса<Модуль>, значення: ц64) -> адреса<Значення>;
  місцева дія створити_п8(модуль: адреса<Модуль>, значення: п8) -> адреса<Значення>;
  місцева дія створити_п16(модуль: адреса<Модуль>, значення: п16) -> адреса<Значення>;
  місцева дія створити_п32(модуль: адреса<Модуль>, значення: п32) -> адреса<Значення>;
  місцева дія створити_п64(модуль: адреса<Модуль>, значення: п64) -> адреса<Значення>;
  місцева дія створити_д32(модуль: адреса<Модуль>, значення: д32) -> адреса<Значення>;
  місцева дія створити_д64(модуль: адреса<Модуль>, значення: д64) -> адреса<Значення>;
  місцева дія створити_константу_даних(модуль: адреса<Модуль>, розмір: натуральне, дані: памʼять<п8>) -> адреса<Значення>;
  місцева дія створити_обʼєкт(модуль: адреса<Модуль>, тип: адреса<Тип>, кількість_аргументів: натуральне, аргументи: памʼять<адреса<Значення>>) -> адреса<Значення>;
  місцева дія створити_пусте_значення(модуль: адреса<Модуль>, тип: адреса<Тип>) -> адреса<Значення>;

  місцева дія вказівка_накопичити(крок: адреса<Крок>, тип: адреса<Тип>) -> адреса<Значення>;

  місцева дія вказівка_додати(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_відняти(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_помножити(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_поділити(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;  
  місцева дія вказівка_остача(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_рівно(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_не_рівно(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  
  місцева дія вказівка_більше(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_менше(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_більше_рівно(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_менше_рівно(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_зсунути_вліво(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_зсунути_вправо(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_двійкове_і(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_двійкове_або(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_двійкове_виключне_або(крок: адреса<Крок>, ліво: адреса<Значення>, право: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_двійкове_заперечення(крок: адреса<Крок>, значення: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_перетворити(крок: адреса<Крок>, значення: адреса<Значення>, очікуваний_тип: адреса<Тип>) -> адреса<Значення>;

  місцева дія вказівка_як(крок: адреса<Крок>, значення: адреса<Значення>, тип: адреса<Тип>) -> адреса<Значення>;
  місцева дія вказівка_отримати_адресу_елемента(крок: адреса<Крок>, тип: адреса<Тип>, значення: адреса<Значення>, кількість_позицій: натуральне, позиції: памʼять<адреса<Значення>>) -> адреса<Значення>;
  місцева дія вказівка_отримати_значення(крок: адреса<Крок>, значення: адреса<Значення>, позиція: натуральне) -> адреса<Значення>;

  місцева дія вказівка_стрибнути(крок: адреса<Крок>, куди: адреса<Крок>) -> адреса<Стрибок>;
  місцева дія змінити_крок_стрибка(стрибок: адреса<Стрибок>, куди: адреса<Крок>);
  місцева дія вказівка_стрибнути_якщо(крок: адреса<Крок>, значення: адреса<Значення>, якщо_так: адреса<Крок>, якщо_ні: адреса<Крок>) -> адреса<Стрибок>;
  місцева дія вказівка_записати(крок: адреса<Крок>, значення: адреса<Значення>, куди: адреса<Значення>);
  місцева дія вказівка_прочитати(крок: адреса<Крок>, тип: адреса<Тип>, звідки: адреса<Значення>) -> адреса<Значення>;
  місцева дія вказівка_вернути(крок: адреса<Крок>);
  місцева дія вказівка_вернути_значення(крок: адреса<Крок>, значення: адреса<Значення>);

  місцева дія знищити_модуль(модуль: адреса<Модуль>);
}