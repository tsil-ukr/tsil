синонім невідома_комірка = адреса;
синонім невідома_памʼять = адреса;
синонім комірка<Т> = адреса<Т>;
синонім памʼять<Т> = адреса<Т>;

зовнішня дія malloc(size: ц32): адреса;
зовнішня дія free(ptr: адреса);
зовнішня дія realloc(ptr: адреса, size: ц32): адреса;

дія виділити<Т>(): адреса<Т>;
дія виділити<Т>(кількість: ц32): адреса<Т>;
дія перевиділити<Т>(значення: адреса<Т>, кількість: ц32): адреса<Т>;
дія звільнити(значення: адреса);

дія виділити<Т>(): адреса<Т> {
  вернути malloc(Т::розмір) як адреса<Т>;
}

дія виділити<Т>(кількість: ц32): адреса<Т> {
  вернути malloc(кількість * Т::розмір) як адреса<Т>;
}

дія перевиділити<Т>(значення: адреса<Т>, кількість: ц32): адреса<Т> {
  вернути realloc(значення, кількість * Т::розмір) як адреса<Т>;
}

дія звільнити(значення: адреса) {
  free(значення);
}

структура АСДЗначення;
структура СписокАСДЗначень;

структура АСДЗначення {};

структура СписокАСДЗначень {
  елементи: памʼять<адреса<АСДЗначення>>;
};

структура список<Т> {
  дані: памʼять<Т>;
  довжина: позитивне;
  вмісткість: позитивне;
}

дія виділити_список<Т>(): адреса<список<Т>> {
  ціль с = виділити<список<Т>>();
  с.дані = пусто;
  с.довжина = 0;
  с.вмісткість = 0;
  вернути с;
}

дія додати_до_списку<Т>(с: адреса<список<Т>>, значення: Т) {
  якщо с.довжина == с.вмісткість {
    якщо с.вмісткість == 0 {
      с.дані = виділити<Т>(1);
    } інакше {
      с.дані = перевиділити<Т>(с.дані, (с.вмісткість + 1) як ц32);
    }
    с.вмісткість = с.вмісткість + 1;
  }
  с.дані[с.довжина] = значення;
  с.довжина = с.довжина + 1;
}

дія звільнити_список<Т>(с: адреса<список<Т>>) {
  звільнити(с.дані);
  звільнити(с);
}

секція ц {
  структура Компілятор;
  структура Середовище;
  структура Обʼєкт;
  структура ПомилкаКомпіляції;
  структура Результат;
  структура РезультатЯкТип;
  структура РезультатЯкЗначення;
  структура РезультатКомпіляціїТілаСекції;
  структура РезультатКомпіляціїБлоку;
  структура ВластивістьСтруктури;
  структура ПараметрДії;
  структура ОбʼєктТипу;
  структура ОбʼєктДії;
  структура ОбʼєктНезавантаженогоЗначення;
  структура ОбʼєктЗначення;
  структура ОбʼєктСекції;
  структура ОбʼєктШаблону;
  структура ІнформаціяВиконанняШаблону;

  структура ОбʼєктГрупиДій {
    обʼєкти_дій: адреса<список<адреса<ОбʼєктДії>>>;
  }

  структура Обʼєкт {
    вид: позитивне;
    дані: адреса<ОбʼєктГрупиДій>;
  }

}

секція ц {
  місцева дія обʼєкт_групи_дій_виконати(обʼєкт_групи_дій: адреса<ОбʼєктГрупиДій>) {
    змінна дх: позитивне = 0;
    поки дх < обʼєкт_групи_дій.обʼєкти_дій.довжина {
      ціль обʼєкти_дій = обʼєкт_групи_дій.обʼєкти_дій;
      ціль обʼєкти_дій_дані = обʼєкти_дій.дані;
      ціль обʼєкт_дії = обʼєкти_дій_дані[дх];
      ціль параметри = обʼєкт_дії.параметри;
      дх = дх + 1;
    }
  }
}