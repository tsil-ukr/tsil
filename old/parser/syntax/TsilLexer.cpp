
// Generated from TsilLexer.g4 by ANTLR 4.13.0


#include "TsilLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct TsilLexerStaticData final {
  TsilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  TsilLexerStaticData(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData(TsilLexerStaticData&&) = delete;
  TsilLexerStaticData& operator=(const TsilLexerStaticData&) = delete;
  TsilLexerStaticData& operator=(TsilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag tsillexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
TsilLexerStaticData *tsillexerLexerStaticData = nullptr;

void tsillexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (tsillexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(tsillexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<TsilLexerStaticData>(
    std::vector<std::string>{
      "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_SYNONYM", "EQUAL", 
      "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
      "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", 
      "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", 
      "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", 
      "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING", "COMMENT", "LINE_COMMENT", 
      "WS", "NL", "DIGIT", "ID_START", "ID_CONTINUE"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0446\\u0456\\u043B\\u044C'", "'\\u0434\\u0456\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
      "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0432\\u0456\\u0434\\u043A\\u043B\\u0430\\u0441\\u0442\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u0432\\u0430\\u0440\\u0456\\u0430\\u0446\\u0456\\u044F'", "'\\u044F\\u043A'", 
      "'\\u0441\\u0435\\u043A\\u0446\\u0456\\u044F'", "'\\u0432\\u0437\\u044F\\u0442\\u0438'", 
      "'\\u0434\\u0430\\u0442\\u0438'", "'\\u043A\\u043E\\u043C\\u043F\\u043E\\u0437\\u0438\\u0446\\u0456\\u044F'", 
      "'\\u0432\\u043B\\u0430\\u0441\\u0442\\u0438\\u0432\\u0456\\u0441\\u0442\\u044C'", 
      "'\\u0437\\u043E\\u0432\\u043D\\u0456\\u0448\\u043D\\u044F'", "'\\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F'", 
      "'\\u043C\\u0456\\u0441\\u0446\\u0435\\u0432\\u0430'", "'\\u043D\\u0435'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0456'", "'\\u0437\\u043C\\u0456\\u043D\\u043D\\u0430'", 
      "'\\u0441\\u0438\\u043D\\u043E\\u043D\\u0456\\u043C'", "'='", "'>'", 
      "'<'", "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
      "'('", "')'", "'['", "']'", "'\\u003F'", "':'", "'~'", "'''", "'\"'", 
      "'!'", "','", "';'", "'{'", "'}'"
    },
    std::vector<std::string>{
      "", "KW_TSIL", "KW_DIIA", "KW_IF", "KW_ELSE", "KW_WHILE", "KW_RETURN", 
      "KW_DEFER", "KW_STRUCT", "KW_VARIATION", "KW_AS", "KW_SECTION", "KW_IMPORT", 
      "KW_EXPORT", "KW_COMPOSITION", "KW_PROPERTY", "KW_PUBLIC", "KW_PRIVATE", 
      "KW_LOCAL", "KW_NOT", "KW_OR", "KW_AND", "KW_VAR", "KW_SYNONYM", "EQUAL", 
      "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
      "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", "BRACKET_OPEN", 
      "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", "DOUBLE_QUOTE", 
      "EXCLAMATION", "COMA", "SEMICOLON", "QUOTE_OPEN", "QUOTE_CLOSE", "NUMBER", 
      "INTEGER", "FLOAT", "HEX", "BIN", "ID", "STRING", "COMMENT", "LINE_COMMENT", 
      "WS", "NL"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,60,439,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,
  	1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
  	1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
  	7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
  	1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
  	1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
  	1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
  	1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
  	1,49,1,49,1,49,1,49,3,49,342,8,49,1,50,4,50,345,8,50,11,50,12,50,346,
  	1,51,4,51,350,8,51,11,51,12,51,351,1,51,1,51,4,51,356,8,51,11,51,12,51,
  	357,1,52,1,52,1,52,1,52,1,52,4,52,365,8,52,11,52,12,52,366,1,53,1,53,
  	1,53,1,53,4,53,373,8,53,11,53,12,53,374,1,54,1,54,5,54,379,8,54,10,54,
  	12,54,382,9,54,1,55,1,55,1,55,1,55,5,55,388,8,55,10,55,12,55,391,9,55,
  	1,55,1,55,1,56,1,56,1,56,1,56,5,56,399,8,56,10,56,12,56,402,9,56,1,56,
  	1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,413,8,57,10,57,12,57,416,
  	9,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,3,59,425,8,59,1,59,1,59,1,59,
  	1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,3,62,438,8,62,1,400,0,63,1,1,
  	3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
  	15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
  	53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
  	38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
  	99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,
  	119,60,121,0,123,0,125,0,1,0,6,3,0,1040,1044,1072,1076,1168,1169,3,0,
  	10,10,13,13,34,34,2,0,10,10,13,13,2,0,9,9,32,32,9,0,65,90,95,95,97,122,
  	1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,2,0,48,57,
  	700,700,454,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
  	0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
  	21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
  	0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
  	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
  	53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
  	0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
  	0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
  	85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
  	0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
  	0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
  	0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,127,1,0,0,0,3,132,1,0,0,0,5,136,1,0,
  	0,0,7,141,1,0,0,0,9,148,1,0,0,0,11,153,1,0,0,0,13,161,1,0,0,0,15,171,
  	1,0,0,0,17,181,1,0,0,0,19,190,1,0,0,0,21,193,1,0,0,0,23,200,1,0,0,0,25,
  	206,1,0,0,0,27,211,1,0,0,0,29,222,1,0,0,0,31,234,1,0,0,0,33,243,1,0,0,
  	0,35,253,1,0,0,0,37,261,1,0,0,0,39,264,1,0,0,0,41,268,1,0,0,0,43,270,
  	1,0,0,0,45,277,1,0,0,0,47,285,1,0,0,0,49,287,1,0,0,0,51,289,1,0,0,0,53,
  	291,1,0,0,0,55,293,1,0,0,0,57,295,1,0,0,0,59,297,1,0,0,0,61,299,1,0,0,
  	0,63,301,1,0,0,0,65,303,1,0,0,0,67,305,1,0,0,0,69,307,1,0,0,0,71,309,
  	1,0,0,0,73,311,1,0,0,0,75,313,1,0,0,0,77,315,1,0,0,0,79,317,1,0,0,0,81,
  	319,1,0,0,0,83,321,1,0,0,0,85,323,1,0,0,0,87,325,1,0,0,0,89,327,1,0,0,
  	0,91,329,1,0,0,0,93,331,1,0,0,0,95,333,1,0,0,0,97,335,1,0,0,0,99,341,
  	1,0,0,0,101,344,1,0,0,0,103,349,1,0,0,0,105,359,1,0,0,0,107,368,1,0,0,
  	0,109,376,1,0,0,0,111,383,1,0,0,0,113,394,1,0,0,0,115,408,1,0,0,0,117,
  	419,1,0,0,0,119,424,1,0,0,0,121,430,1,0,0,0,123,432,1,0,0,0,125,437,1,
  	0,0,0,127,128,5,1094,0,0,128,129,5,1110,0,0,129,130,5,1083,0,0,130,131,
  	5,1100,0,0,131,2,1,0,0,0,132,133,5,1076,0,0,133,134,5,1110,0,0,134,135,
  	5,1103,0,0,135,4,1,0,0,0,136,137,5,1103,0,0,137,138,5,1082,0,0,138,139,
  	5,1097,0,0,139,140,5,1086,0,0,140,6,1,0,0,0,141,142,5,1110,0,0,142,143,
  	5,1085,0,0,143,144,5,1072,0,0,144,145,5,1082,0,0,145,146,5,1096,0,0,146,
  	147,5,1077,0,0,147,8,1,0,0,0,148,149,5,1087,0,0,149,150,5,1086,0,0,150,
  	151,5,1082,0,0,151,152,5,1080,0,0,152,10,1,0,0,0,153,154,5,1074,0,0,154,
  	155,5,1077,0,0,155,156,5,1088,0,0,156,157,5,1085,0,0,157,158,5,1091,0,
  	0,158,159,5,1090,0,0,159,160,5,1080,0,0,160,12,1,0,0,0,161,162,5,1074,
  	0,0,162,163,5,1110,0,0,163,164,5,1076,0,0,164,165,5,1082,0,0,165,166,
  	5,1083,0,0,166,167,5,1072,0,0,167,168,5,1089,0,0,168,169,5,1090,0,0,169,
  	170,5,1080,0,0,170,14,1,0,0,0,171,172,5,1089,0,0,172,173,5,1090,0,0,173,
  	174,5,1088,0,0,174,175,5,1091,0,0,175,176,5,1082,0,0,176,177,5,1090,0,
  	0,177,178,5,1091,0,0,178,179,5,1088,0,0,179,180,5,1072,0,0,180,16,1,0,
  	0,0,181,182,5,1074,0,0,182,183,5,1072,0,0,183,184,5,1088,0,0,184,185,
  	5,1110,0,0,185,186,5,1072,0,0,186,187,5,1094,0,0,187,188,5,1110,0,0,188,
  	189,5,1103,0,0,189,18,1,0,0,0,190,191,5,1103,0,0,191,192,5,1082,0,0,192,
  	20,1,0,0,0,193,194,5,1089,0,0,194,195,5,1077,0,0,195,196,5,1082,0,0,196,
  	197,5,1094,0,0,197,198,5,1110,0,0,198,199,5,1103,0,0,199,22,1,0,0,0,200,
  	201,5,1074,0,0,201,202,5,1079,0,0,202,203,5,1103,0,0,203,204,5,1090,0,
  	0,204,205,5,1080,0,0,205,24,1,0,0,0,206,207,5,1076,0,0,207,208,5,1072,
  	0,0,208,209,5,1090,0,0,209,210,5,1080,0,0,210,26,1,0,0,0,211,212,5,1082,
  	0,0,212,213,5,1086,0,0,213,214,5,1084,0,0,214,215,5,1087,0,0,215,216,
  	5,1086,0,0,216,217,5,1079,0,0,217,218,5,1080,0,0,218,219,5,1094,0,0,219,
  	220,5,1110,0,0,220,221,5,1103,0,0,221,28,1,0,0,0,222,223,5,1074,0,0,223,
  	224,5,1083,0,0,224,225,5,1072,0,0,225,226,5,1089,0,0,226,227,5,1090,0,
  	0,227,228,5,1080,0,0,228,229,5,1074,0,0,229,230,5,1110,0,0,230,231,5,
  	1089,0,0,231,232,5,1090,0,0,232,233,5,1100,0,0,233,30,1,0,0,0,234,235,
  	5,1079,0,0,235,236,5,1086,0,0,236,237,5,1074,0,0,237,238,5,1085,0,0,238,
  	239,5,1110,0,0,239,240,5,1096,0,0,240,241,5,1085,0,0,241,242,5,1103,0,
  	0,242,32,1,0,0,0,243,244,5,1074,0,0,244,245,5,1085,0,0,245,246,5,1091,
  	0,0,246,247,5,1090,0,0,247,248,5,1088,0,0,248,249,5,1110,0,0,249,250,
  	5,1096,0,0,250,251,5,1085,0,0,251,252,5,1103,0,0,252,34,1,0,0,0,253,254,
  	5,1084,0,0,254,255,5,1110,0,0,255,256,5,1089,0,0,256,257,5,1094,0,0,257,
  	258,5,1077,0,0,258,259,5,1074,0,0,259,260,5,1072,0,0,260,36,1,0,0,0,261,
  	262,5,1085,0,0,262,263,5,1077,0,0,263,38,1,0,0,0,264,265,5,1072,0,0,265,
  	266,5,1073,0,0,266,267,5,1086,0,0,267,40,1,0,0,0,268,269,5,1110,0,0,269,
  	42,1,0,0,0,270,271,5,1079,0,0,271,272,5,1084,0,0,272,273,5,1110,0,0,273,
  	274,5,1085,0,0,274,275,5,1085,0,0,275,276,5,1072,0,0,276,44,1,0,0,0,277,
  	278,5,1089,0,0,278,279,5,1080,0,0,279,280,5,1085,0,0,280,281,5,1086,0,
  	0,281,282,5,1085,0,0,282,283,5,1110,0,0,283,284,5,1084,0,0,284,46,1,0,
  	0,0,285,286,5,61,0,0,286,48,1,0,0,0,287,288,5,62,0,0,288,50,1,0,0,0,289,
  	290,5,60,0,0,290,52,1,0,0,0,291,292,5,46,0,0,292,54,1,0,0,0,293,294,5,
  	43,0,0,294,56,1,0,0,0,295,296,5,45,0,0,296,58,1,0,0,0,297,298,5,42,0,
  	0,298,60,1,0,0,0,299,300,5,47,0,0,300,62,1,0,0,0,301,302,5,37,0,0,302,
  	64,1,0,0,0,303,304,5,94,0,0,304,66,1,0,0,0,305,306,5,38,0,0,306,68,1,
  	0,0,0,307,308,5,124,0,0,308,70,1,0,0,0,309,310,5,40,0,0,310,72,1,0,0,
  	0,311,312,5,41,0,0,312,74,1,0,0,0,313,314,5,91,0,0,314,76,1,0,0,0,315,
  	316,5,93,0,0,316,78,1,0,0,0,317,318,5,63,0,0,318,80,1,0,0,0,319,320,5,
  	58,0,0,320,82,1,0,0,0,321,322,5,126,0,0,322,84,1,0,0,0,323,324,5,39,0,
  	0,324,86,1,0,0,0,325,326,5,34,0,0,326,88,1,0,0,0,327,328,5,33,0,0,328,
  	90,1,0,0,0,329,330,5,44,0,0,330,92,1,0,0,0,331,332,5,59,0,0,332,94,1,
  	0,0,0,333,334,5,123,0,0,334,96,1,0,0,0,335,336,5,125,0,0,336,98,1,0,0,
  	0,337,342,3,101,50,0,338,342,3,103,51,0,339,342,3,105,52,0,340,342,3,
  	107,53,0,341,337,1,0,0,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,
  	0,0,342,100,1,0,0,0,343,345,3,121,60,0,344,343,1,0,0,0,345,346,1,0,0,
  	0,346,344,1,0,0,0,346,347,1,0,0,0,347,102,1,0,0,0,348,350,3,121,60,0,
  	349,348,1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,353,
  	1,0,0,0,353,355,5,46,0,0,354,356,3,121,60,0,355,354,1,0,0,0,356,357,1,
  	0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,104,1,0,0,0,359,360,5,48,0,
  	0,360,361,5,1096,0,0,361,364,1,0,0,0,362,365,7,0,0,0,363,365,3,121,60,
  	0,364,362,1,0,0,0,364,363,1,0,0,0,365,366,1,0,0,0,366,364,1,0,0,0,366,
  	367,1,0,0,0,367,106,1,0,0,0,368,369,5,48,0,0,369,370,5,1076,0,0,370,372,
  	1,0,0,0,371,373,2,48,49,0,372,371,1,0,0,0,373,374,1,0,0,0,374,372,1,0,
  	0,0,374,375,1,0,0,0,375,108,1,0,0,0,376,380,3,123,61,0,377,379,3,125,
  	62,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,
  	381,110,1,0,0,0,382,380,1,0,0,0,383,389,5,34,0,0,384,388,8,1,0,0,385,
  	386,5,92,0,0,386,388,5,34,0,0,387,384,1,0,0,0,387,385,1,0,0,0,388,391,
  	1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,
  	0,392,393,5,34,0,0,393,112,1,0,0,0,394,395,5,47,0,0,395,400,5,42,0,0,
  	396,399,3,113,56,0,397,399,9,0,0,0,398,396,1,0,0,0,398,397,1,0,0,0,399,
  	402,1,0,0,0,400,401,1,0,0,0,400,398,1,0,0,0,401,403,1,0,0,0,402,400,1,
  	0,0,0,403,404,5,42,0,0,404,405,5,47,0,0,405,406,1,0,0,0,406,407,6,56,
  	0,0,407,114,1,0,0,0,408,409,5,47,0,0,409,414,5,47,0,0,410,413,3,115,57,
  	0,411,413,8,2,0,0,412,410,1,0,0,0,412,411,1,0,0,0,413,416,1,0,0,0,414,
  	412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,418,6,
  	57,0,0,418,116,1,0,0,0,419,420,7,3,0,0,420,421,1,0,0,0,421,422,6,58,0,
  	0,422,118,1,0,0,0,423,425,5,13,0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,
  	426,1,0,0,0,426,427,5,10,0,0,427,428,1,0,0,0,428,429,6,59,0,0,429,120,
  	1,0,0,0,430,431,2,48,57,0,431,122,1,0,0,0,432,433,7,4,0,0,433,124,1,0,
  	0,0,434,438,3,123,61,0,435,438,7,5,0,0,436,438,3,123,61,0,437,434,1,0,
  	0,0,437,435,1,0,0,0,437,436,1,0,0,0,438,126,1,0,0,0,17,0,341,346,351,
  	357,364,366,374,380,387,389,398,400,412,414,424,437,1,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  tsillexerLexerStaticData = staticData.release();
}

}

TsilLexer::TsilLexer(CharStream *input) : Lexer(input) {
  TsilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *tsillexerLexerStaticData->atn, tsillexerLexerStaticData->decisionToDFA, tsillexerLexerStaticData->sharedContextCache);
}

TsilLexer::~TsilLexer() {
  delete _interpreter;
}

std::string TsilLexer::getGrammarFileName() const {
  return "TsilLexer.g4";
}

const std::vector<std::string>& TsilLexer::getRuleNames() const {
  return tsillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& TsilLexer::getChannelNames() const {
  return tsillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& TsilLexer::getModeNames() const {
  return tsillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& TsilLexer::getVocabulary() const {
  return tsillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView TsilLexer::getSerializedATN() const {
  return tsillexerLexerStaticData->serializedATN;
}

const atn::ATN& TsilLexer::getATN() const {
  return *tsillexerLexerStaticData->atn;
}




void TsilLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  tsillexerLexerInitialize();
#else
  ::antlr4::internal::call_once(tsillexerLexerOnceFlag, tsillexerLexerInitialize);
#endif
}
