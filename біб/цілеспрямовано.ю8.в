взяти визначення біб/Виділяч;
взяти визначення біб/Накопичувач;
взяти визначення біб/КД;
взяти визначення біб/Друк;

секція цілеспрямовано {
  дія перевірити_чи_Т_рівні<Т>(а: Т, б: Т): логічне {
    якщо а.розмір != б.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < а.розмір {
      якщо а.дані[п] != б.дані[п] {
        вернути ні;
      }
      п += 1;
    }

    вернути так;
  }

  дія перевірити_чи_Т_починається_на<Т>(значення: Т, очікуване: Т): логічне {
    якщо значення.розмір < очікуване.розмір {
      вернути ні;
    }

    змінна п: позитивне = 0;

    поки п < очікуване.розмір {
      якщо очікуване.дані[п] != значення.дані[п] {
        вернути ні;
      }

      п += 1;
    }

    вернути так;
  }

  структура можливо<Т> {
    заповнено: позитивне;
    значення: Т;
  }

  структура РозібранаОпція<Т> {
    ключ: Т;
    значення: можливо<Т>;
  }

  структура РозібраніОпції<Т> {
    розмір: позитивне;
    дані: памʼять<РозібранаОпція<Т>>;
  }

  структура РозібранийВихідКоманди<Т> {
    значення: Т;
    опції: РозібраніОпції<Т>;
  }

  структура РозібраніВиходиКоманди<Т> {
    розмір: позитивне;
    дані: памʼять<РозібранийВихідКоманди<Т>>;
  }

  структура РозібранийВхідКоманди<Т> {
    значення: Т;
    опції: РозібраніОпції<Т>;
  }

  структура РозібраніВходиКоманди<Т> {
    розмір: позитивне;
    дані: памʼять<РозібранийВхідКоманди<Т>>;
  }

  структура РозібранаКоманда<Т> {
    опції_програми: РозібраніОпції<Т>;
    виходи: РозібраніВиходиКоманди<Т>;
    команда: Т;
    опції_команди: РозібраніОпції<Т>;
    входи: РозібраніВходиКоманди<Т>;
  }

  структура АргументиДляРозбору<Т> {
    розмір: позитивне;
    дані: памʼять<Т>;
  }

  структура ДоступніКомандиДляРозбору<Т> {
    розмір: позитивне;
    дані: памʼять<Т>;
  }

  дія розібрати_опцію<Т>(виділяч: адреса<біб::Виділяч>,
                         аргументи: АргументиДляРозбору<Т>,
                         позиція_початку: позитивне,
                         знак_початку_опції: Т,
                         знак_розділення_опції: Т,
                         вихід: адреса<РозібранаОпція<Т>>,
                         вихід_позиції_кінця: адреса<позитивне>): логічне {
    якщо позиція_початку >= аргументи.розмір {
      стрибнути вихід_з_помилкою;
    }

    змінна поточна_позиція = позиція_початку;
    змінна аргумент = аргументи.дані[поточна_позиція];

    якщо перевірити_чи_Т_починається_на<Т>(аргумент, знак_початку_опції) {
      змінна опція = РозібранаОпція<Т> {
        ключ = Т { 0, пусто },
        значення = можливо<Т> { позитивне(ні), Т { 0, пусто } }
      };

      змінна пп: позитивне = 0;

      поки пп < аргумент.розмір {
        якщо аргумент.дані[пп] == знак_розділення_опції.дані[0] {
          опція.ключ = Т {
            пп - 2,
            аргумент.дані[2]::адреса як памʼять<п8>
          };
          опція.значення = можливо<Т> {
            позитивне(так),
            Т {
              аргумент.розмір - пп - 1,
              аргумент.дані[пп + 1]::адреса як памʼять<п8>
            }
          };

          вихід::вміст = опція;
          вихід_позиції_кінця::вміст = поточна_позиція;
          вернути так;
        }

        пп += 1;
      }

      опція.ключ = Т {
        аргумент.розмір - 2,
        аргумент.дані[2]::адреса як памʼять<п8>
      };

      вихід::вміст = опція;
      вихід_позиції_кінця::вміст = поточна_позиція;
      вернути так;
    }

  вихід_з_помилкою:
    вернути ні;
  }

  дія розібрати_опції<Т>(виділяч: адреса<біб::Виділяч>,
                        аргументи: АргументиДляРозбору<Т>,
                        позиція_початку: позитивне,
                        знак_початку_опції: Т,
                        знак_розділення_опції: Т,
                        вихід: адреса<РозібраніОпції<Т>>,
                        вихід_позиції_кінця: адреса<позитивне>): логічне {
    якщо позиція_початку >= аргументи.розмір {
      вернути ні;
    }

    змінна опції = біб::зробити_накопичувач<РозібранаОпція<Т>>(виділяч);

    змінна поточна_позиція = позиція_початку;

    змінна опція: РозібранаОпція<Т>;

    якщо розібрати_опцію<Т>(виділяч, аргументи, поточна_позиція, знак_початку_опції, знак_розділення_опції, опція::адреса, поточна_позиція::адреса) {
      біб::покласти_в_накопичувач<РозібранаОпція<Т>>(
        опції::адреса,
        опція
      );
    } інакше {
      стрибнути вихід_з_помилкою;
    }

    поточна_позиція += 1;

    поки поточна_позиція < аргументи.розмір {
      змінна аргумент = аргументи.дані[поточна_позиція];

      якщо розібрати_опцію<Т>(виділяч, аргументи, поточна_позиція, знак_початку_опції, знак_розділення_опції, опція::адреса, поточна_позиція::адреса) {
        біб::покласти_в_накопичувач<РозібранаОпція<Т>>(
          опції::адреса,
          опція
        );
      } інакше {
        стрибнути успішний_вихід;
      }

      поточна_позиція += 1;
    }

  успішний_вихід:
    вихід::вміст = РозібраніОпції<Т> { опції.розмір, опції.дані };
    вихід_позиції_кінця::вміст = поточна_позиція - 1;
    вернути так;

  вихід_з_помилкою:
    біб::звільнити_значення_накопичувача<РозібранаОпція<Т>>(опції);
    вернути ні;
  }

  дія зробити_розібрану_команду<Т>(): РозібранаКоманда<Т> {
    вернути РозібранаКоманда<Т> {
      опції_програми = РозібраніОпції<Т> { 0, пусто },
      виходи = РозібраніВиходиКоманди<Т> { 0, пусто },
      команда = Т { 0, пусто },
      опції_команди = РозібраніОпції<Т> { 0, пусто },
      входи = РозібраніВходиКоманди<Т> { 0, пусто }
    };
  }

  дія знищити_розібрану_команду<Т>(виділяч: адреса<біб::Виділяч>, розібрана_команда: РозібранаКоманда<Т>) {
    біб::звільнити_памʼять(виділяч, розібрана_команда.опції_програми.дані);

    змінна п: позитивне = 0;

    поки п < розібрана_команда.виходи.розмір {
      біб::звільнити_памʼять(виділяч, розібрана_команда.виходи.дані[п].опції.дані);
      п += 1;
    }
    біб::звільнити_памʼять(виділяч, розібрана_команда.виходи.дані);

    біб::звільнити_памʼять(виділяч, розібрана_команда.опції_команди.дані);

    п = 0;

    поки п < розібрана_команда.входи.розмір {
      біб::звільнити_памʼять(виділяч, розібрана_команда.входи.дані[п].опції.дані);
      п += 1;
    }
    біб::звільнити_памʼять(виділяч, розібрана_команда.входи.дані);
  }

  // не робить копії значень аргументів
  дія розібрати_команду<Т>(виділяч: адреса<біб::Виділяч>,
                           аргументи: АргументиДляРозбору<Т>,
                           доступні_команди: ДоступніКомандиДляРозбору<Т>,
                           знак_початку_опції: Т,
                           знак_розділення_опції: Т,
                           вихід: адреса<РозібранаКоманда<Т>>): логічне {
    змінна розібрана_команда = зробити_розібрану_команду<Т>();

    якщо аргументи.розмір == 0 {
      стрибнути успішний_вихід;
    }

    змінна п: позитивне = 0;

  розбір_опцій_програми:
    якщо розібрати_опції<Т>(виділяч, аргументи, п, знак_початку_опції, знак_розділення_опції, розібрана_команда.опції_програми::адреса, п::адреса) {
      п += 1;
    }

    якщо п >= аргументи.розмір {
      стрибнути успішний_вихід;
    }

  розбір_вихідних:
    змінна виходи = біб::зробити_накопичувач<РозібранийВихідКоманди<Т>>(виділяч);

    поки п < аргументи.розмір {
      змінна аргумент = аргументи.дані[п];

      змінна пп: позитивне = 0;
      поки пп < доступні_команди.розмір {
        якщо перевірити_чи_Т_рівні<Т>(аргумент, доступні_команди.дані[пп]) {
          розібрана_команда.команда = аргумент;
          розібрана_команда.виходи = РозібраніВиходиКоманди<Т> { виходи.розмір, виходи.дані };

          п += 1;

          стрибнути розбір_опцій_команди;
        }

        пп += 1;
      }

      біб::покласти_в_накопичувач<РозібранийВихідКоманди<Т>>(
        виходи::адреса,
        РозібранийВихідКоманди<Т> {
          значення = аргумент,
          опції = РозібраніОпції<Т> { 0, пусто }
        }
      );

      п += 1;

      якщо розібрати_опції<Т>(виділяч, аргументи, п, знак_початку_опції, знак_розділення_опції, виходи.дані[виходи.розмір - 1].опції::адреса, п::адреса) {
        п += 1;
      }
    }

    розібрана_команда.виходи = РозібраніВиходиКоманди<Т> { виходи.розмір, виходи.дані };

    якщо розібрана_команда.команда.розмір == 0 {
      стрибнути вихід_з_помилкою;
    }

  розбір_опцій_команди:
    якщо розібрати_опції<Т>(виділяч, аргументи, п, знак_початку_опції, знак_розділення_опції, розібрана_команда.опції_команди::адреса, п::адреса) {
      п += 1;
    }

  розбір_вхідних:
    змінна входи = біб::зробити_накопичувач<РозібранийВхідКоманди<Т>>(виділяч);

    поки п < аргументи.розмір {
      змінна аргумент = аргументи.дані[п];

      біб::покласти_в_накопичувач<РозібранийВхідКоманди<Т>>(
        входи::адреса,
        РозібранийВхідКоманди<Т> {
          значення = аргумент,
          опції = РозібраніОпції<Т> { 0, пусто }
        }
      );

      п += 1;

      якщо розібрати_опції<Т>(виділяч, аргументи, п, знак_початку_опції, знак_розділення_опції, входи.дані[входи.розмір - 1].опції::адреса, п::адреса) {
        п += 1;
      }
    }

    розібрана_команда.входи = РозібраніВходиКоманди<Т> { входи.розмір, входи.дані };

  успішний_вихід:
    вихід::вміст = розібрана_команда;
    вернути так;

  вихід_з_помилкою:
    знищити_розібрану_команду<Т>(виділяч, розібрана_команда);
    вернути ні;
  }
}