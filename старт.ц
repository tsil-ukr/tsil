взяти визначення ./ПМ;
взяти визначення ./ПМЛЛВМ;
взяти визначення ./КЦ;
взяти визначення ./команди;
взяти біб цілеспрямовано;

зовнішня дія розпочати(кількість_аргументів: натуральне, аргументи: памʼять<КЦ::Байти>) -> ц32 {
  змінна статус_виходу: ц32 = 0;
  змінна виділяч = біб::отримати_системний_виділяч();

  змінна кількість_команд: натуральне = 6;

  змінна доступні_команди = цілеспрямовано::ДоступніКомандиДляРозбору<ю8> { кількість_команд, біб::виділити_памʼять<ю8>(виділяч, кількість_команд) };
  доступні_команди.дані[0] = ю8"допомога";
  доступні_команди.дані[1] = ю8"версія";
  доступні_команди.дані[2] = ю8"скомпілювати";
  доступні_команди.дані[3] = ю8"перетворити";
  доступні_команди.дані[4] = ю8"ювкд";
  доступні_команди.дані[5] = ю8"кдвю";

  змінна розібрана_команда = цілеспрямовано::зробити_розібрану_команду<ю8>();

  змінна успіх_розбору_команди = цілеспрямовано::розібрати_команду<ю8>(
    виділяч,
    цілеспрямовано::АргументиДляРозбору<ю8> { кількість_аргументів - 1, аргументи[1]::адреса як памʼять<ю8> },
    доступні_команди,
    ю8"--",
    ю8"=",
    розібрана_команда::адреса
  );

  якщо не успіх_розбору_команди {
    біб::надрукувати("Не вдалось розібрати команду!");
    вернути 1;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"") {
    статус_виходу = ціль_допомога(
      виділяч, 
      цілеспрямовано::Опції<ю8> { 0, пусто },
      цілеспрямовано::Опції<ю8> { 0, пусто }
    );

    стрибнути вихід;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"допомога") {
    статус_виходу = ціль_допомога(
      виділяч, 
      розібрана_команда.опції_програми, 
      розібрана_команда.опції_команди
    );

    стрибнути вихід;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"версія") {
    статус_виходу = ціль_версія(
      виділяч,
      розібрана_команда.опції_програми, 
      розібрана_команда.опції_команди
    );

    стрибнути вихід;
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"перетворити") або біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"скомпілювати") {
    якщо розібрана_команда.входи.розмір < 1 {
      біб::надрукувати("Недостатньо вхідних!");
      статус_виходу = 1;
      стрибнути вихід;
    }

    якщо розібрана_команда.виходи.розмір == 0 {
      змінна п: натуральне = 0;
      поки п < розібрана_команда.входи.розмір {
        змінна вхід = розібрана_команда.входи.дані[п];

        статус_виходу = ціль_перетворити(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          ю8 { 0, пусто },
          цілеспрямовано::Опції<ю8> { 0, пусто },
          розібрана_команда.входи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    } інакше {
      якщо розібрана_команда.входи.розмір > 1 {
        біб::надрукувати("Команда перетворити з вказаними виходами може мати лише один вхід!");
        статус_виходу = 1;
        стрибнути вихід;
      }

      змінна вхід = розібрана_команда.входи.дані[0];

      змінна п: натуральне = 0;
      поки п < розібрана_команда.виходи.розмір {
        змінна вихід = розібрана_команда.виходи.дані[п];

        статус_виходу = ціль_перетворити(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          вихід.значення,
          вихід.опції,
          розібрана_команда.виходи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    }
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"ювкд") {
    якщо розібрана_команда.входи.розмір < 1 {
      біб::надрукувати("Недостатньо вхідних!");
      статус_виходу = 1;
      стрибнути вихід;
    }

    якщо розібрана_команда.виходи.розмір == 0 {
      змінна п: натуральне = 0;
      поки п < розібрана_команда.входи.розмір {
        змінна вхід = розібрана_команда.входи.дані[п];

        статус_виходу = ціль_ювкд(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          ю8 { 0, пусто },
          цілеспрямовано::Опції<ю8> { 0, пусто },
          розібрана_команда.входи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    } інакше {
      якщо розібрана_команда.входи.розмір > 1 {
        біб::надрукувати("Команда кдвю з вказаними виходами може мати лише один вхід!");
        статус_виходу = 1;
        стрибнути вихід;
      }

      змінна вхід = розібрана_команда.входи.дані[0];

      змінна п: натуральне = 0;
      поки п < розібрана_команда.виходи.розмір {
        змінна вихід = розібрана_команда.виходи.дані[п];

        статус_виходу = ціль_ювкд(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          вихід.значення,
          вихід.опції,
          розібрана_команда.виходи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    }
  }

  якщо біб::перевірити_чи_ю8_рівні(розібрана_команда.команда, ю8"кдвю") {
    якщо розібрана_команда.входи.розмір < 1 {
      біб::надрукувати("Недостатньо вхідних!");
      статус_виходу = 1;
      стрибнути вихід;
    }

    якщо розібрана_команда.виходи.розмір == 0 {
      змінна п: натуральне = 0;
      поки п < розібрана_команда.входи.розмір {
        змінна вхід = розібрана_команда.входи.дані[п];
        
        статус_виходу = ціль_кдвю(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          ю8 { 0, пусто },
          цілеспрямовано::Опції<ю8> { 0, пусто },
          розібрана_команда.входи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    } інакше {
      якщо розібрана_команда.входи.розмір > 1 {
        біб::надрукувати("Команда кдвю з вказаними виходами може мати лише один вхід!");
        статус_виходу = 1;
        стрибнути вихід;
      }

      змінна вхід = розібрана_команда.входи.дані[0];

      змінна п: натуральне = 0;
      поки п < розібрана_команда.виходи.розмір {
        змінна вихід = розібрана_команда.виходи.дані[п];

        статус_виходу = ціль_кдвю(
          виділяч,
          розібрана_команда.опції_програми,
          розібрана_команда.опції_команди,
          вхід.значення,
          вхід.опції,
          вихід.значення,
          вихід.опції,
          розібрана_команда.виходи.розмір == 1
        );

        якщо статус_виходу != 0 {
          стрибнути вихід;
        }

        п += 1;
      }

      стрибнути вихід;
    }
  }

  біб::надрукувати("Невідома команда!");
  статус_виходу = 1;

вихід:
  цілеспрямовано::знищити_розібрану_команду<ю8>(виділяч, розібрана_команда);
  біб::звільнити_памʼять(виділяч, доступні_команди.дані);
  вернути статус_виходу;
}